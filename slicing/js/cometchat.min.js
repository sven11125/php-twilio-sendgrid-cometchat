!function (e, t) {
    if ("object" == typeof exports && "object" == typeof module) module.exports = t(); else if ("function" == typeof define && define.amd) define([], t); else {
        var n = t();
        for (var r in n) ("object" == typeof exports ? exports : e)[r] = n[r]
    }
}(window, function () {
    return function (n) {
        var r = {};

        function o(e) {
            if (r[e]) return r[e].exports;
            var t = r[e] = {i: e, l: !1, exports: {}};
            return n[e].call(t.exports, t, t.exports, o), t.l = !0, t.exports
        }

        return o.m = n, o.c = r, o.d = function (e, t, n) {
            o.o(e, t) || Object.defineProperty(e, t, {enumerable: !0, get: n})
        }, o.r = function (e) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {value: "Module"}), Object.defineProperty(e, "__esModule", {value: !0})
        }, o.t = function (t, e) {
            if (1 & e && (t = o(t)), 8 & e) return t;
            if (4 & e && "object" == typeof t && t && t.__esModule) return t;
            var n = Object.create(null);
            if (o.r(n), Object.defineProperty(n, "default", {
                enumerable: !0,
                value: t
            }), 2 & e && "string" != typeof t) for (var r in t) o.d(n, r, function (e) {
                return t[e]
            }.bind(null, r));
            return n
        }, o.n = function (e) {
            var t = e && e.__esModule ? function () {
                return e.default
            } : function () {
                return e
            };
            return o.d(t, "a", t), t
        }, o.o = function (e, t) {
            return Object.prototype.hasOwnProperty.call(e, t)
        }, o.p = "", o(o.s = 39)
    }([function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r, o, s, i = n(2);
        t.constants = {
            DEFAULT_STORE: "cometchat",
            MSG_VER_PRE: "store-ver-pre",
            MSG_VER_POST: "store-ver-post"
        }, t.DEFAULT_VALUES = {
            ZERO: 0,
            MSGS_LIMIT: 30,
            MSGS_MAX_LIMIT: 100,
            USERS_LIMIT: 30,
            USERS_MAX_LIMIT: 100,
            GROUPS_LIMIT: 30,
            GROUPS_MAX_LIMIT: 100,
            CONVERSATION_MAX_LIMIT: 50,
            CALL_TIMEOUT: 45,
            DEFAULT_MSG_ID: 0,
            DEFAULT_MAX_TYPING_INDICATOR_LIMIT: 5,
            REGION_DEFAULT: "eu",
            REGION_DEFAULT_EU: "eu",
            REGION_DEFAULT_US: "us",
            REGION_DEFAULT_IN: "in",
            REGION_DEFAULT_PRIVATE: "private"
        }, (r = t.GroupType || (t.GroupType = {})).Public = "public", r.Private = "private", r.Protected = "protected", r.Password = "password", t.GROUP_TYPE = {
            PUBLIC: "public",
            PRIVATE: "private",
            PROTECTED: "password",
            PASSWORD: "password"
        }, (o = t.GroupMemberScope || (t.GroupMemberScope = {})).Admin = "admin", o.Moderator = "moderator", o.Member = "member", t.GROUP_MEMBER_SCOPE = {
            ADMIN: "admin",
            MODERATOR: "moderator",
            PARTICIPANT: "participant"
        }, t.APPINFO = {
            platform: "WEB",
            sdkVersion: "v2.0.5",
            apiVersion: "v2.0"
        }, t.XMPP = {
            host: "encke.cometchat.com",
            port: 7443,
            ws_url: "/ws/",
            bind_url: "/http-bind/",
            deafult_password: "CometChat",
            PUBSUB_CHANNEL: "pubsub",
            jid_string: "[%s]%s@%s/%s",
            bare_jid_string: "[%s]%s@%s",
            username_string: "[%s]%s",
            muc_jid_string: "[%s]%s@%s.%s",
            pubsub_global_string: "[%s]global_presence",
            pubsub_default_string: "[%s]default",
            pubsub_role_string: "[%s]%s",
            xmpp_resource: "javascripts_" + (new Date).getTime(),
            CONVERSATION: {TYPE: {CHAT: "chat", GROUP_CHAT: "groupchat"}}
        }, t.LOCAL_STORE = {
            COMMON_STORE: "common_store",
            MESSAGE_LISTENERS_LIST: "message_listeners_list",
            USERS_STORE: "users_store",
            MESSAGES_STORE: "messages_store",
            KEYS_STORE: "keys_store",
            STORE_STRING: "%s:%s"
        }, t.ResponseConstants = {
            RESPONSE_KEYS: {
                KEY_DATA: "data",
                KEY_META: "meta",
                KEY_CURSOR: "cursor",
                KEY_ACTION: "action",
                KEY_MESSAGE: "message",
                KEY_ERROR: "error",
                KEY_ERROR_DETAILS: "details",
                KEY_ERROR_CODE: "code",
                KEY_ERROR_MESSAGE: "message",
                KEY_AUTH_TOKEN: "authToken",
                KEY_WS_CHANNEL: "wsChannel",
                KEY_IDENTITY: "identity",
                KEY_SERVICE: "identity",
                KEY_ENTITIES: "entities",
                KEY_ENTITITY: "entity",
                KEY_ENTITYTYPE: "entityType",
                KEY_ATTACHMENTS: "attachments",
                CODE_REQUEST_OK: 200,
                CODE_BAD_REQUEST: 401,
                UNREAD_UNDELIVERED_KEYS: {
                    ENTITY: "entity",
                    ENTITY_TYPE: "entityType",
                    ENTITY_Id: "entityId",
                    COUNT: "count"
                },
                GROUP_MEMBERS_RESPONSE: {SUCCESS: "success", ERROR: "error", MESSAGE: "message"},
                KEY_ENTITY_TYPE: {USER: "user", GROUP: "group"}
            }
        }, t.DELIVERY_RECEIPTS = {
            RECEIVER_ID: "receiverId",
            RECEIVER_TYPE: "type",
            RECIPIENT: "recipient",
            MESSAGE_ID: "messageId",
            RECEIVED: "delivered",
            DELIVERED_AT: "deliveredAt",
            ID: "id",
            TIME: "time",
            DELIVERED_TO_ME_AT: "deliveredToMeAt"
        }, t.READ_RECEIPTS = {
            RECEIVER_ID: "receiverId",
            RECEIVER_TYPE: "type",
            RECIPIENT: "recipient",
            MESSAGE_ID: "messageId",
            READ: "read",
            READ_AT: "readAt",
            ID: "id",
            TIME: "time",
            READ_BY_ME_AT: "readByMeAt"
        }, t.MessageConstatnts = {
            XMPP_KEYS: {FROM: "from", TO: "to", TYPE: "type", TYPE_USER: "chat", TYPE_GROUP: "groupchat"},
            TYPE: {
                TEXT: "text",
                MEDIA: "media",
                IMAGE: "image",
                VIDEO: "video",
                AUDIO: "audio",
                FILE: "file",
                CUSTOM: "custom"
            },
            CATEGORY: {MESSAGE: "message", ACTION: "action", CALL: "call", CUSTOM: "custom"},
            RECEIVER_TYPE: {USER: "user", GROUP: "group"},
            KEYS: {
                ATTATCHMENT: "attatchment",
                ATTATCHMENTS: "attachments",
                ACTION: "action",
                TYPE: "type",
                DATA: "data",
                ID: "id",
                MUID: "muid",
                SENDER: "sender",
                RECEIVER: "receiver",
                RECEIVER_ID: "receiverId",
                CATEGORY: "category",
                RECEIVER_TYPE: "receiverType",
                SENT_AT: "sentAt",
                STATUS: "status",
                TEXT: "text",
                URL: "url",
                METADATA: "metadata",
                RECEIPTS: "receipts",
                MY_RECEIPTS: "myReceipt",
                CUSTOM_DATA: "customData",
                CUSTOM_SUB_TYPE: "subType"
            },
            KNOWN_MEDIA_TYPE: {IMAGE: [], VIDEO: [], AUDIO: [], FILE: []},
            PAGINATION: {
                AFFIX: {APPEND: "append", PREPEND: "prepend"},
                CURSOR_FILEDS: {ID: "id", SENT_AT: "sentAt"},
                CURSOR_AFFIX_DEFAULT: "prepend",
                CURSOR_FIELD_DEFAULT: "sentAt",
                KEYS: {
                    PER_PAGE: "per_page",
                    CURSOR_AFFIX: "cursorAffix",
                    AFFIX: "affix",
                    CURSOR_FIELD: "cursorField",
                    CURSOR_VALUE: "cursorValue",
                    UID: "uid",
                    SENT_AT: "sentAt",
                    ID: "id",
                    CURRENT_PAGE: "page",
                    UNREAD: "unread",
                    UNDELIVERED: "undelivered",
                    HIDE_MESSAGES_FROM_BLOCKED_USER: "hideMessagesFromBlockedUsers",
                    SEARCH_KEY: "searchKey",
                    ONLY_UPDATES: "onlyUpdates",
                    UPDATED_AT: "updatedAt",
                    CATEGORY: "category",
                    TYPE: "type"
                }
            }
        }, t.ATTACHMENTS_CONSTANTS = {
            KEYS: {
                EXTENSION: "extension",
                MIME_TYPE: "mimeType",
                NAME: "name",
                SIZE: "size",
                URL: "url"
            }
        }, (s = t.MessageCategory || (t.MessageCategory = {})).ACTION = "action", s.MESSAGE = "message", s.CALL = "call", s.CUSTOM = "custom", t.TYPING_NOTIFICATION = {
            RECEIVER_ID: "receiverId",
            RECEIVER_TYPE: "receiverType",
            META: "metadata",
            KEYS: {TYPING_NOTIFICATION: "typingNotification", TIMESTAMP: "timestamp"},
            ACTIONS: {STARTED: "started", ENDED: "ended"}
        }, t.ActionConstatnts = {
            ACTION_SUBJECTS: {ACTION_ON: "on", ACTION_BY: "by", ACTION_FOR: "for"},
            ACTION_ENTITY_TYPE: {GROUP_USER: "groupuser", USER: "user", GROUP: "group", MESSAGE: "message"},
            ACTION_KEYS: {
                ACTION_CREATED: "created",
                ACTION_UPDATED: "updated",
                ACTION_DELETED: "deleted",
                ENTITIES: "entities",
                ENTITY: "entity",
                ENTITY_TYPE: "entityType",
                TYPE_MEMBER_JOINED: "joined",
                TYPE_MEMBER_LEFT: "left",
                TYPE_MEMBER_KICKED: "kicked",
                TYPE_MEMBER_BANNED: "banned",
                TYPE_MEMBER_UNBANNED: "unbanned",
                TYPE_MEMBER_INVITED: "invited",
                TYPE_MEMBER_ADDED: "added",
                ACTION_SCOPE_CHANGED: "scopeChanged",
                ACTION_TYPE_USER: "user",
                ACTION_TYPE_GROUP: "group",
                ACTION_TYPE_GROUP_MEMBER: "groupMember",
                TYPE_MESSAGE_EDITED: "edited",
                TYPE_MESSAGE_DELETED: "deleted",
                ACTION_TYPE_CALL: "call",
                EXTRAS: "extras",
                SCOPE: "scope",
                NEW: "new",
                OLD: "old"
            },
            ActionMessages: {
                ACTION_GROUP_JOINED_MESSAGE: "%s joined",
                ACTION_GROUP_LEFT_MESSAGE: "%s left",
                ACTION_MEMBER_KICKED_MESSAGE: "%s kicked %s",
                ACTION_MEMBER_BANNED_MESSAGE: "%s banned %s",
                ACTION_MEMBER_UNBANNED_MESSAGE: "%s unbanned %s",
                ACTION_MEMBER_INVITED_MESSAGE: "%s banned %s",
                ACTION_MESSAGE_EDITED_MESSAGE: " Message Edited",
                ACTION_MESSAGE_DELETED_MESSAGE: "Message Deleted",
                ACTION_MEMBER_SCOPE_CHANGED: "%s made %s %s",
                ACTION_MEMBER_ADDED_TO_GROUP: "%s added %s"
            },
            ACTION_TYPE: {
                TYPE_MEMBER_JOINED: "joined",
                TYPE_MEMBER_LEFT: "left",
                TYPE_MEMBER_KICKED: "kicked",
                TYPE_MEMBER_BANNED: "banned",
                TYPE_MEMBER_UNBANNED: "unbanned",
                TYPE_MEMBER_INVITED: "invited",
                TYPE_MEMBER_SCOPE_CHANGED: "scopeChanged",
                TYPE_MESSAGE: "message",
                TYPE_MESSAGE_EDITED: "edited",
                TYPE_MESSAGE_DELETED: "deleted",
                TYPE_MEMBER_ADDED: "added"
            },
            ACTIONS: {
                MEMBER_JOINED: "joined",
                MEMBER_LEFT: "left",
                MEMBER_KICKED: "kicked",
                MEMBER_BANNED: "banned",
                MEMBER_UNBANNED: "unbanned",
                MEMBER_INVITED: "invited",
                MEMBER_SCOPE_CHANGED: "scopeChanged"
            }
        }, t.BlockedUsersConstants = {
            REQUEST_KEYS: {
                DIRECTIONS: {
                    BOTH: "both",
                    HAS_BLOCKED_ME: "hasBlockedMe",
                    BLOCKED_BY_ME: "blockedByMe"
                }
            }
        }, t.CallConstants = {
            CALL_TYPE_AUDIO: "audio",
            CALL_TYPE_VIDEO: "video",
            CALL_TYPE: {AUDIO: "audio", VIDEO: "video"},
            RECEIVER_TYPE_GROUP: "group",
            RECEIVER_TYPE_USER: "user",
            CALL_KEYS: {
                CALL_DATA: "data",
                CALL_ID: "id",
                CALL_SESSION_ID: "sessionid",
                CALL_RECEIVER: "receiver",
                CALL_SENDER: "sender",
                CALL_RECEIVER_TYPE: "receiverType",
                CALL_STATUS: "status",
                CALL_TYPE: "type",
                CALL_INITIATED_AT: "initiatedAt",
                CALL_JOINED_AT: "joinedAt",
                CALL_LEFT_AT: "leftAt",
                CALL_METADATA: "metadata",
                CALL_ENTITIES: "entities",
                CALL_ENTITY_TYPE: "entityType",
                CALL_ENTITY: "entity",
                CALL_ENTITY_USER: "user",
                CALL_ENTITY_GROUP: "group"
            },
            CALL_STATUS: {
                INITIATED: "initiated",
                ONGOING: "ongoing",
                UNANSWERED: "unanswered",
                REJECTED: "rejected",
                BUSY: "busy",
                CANCELLED: "cancelled",
                ENDED: "ended"
            }
        }, t.GroupConstants = {
            KEYS: {
                NAME: "name",
                GUID: "guid",
                TYPE: "type",
                PASSWORD: "password",
                ICON: "icon",
                DESCRIPTION: "description",
                OWNER: "owner",
                METADATA: "metadata",
                CREATED_AT: "createdAt",
                UPDATED_AT: "updatedAt",
                HAS_JOINED: "hasJoined",
                WS_CHANNEL: "wsChannel"
            }
        }, t.GroupMemersConstans = {
            KEYS: {
                SCOPE: "scope",
                UID: "uid",
                GUID: "guid",
                USER: "user",
                NAME: "name"
            }
        }, t.UserConstants = {
            UID: "uid",
            NAME: "name",
            AUTH_TOKEN: "authToken",
            AVATAR: "avatar",
            CREDITS: "credits",
            LAST_ACTIVE_AT: "lastActiveAt",
            LINK: "link",
            META_DATA: "metaData",
            ROLE: "role",
            STATUS: "status",
            STATUS_MESSAGE: "statusMessage",
            USER_NAME: "user_name"
        }, t.Errors = {
            ERROR_IO_EXCEPTION: "ERROR_IO_EXCEPTION",
            ERROR_JSON_EXCEPTION: "ERROR_JSON_EXCEPTION",
            ERROR_PASSWORD_MISSING: "ERROR_PASSWORD_MISSING",
            ERROR_LIMIT_EXCEEDED: "ERROR_LIMIT_EXCEEDED",
            ERROR_USER_NOT_LOGGED_IN: "ERROR_USER_NOT_LOGGED_IN",
            ERROR_INVALID_GUID: "ERROR_INVALID_GUID",
            ERROR_PASSWORD_MISSING_MESSAGE: "Password is mandatory for a password group",
            ERROR_LIMIT_EXCEEDED_MESSAGE: "Limit Exceeded Max limit of %s",
            ERROR_USER_NOT_LOGGED_IN_MESSAGE: "Please log in to CometChat before calling this method",
            ERROR_INVALID_GUID_MESSAGE: "Please provide a valid GUID",
            ERROR_DEFAULT_MESSAGE: "Something went wrong"
        }, t.CALL_ERROR = {
            CALL_ALREADY_INITIATED: {
                code: "CALL_ALREADY_INITIATED",
                name: "CALL_ALREADY_INITIATED",
                message: "There is already call in progress",
                details: {}
            },
            ERROR_IN_CALLING: {
                code: "CALL_IN_PROGRESS",
                name: "CALL_ALREADY_INITIATED",
                message: "There is already call in progress",
                details: {}
            },
            CANNOT_ACCEPT_CALL: {
                code: "CALL_IN_PROGRESS",
                name: "CALL_IN_PROGRESS",
                message: "There is already a call in progress",
                details: {}
            }
        }, t.PARAMETER_ERROR = {
            PARAMETER_REQUIRED: {
                code: "%s_NOT_PROVIDED",
                name: "%s_NOT_PROVIDED",
                message: "please provide the %s",
                details: {}
            }
        }, t.GENERAL_ERROR = {
            MUST_BE_A_STRING: {code: "INVALID_%s", name: "INVALID_%s", message: "%s should be a string", details: {}},
            MUST_BE_A_NUMBER: {code: "INVALID_%s", name: "INVALID_%s", message: "%s should be a number", details: {}},
            MUST_BE_A_OBJECT: {code: "INVALID_%s", name: "INVALID_%s", message: "%s should be a object", details: {}},
            MUST_BE_AN_ARRAY: {code: "INVALID_%s", name: "INVALID_%s", message: "%s should be an array", details: {}},
            MUST_BE_A_BOOLEAN: {code: "INVALID_%s", name: "INVALID_%s", message: "%s should be a boolean", details: {}},
            MUST_BE_A_BLOB: {code: "INVALID_%s", name: "INVALID_%s", message: "%s should be a blob", details: {}},
            INVALID: {code: "INVALID_%s", name: "INVALID_%s", message: "%s is invalid", details: {}},
            COMPULSORY: {code: "%s_IS_COMPULSORY", name: "%s_IS_COMPULSORY", message: "%s is required", details: {}},
            LIMIT_EXCEEDED: {
                code: "ERROR_%s_EXCEEDED",
                name: "ERROR_%s_EXCEEDED",
                message: "%s exceeded max limit of %s",
                details: {}
            },
            MUST_BE_A_POSITIVE_NUMBER: {
                code: "INVALID_%s",
                name: "INVALID_%s",
                message: "%s should be a postive integer greater than 0",
                details: {}
            },
            INVALID_MEDIA_FILE: {
                code: "INVALID_%s",
                name: "INVALID_%s",
                message: "The message type does not match the file's mime type.",
                details: {}
            },
            EMPTY_STRING: {
                code: "INVALID_%s",
                name: "INVALID_%s",
                message: "The parameter %s is required and it cannot be empty",
                details: {}
            }
        }, t.UserErrors = {
            INVALID_STATUS: new i.CometChatException({
                code: "INVALID_STATUS_VALUE",
                name: "INVALID_STATUS_VALUE",
                message: "status accepts only two values: online and offline",
                details: ""
            }),
            INVALID_DIRECTION: new i.CometChatException({
                code: "INVALID_DIRECTION_VALUE",
                name: "INVALID_DIRECTION_VALUE",
                message: "direction accepts only three values: both, blockedByMe and hasBlockedMe",
                details: ""
            }),
            USER_NOT_LOGGED_IN: new i.CometChatException({
                code: "USER_NOT_LOGGED_IN",
                name: "USER_NOT_LOGGED_IN",
                message: "please login before using any other method of cometchat",
                details: ""
            })
        }, t.GroupErrors = {
            NOT_A_GROUP: new i.CometChatException({
                code: "NOT_A_GROUP",
                message: "Please use group class to construct a new group"
            }),
            INVALID_SCOPE: new i.CometChatException({
                code: "INVALID_SCOPE_VALUE",
                name: "INVALID_SCOPE_VALUE",
                message: "Scope can be admin, moderator or participant",
                details: ""
            }),
            INVALID_GROUP_TYPE: new i.CometChatException({
                code: "INVALID_GROUP_TYPE",
                name: "INVALID_GROUP_TYPE",
                message: "Group Type can be public, private, protected or password",
                details: ""
            })
        }, t.PresenceConstatnts = {
            XMPP_KEYS: {
                FROM: "from",
                STATUS: "status",
                LAST_ACTIVE_AT: "lastActiveAt",
                TYPE: "type"
            }, STATUS: {ONLINE: "online", AVAILABLE: "available", OFFLINE: "offline", JOINED: "JOINED", LEFT: "LEFT"}
        }, t.APP_SETTINGS = {
            APP_SETTINGS: "app_settings",
            KEYS: {
                CHAT_HOST: "CHAT_HOST",
                CHAT_USE_SSL: "CHAT_USE_SSL",
                GROUP_SERVICE: "GROUP_SERVICE",
                CALL_SERVICE: "CALL_SERVICE",
                CHAT_WS_PORT: "CHAT_WS_PORT",
                CHAT_WSS_PORT: "CHAT_WSS_PORT",
                CHAT_HTTP_BIND_PORT: "CHAT_HTTP_BIND_PORT",
                CHAT_HTTPS_BIND_PORT: "CHAT_HTTPS_BIND_PORT",
                ADMIN_API_HOST: "ADMIN_API_HOST",
                CLIENT_API_HOST: "CLIENT_API_HOST",
                WEBRTC_HOST: "WEBRTC_HOST",
                WEBRTC_USE_SSL: "WEBRTC_USE_SSL",
                WEBRTC_WS_PORT: "WEBRTC_WS_PORT",
                WEBRTC_WSS_PORT: "WEBRTC_WSS_PORT",
                WEBRTC_HTTP_BIND_PORT: "WEBRTC_HTTP_BIND_PORT",
                WEBRTC_HTTPS_BIND_PORT: "WEBRTC_HTTPS_BIND_PORT",
                EXTENSION_LIST: "extensions",
                EXTENSION_KEYS: {ID: "id", NAME: "name"}
            }
        }, t.COMMON_UTILITY_CONSTANTS = {
            TYPE_CONSTANTS: {
                BOOLEAN: "boolean",
                STRING: "string",
                OBJECT: "object",
                NUMBER: "number"
            }
        }
    }, function (e, r, t) {
        "use strict";
        r.__esModule = !0;
        var o = t(9), s = t(0), i = t(4), a = t(2), c = t(17), u = t(18), l = t(19), d = t(3), n = t(14);

        function E(e) {
            return null != e && ("string" == typeof e && (e = e.trim()), "object" == typeof e && 0 === Object.keys(e).length && (e = void 0)), ["", 0, "0", !1, null, "null", void 0, "undefined"].includes(e)
        }

        function h(e) {
            for (var r = [], t = 1; t < arguments.length; t++) r[t - 1] = arguments[t];
            return e.split("%s").reduce(function (e, t, n) {
                return e + t + (r[n] || "")
            }, "")
        }

        r.isObject = function (e) {
            return e instanceof Object && e.constructor === Object
        }, r.isTruthy = function (e) {
            return [!0, 1, "1", "true", "TRUE"].includes(e)
        }, r.isFalsy = E, r.getOrdinalSuffix = function (e) {
            var t = e % 10, n = e % 100;
            return 1 == t && 11 != n ? e + "st" : 2 == t && 12 != n ? e + "nd" : 3 == t && 13 != n ? e + "rd" : e + "th"
        }, r.format = h, r.createUidFromJid = function (e) {
            return e.substring(e.lastIndexOf("]") + 1, e.lastIndexOf("@"))
        };
        var p = function () {
            function e() {
            }

            return e.log = function (e, t) {
            }, e.error = function (e, t) {
            }, e.info = function (e, t) {
            }, e
        }();

        function f() {
            return new Promise(function (t, n) {
                i.makeApiCall("appSettings").then(function (e) {
                    o.LocalStorage.getInstance().set("app_settings", e.data), t(e.data)
                }, function (e) {
                    n(new a.CometChatException(e.error))
                })
            })
        }

        function C(e, t) {
            return e << t | e >>> 32 - t
        }

        function S(e) {
            var t, n = "";
            for (t = 7; 0 <= t; t--) n += (e >>> 4 * t & 15).toString(16);
            return n
        }

        r.Logger = p, r.getCurrentTime = function () {
            return (new Date).getTime()
        }, r.getAppSettings = function () {
            return new Promise(function (t, n) {
                o.LocalStorage.getInstance().get(s.APP_SETTINGS.APP_SETTINGS).then(function (e) {
                    E(e) ? f().then(function (e) {
                        t(e)
                    }, function (e) {
                        n(e)
                    }) : t(e)
                }, function (e) {
                    n(e)
                })
            })
        }, r.getUpdatedSettings = f, r.isImage = function (e) {
            var t;
            return e.type && e.type.toLowerCase().includes("image") && (t = !0), t
        }, r.isVideo = function (e) {
            var t;
            return e.type && e.type.toLowerCase().includes("video") && (t = !0), t
        }, r.isAudio = function (e) {
            var t;
            return e.type && e.type.toLowerCase().includes("audio") && (t = !0), t
        }, r.validateScope = function (e) {
            return typeof e !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "SCOPE", "SCOPE", "scope"))) : E(e) ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "SCOPE", "SCOPE", "scope"))) : e != d.CometChat.GROUP_MEMBER_SCOPE.ADMIN && e != d.CometChat.GROUP_MEMBER_SCOPE.MODERATOR && e != d.CometChat.GROUP_MEMBER_SCOPE.PARTICIPANT ? new a.CometChatException(s.GroupErrors.INVALID_SCOPE) : void 0
        }, r.validateUpdateGroup = function (e) {
            return e.hasOwnProperty(s.GroupConstants.KEYS.GUID) ? typeof e[s.GroupConstants.KEYS.GUID] !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "GUID", "GUID", "guid"))) : E(e[s.GroupConstants.KEYS.GUID]) ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "GUID", "GUID", "guid"))) : e.hasOwnProperty(s.GroupConstants.KEYS.NAME) && "" === e[s.GroupConstants.KEYS.NAME] ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.EMPTY_STRING), "GROUP_NAME", "GROUP_NAME", "group name"))) : void 0 : new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.COMPULSORY), "GUID", "GUID", "guid")))
        }, r.validateJoinGroup = function (e, t, n) {
            if (typeof e == s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.OBJECT) {
                if (!e.hasOwnProperty(s.GroupConstants.KEYS.GUID)) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.COMPULSORY), "GUID", "GUID", "guid")));
                if (typeof e[s.GroupConstants.KEYS.GUID] !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "GUID", "GUID", "guid")));
                if (E(e[s.GroupConstants.KEYS.GUID])) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "GUID", "GUID", "guid")));
                if (!e.hasOwnProperty(s.GroupConstants.KEYS.TYPE)) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.COMPULSORY), "GROUP_TYPE", "GROUP_TYPE", "group type")));
                if (typeof e[s.GroupConstants.KEYS.TYPE] !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "GROUP_TYPE", "GROUP_TYPE", "group type")));
                if (E(e[s.GroupConstants.KEYS.TYPE])) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "GROUP_TYPE", "GROUP_TYPE", "group type")));
                if (e[s.GroupConstants.KEYS.TYPE].toLowerCase() != d.CometChat.GROUP_TYPE.PUBLIC && e[s.GroupConstants.KEYS.TYPE].toLowerCase() != d.CometChat.GROUP_TYPE.PASSWORD && e[s.GroupConstants.KEYS.TYPE].toLowerCase() != d.CometChat.GROUP_TYPE.PROTECTED && e[s.GroupConstants.KEYS.TYPE].toLowerCase() != d.CometChat.GROUP_TYPE.PRIVATE) return new a.CometChatException(s.GroupErrors.INVALID_GROUP_TYPE);
                if (e[s.GroupConstants.KEYS.TYPE].toLowerCase() == d.CometChat.GROUP_TYPE.PASSWORD) {
                    if (!e.hasOwnProperty(s.GroupConstants.KEYS.PASSWORD)) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.COMPULSORY), "PASSWORD", "PASSWORD", "password")));
                    if (typeof e[s.GroupConstants.KEYS.PASSWORD] !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "PASSWORD", "PASSWORD", "password")));
                    if (E(e[s.GroupConstants.KEYS.PASSWORD])) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "PASSWORD", "PASSWORD", "password")))
                }
            } else {
                if (void 0 !== e) {
                    if (typeof e !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "GUID", "GUID", "guid")));
                    if (E(e)) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "GUID", "GUID", "guid")))
                }
                if (void 0 !== t) {
                    if (typeof t !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "GROUP_TYPE", "GROUP_TYPE", "group type")));
                    if (E(t)) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "GROUP_TYPE", "GROUP_TYPE", "group type")));
                    if (t.toLowerCase() != d.CometChat.GROUP_TYPE.PUBLIC && t.toLowerCase() != d.CometChat.GROUP_TYPE.PASSWORD && t.toLowerCase() != d.CometChat.GROUP_TYPE.PROTECTED && t.toLowerCase() != d.CometChat.GROUP_TYPE.PRIVATE) return new a.CometChatException(s.GroupErrors.INVALID_GROUP_TYPE);
                    if (t.toLowerCase() == d.CometChat.GROUP_TYPE.PASSWORD) {
                        if (typeof n !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "PASSWORD", "PASSWORD", "password")));
                        if (E(n)) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "PASSWORD", "PASSWORD", "password")))
                    }
                }
            }
        }, r.validateCreateGroup = function (e) {
            if (!e.hasOwnProperty(s.GroupConstants.KEYS.GUID)) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.COMPULSORY), "GUID", "GUID", "guid")));
            if (typeof e[s.GroupConstants.KEYS.GUID] !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "GUID", "GUID", "guid")));
            if (E(e[s.GroupConstants.KEYS.GUID])) return new a.CometChatException({code: "Empty GUID"});
            if (!e.hasOwnProperty(s.GroupConstants.KEYS.NAME)) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.COMPULSORY), "GROUP_NAME", "GROUP_NAME", "group name")));
            if (typeof e[s.GroupConstants.KEYS.NAME] !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "GROUP_NAME", "GROUP_NAME", "group name")));
            if (E(e[s.GroupConstants.KEYS.NAME])) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "GROUP_NAME", "GROUP_NAME", "group name")));
            if (!e.hasOwnProperty(s.GroupConstants.KEYS.TYPE)) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.COMPULSORY), "GROUP_TYPE", "GROUP_TYPE", "group type")));
            if (typeof e[s.GroupConstants.KEYS.TYPE] !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "GROUP_TYPE", "GROUP_TYPE", "group type")));
            if (E(e[s.GroupConstants.KEYS.TYPE])) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "GROUP_TYPE", "GROUP_TYPE", "group type")));
            if (e[s.GroupConstants.KEYS.TYPE].toLowerCase() != d.CometChat.GROUP_TYPE.PUBLIC && e[s.GroupConstants.KEYS.TYPE].toLowerCase() != d.CometChat.GROUP_TYPE.PASSWORD && e[s.GroupConstants.KEYS.TYPE].toLowerCase() != d.CometChat.GROUP_TYPE.PROTECTED && e[s.GroupConstants.KEYS.TYPE].toLowerCase() != d.CometChat.GROUP_TYPE.PRIVATE) return new a.CometChatException(s.GroupErrors.INVALID_GROUP_TYPE);
            if (e[s.GroupConstants.KEYS.TYPE].toLowerCase() == d.CometChat.GROUP_TYPE.PASSWORD) {
                if (!e.hasOwnProperty(s.GroupConstants.KEYS.PASSWORD)) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.COMPULSORY), "PASSWORD", "PASSWORD", "password")));
                if (typeof e[s.GroupConstants.KEYS.PASSWORD] !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "PASSWORD", "PASSWORD", "password")));
                if (E(e[s.GroupConstants.KEYS.PASSWORD])) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "PASSWORD", "PASSWORD", "password")))
            }
        }, r.validateId = function (e) {
            return typeof e !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "UID/GUID", "UID/GUID", "uid/guid"))) : E(e) ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "UID/GUID", "UID/GUID", "uid/guid"))) : void 0
        }, r.validateHideMessagesFromBlockedUsers = function (e) {
            if (typeof e !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.BOOLEAN) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_BOOLEAN), "HIDE_MESSAGES_FROM_BLOCKED_USERS", "HIDE_MESSAGES_FROM_BLOCKED_USERS", "hideMessagesFromBlockedUsers")))
        }, r.validateArray = function (e) {
            return typeof e != s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.OBJECT ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_OBJECT), "LIST", "LIST", "list"))) : Array.isArray(e) ? void 0 : new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_AN_ARRAY), "LIST", "LIST", "list")))
        }, r.validateMsgId = function (e) {
            return isNaN(e) ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_NUMBER), "MESSAGE_ID", "MESSAGE_ID", "Message Id"))) : E(e) ? new a.CometChatException(n.ERRORS.PARAMETER_MISSING) : void 0
        }, r.validateChatType = function (e) {
            return typeof e !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "RECEIVER_TYPE", "RECEIVER_TYPE", "receiver type"))) : E(e) ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "RECEIVER_TYPE", "RECEIVER_TYPE", "receiver type"))) : e != s.MessageConstatnts.RECEIVER_TYPE.GROUP && e != s.MessageConstatnts.RECEIVER_TYPE.USER ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "RECEIVER_TYPE", "RECEIVER_TYPE", "Receiver Type"))) : void 0
        }, r.validateMessage = function (e) {
            var t = e;
            if (typeof t.getReceiverId() !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "RECEIVER_ID", "RECEIVER_ID", "Receiver Id")));
            if (E(t.getReceiverId())) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "RECEIVER_ID", "RECEIVER_ID", "Receiver Id")));
            if (typeof t.getReceiverType() !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "RECEIVER_TYPE", "RECEIVER_TYPE", "Receiver Type")));
            if (E(t.getReceiverType())) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "RECEIVER_TYPE", "RECEIVER_TYPE", "Receiver Type")));
            if (t.getReceiverType() != s.MessageConstatnts.RECEIVER_TYPE.GROUP && t.getReceiverType() != s.MessageConstatnts.RECEIVER_TYPE.USER) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "RECEIVER_TYPE", "RECEIVER_TYPE", "Receiver Type")));
            if (e instanceof c.TextMessage && E(e.getText())) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "MESSAGE_TEXT", "MESSAGE_TEXT", "Message Text")));
            if (e instanceof u.MediaMessage) {
                var n = e;
                if (!(n.file instanceof Blob)) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_BLOB), "MEDIA_OBJECT", "MEDIA_OBJECT", "Media Object")));
                if (typeof n.getData() !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.OBJECT) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_OBJECT), "MEDIA_OBJECT", "MEDIA_OBJECT", "Media Object")));
                if (E(n.getData())) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "MEDIA_OBJECT", "MEDIA_OBJECT", "Media Object")));
                if ("image" == n.getType()) {
                    if (!r.isImage(n.file)) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID_MEDIA_FILE), "IMAGE_FILE", "IMAGE_FILE")))
                } else if ("video" == n.getType()) {
                    if (!r.isVideo(n.file)) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID_MEDIA_FILE), "VIDEO_FILE", "VIDEO_FILE")))
                } else if ("audio" == n.getType() && !r.isAudio(n.file)) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID_MEDIA_FILE), "AUDIO_FILE", "AUDIO_FILE")))
            }
            if (e instanceof l.CustomMessage && E(e.getCustomData())) return new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "CUSTOM_DATA", "CUSTOM_DATA", "Custom Data")))
        }, r.validateCreateUser = function (e) {
            return e.hasOwnProperty(s.UserConstants.UID) ? typeof e[s.UserConstants.UID] !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "UID", "UID", "uid"))) : E(e[s.UserConstants.UID]) ? new a.CometChatException({code: "Empty UID"}) : e.hasOwnProperty(s.UserConstants.NAME) ? typeof e[s.UserConstants.NAME] !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "USER_NAME", "USER_NAME", "user name"))) : E(e[s.UserConstants.NAME]) ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.INVALID), "USER_NAME", "USER_NAME", "user name"))) : void 0 : new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.COMPULSORY), "USER_NAME", "USER_NAME", "user name"))) : new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.COMPULSORY), "UID", "UID", "uid")))
        }, r.validateUpdateUser = function (e) {
            return e.hasOwnProperty(s.UserConstants.UID) ? typeof e[s.UserConstants.UID] !== s.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.MUST_BE_A_STRING), "UID", "UID", "uid"))) : E(e[s.UserConstants.UID]) ? new a.CometChatException({code: "Empty UID"}) : e.hasOwnProperty(s.UserConstants.NAME) && "" === e[s.UserConstants.NAME] ? new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.EMPTY_STRING), "USER_NAME", "USER_NAME", "user name"))) : void 0 : new a.CometChatException(JSON.parse(h(JSON.stringify(s.GENERAL_ERROR.COMPULSORY), "UID", "UID", "uid")))
        }, r.SHA1 = function (e) {
            var t, n, r, o, s, i, a, c, u, l = new Array(80), d = 1732584193, E = 4023233417, h = 2562383102,
                p = 271733878, f = 3285377520, g = (e = function (e) {
                    e = e.replace(/\r\n/g, "\n");
                    for (var t = "", n = 0; n < e.length; n++) {
                        var r = e.charCodeAt(n);
                        r < 128 ? t += String.fromCharCode(r) : (127 < r && r < 2048 ? t += String.fromCharCode(r >> 6 | 192) : (t += String.fromCharCode(r >> 12 | 224), t += String.fromCharCode(r >> 6 & 63 | 128)), t += String.fromCharCode(63 & r | 128))
                    }
                    return t
                }(e)).length, _ = new Array;
            for (n = 0; n < g - 3; n += 4) r = e.charCodeAt(n) << 24 | e.charCodeAt(n + 1) << 16 | e.charCodeAt(n + 2) << 8 | e.charCodeAt(n + 3), _.push(r);
            switch (g % 4) {
                case 0:
                    n = 2147483648;
                    break;
                case 1:
                    n = e.charCodeAt(g - 1) << 24 | 8388608;
                    break;
                case 2:
                    n = e.charCodeAt(g - 2) << 24 | e.charCodeAt(g - 1) << 16 | 32768;
                    break;
                case 3:
                    n = e.charCodeAt(g - 3) << 24 | e.charCodeAt(g - 2) << 16 | e.charCodeAt(g - 1) << 8 | 128
            }
            for (_.push(n); _.length % 16 != 14;) _.push(0);
            for (_.push(g >>> 29), _.push(g << 3 & 4294967295), t = 0; t < _.length; t += 16) {
                for (n = 0; n < 16; n++) l[n] = _[t + n];
                for (n = 16; n <= 79; n++) l[n] = C(l[n - 3] ^ l[n - 8] ^ l[n - 14] ^ l[n - 16], 1);
                for (o = d, s = E, i = h, a = p, c = f, n = 0; n <= 19; n++) u = C(o, 5) + (s & i | ~s & a) + c + l[n] + 1518500249 & 4294967295, c = a, a = i, i = C(s, 30), s = o, o = u;
                for (n = 20; n <= 39; n++) u = C(o, 5) + (s ^ i ^ a) + c + l[n] + 1859775393 & 4294967295, c = a, a = i, i = C(s, 30), s = o, o = u;
                for (n = 40; n <= 59; n++) u = C(o, 5) + (s & i | s & a | i & a) + c + l[n] + 2400959708 & 4294967295, c = a, a = i, i = C(s, 30), s = o, o = u;
                for (n = 60; n <= 79; n++) u = C(o, 5) + (s ^ i ^ a) + c + l[n] + 3395469782 & 4294967295, c = a, a = i, i = C(s, 30), s = o, o = u;
                d = d + o & 4294967295, E = E + s & 4294967295, h = h + i & 4294967295, p = p + a & 4294967295, f = f + c & 4294967295
            }
            return (S(d) + S(E) + S(h) + S(p) + S(f)).toLowerCase()
        }
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = function (e) {
            null !== e.code && void 0 !== e.code && "" !== e.code && (this.code = e.code), null !== e.name && void 0 !== e.name && "" !== e.name && (this.name = e.name), null !== e.message && void 0 !== e.message && "" !== e.message && (this.message = e.message), null !== e.details && void 0 !== e.details && "" !== e.details && (this.details = e.details)
        };
        t.CometChatException = r
    }, function (e, X, q) {
        "use strict";
        (function (t) {
            var p = this && this.__assign || function () {
                return (p = Object.assign || function (e) {
                    for (var t, n = 1, r = arguments.length; n < r; n++) for (var o in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                    return e
                }).apply(this, arguments)
            }, u = this && this.__awaiter || function (s, i, a, c) {
                return new (a || (a = Promise))(function (e, t) {
                    function n(e) {
                        try {
                            o(c.next(e))
                        } catch (e) {
                            t(e)
                        }
                    }

                    function r(e) {
                        try {
                            o(c.throw(e))
                        } catch (e) {
                            t(e)
                        }
                    }

                    function o(t) {
                        t.done ? e(t.value) : new a(function (e) {
                            e(t.value)
                        }).then(n, r)
                    }

                    o((c = c.apply(s, i || [])).next())
                })
            }, l = this && this.__generator || function (n, r) {
                var o, s, i, e, a = {
                    label: 0, sent: function () {
                        if (1 & i[0]) throw i[1];
                        return i[1]
                    }, trys: [], ops: []
                };
                return e = {
                    next: t(0),
                    throw: t(1),
                    return: t(2)
                }, "function" == typeof Symbol && (e[Symbol.iterator] = function () {
                    return this
                }), e;

                function t(t) {
                    return function (e) {
                        return function (t) {
                            if (o) throw new TypeError("Generator is already executing.");
                            for (; a;) try {
                                if (o = 1, s && (i = 2 & t[0] ? s.return : t[0] ? s.throw || ((i = s.return) && i.call(s), 0) : s.next) && !(i = i.call(s, t[1])).done) return i;
                                switch (s = 0, i && (t = [2 & t[0], i.value]), t[0]) {
                                    case 0:
                                    case 1:
                                        i = t;
                                        break;
                                    case 4:
                                        return a.label++, {value: t[1], done: !1};
                                    case 5:
                                        a.label++, s = t[1], t = [0];
                                        continue;
                                    case 7:
                                        t = a.ops.pop(), a.trys.pop();
                                        continue;
                                    default:
                                        if (!(i = 0 < (i = a.trys).length && i[i.length - 1]) && (6 === t[0] || 2 === t[0])) {
                                            a = 0;
                                            continue
                                        }
                                        if (3 === t[0] && (!i || t[1] > i[0] && t[1] < i[3])) {
                                            a.label = t[1];
                                            break
                                        }
                                        if (6 === t[0] && a.label < i[1]) {
                                            a.label = i[1], i = t;
                                            break
                                        }
                                        if (i && a.label < i[2]) {
                                            a.label = i[2], a.ops.push(t);
                                            break
                                        }
                                        i[2] && a.ops.pop(), a.trys.pop();
                                        continue
                                }
                                t = r.call(n, a)
                            } catch (e) {
                                t = [6, e], s = 0
                            } finally {
                                o = i = 0
                            }
                            if (5 & t[0]) throw t[1];
                            return {value: t[0] ? t[1] : void 0, done: !0}
                        }([t, e])
                    }
                }
            };
            X.__esModule = !0;
            var e = q(27), f = q(1), g = q(2), _ = q(4), d = q(5), a = q(13), c = q(15), r = q(9), E = q(18), C = q(17),
                S = q(7), n = q(21), T = q(8), m = q(0), A = q(6), I = q(16), o = q(34), s = q(48), i = q(20),
                N = q(23), R = q(29), y = q(14), O = q(22), v = q(49), M = q(50), P = q(52), L = q(53), U = q(54),
                D = q(24), w = q(30), b = q(31), Y = q(19), x = q(35), G = q(55), B = q(32), F = q(25), K = q(56),
                H = q(33), k = q(57), J = q(37), V = q(58), j = a.XMPPConnectionHelper.getInstance(), h = function () {
                    function h(e) {
                        try {
                            "undefined" != typeof document ? f.Logger.info("This is browser", "we have everything") : "undefined" != typeof navigator && "ReactNative" == navigator.product ? (f.Logger.info("This is react-native", "we do not have dom"), t.DOMParser = q(61).DOMParser, t.document = (new t.DOMParser).parseFromString("<?xml version='1.0'?>", "text/xml"), h.isNative = !0) : f.Logger.info("This is node", "we do not have anything"), h.typingTimer(), h.appId = e, h.messagesStore = n.MessagesStore.getInstance(), h.localStorage = r.LocalStorage.getInstance(), h.userStore = o.UserStore.getInstance(), h.keyStore = s.KeyStore.getInstance(), h.messageListnerMaping = D.MessageListnerMaping.getInstance()
                        } catch (e) {
                            f.Logger.error("CometChat: constructor", e)
                        }
                    }

                    return h.setAuthToken = function (e) {
                        try {
                            h.authToken = e
                        } catch (e) {
                            f.Logger.error("CometChat: setAuthToken", e)
                        }
                    }, h.prototype.getAuthToken = function () {
                        try {
                            return h.authToken
                        } catch (e) {
                            f.Logger.error("CometChat: getAuthToken", e)
                        }
                    }, h.getAppId = function () {
                        try {
                            return h.appId
                        } catch (e) {
                            f.Logger.error("CometChat: getAppId", e)
                        }
                    }, h.prototype.getApiKey = function () {
                        try {
                            return h.apiKey
                        } catch (e) {
                            f.Logger.error("CometChat: getApiKey", e)
                        }
                    }, h.init = function (r, e) {
                        var o = this;
                        return void 0 === r && (r = ""), void 0 === e && (e = {}), new Promise(function (t, n) {
                            try {
                                "object" == typeof r && (r.hasOwnProperty("appId") && (r = r.appId), r.hasOwnProperty("appSettings") && (e = r.appSettings)), f.isFalsy(e) ? e = (new H.AppSettingsBuilder).setRegion(H.AppSettings.REGION_EU).build() : e.getRegion() == H.AppSettings.REGION_PRIVATE && (e.region = r), o.appSettings = e, f.isFalsy(r) ? n(new g.CometChatException(y.INIT_ERROR.NO_APP_ID)) : (o.initialzed = !0, o.getInstance(r)), t(!0), h.keyStore.get("deviceId").then(function (e) {
                                    if (null == e) {
                                        var t = r.substr(0, r.length - 10) + "_" + V() + "_" + (new Date).getTime(),
                                            n = f.SHA1(t);
                                        h.keyStore.set("deviceId", n)
                                    }
                                }), h.localStorage.get("user").then(function (e) {
                                    e ? (h.user = new d.Me(e), h.setAuthToken(h.user.getAuthToken()), h.XMPPLogin(h.user, function () {
                                        t(!0)
                                    }, function () {
                                        n("error in connecting to xmpp server")
                                    })) : t(!0)
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.isInitialized = function () {
                        try {
                            return this.initialzed
                        } catch (e) {
                            f.Logger.error("CometChat: isInitialized", e)
                        }
                    }, h.getInstance = function (e) {
                        try {
                            return this.cometChat || (this.cometChat = new h(e)), this.cometChat
                        } catch (e) {
                            f.Logger.error("CometChat: getInstance", e)
                        }
                    }, h.registerTokenForPushNotification = function (l, d) {
                        var E = this;
                        return new Promise(function (c, u) {
                            try {
                                h.keyStore.get("deviceId").then(function (e) {
                                    var t = "", n = e, r = m.APPINFO.platform, o = m.APPINFO.sdkVersion,
                                        s = m.APPINFO.apiVersion;
                                    if (navigator && (t = navigator.userAgent), null == n) {
                                        var i = E.appId.substr(0, E.appId.length - 10) + "_" + V() + "_" + (new Date).getTime();
                                        n = f.SHA1(i), h.keyStore.set("deviceId", n)
                                    }
                                    var a = {
                                        platform: r,
                                        userAgent: t,
                                        deviceId: n,
                                        appInfo: {
                                            version: o,
                                            apiVersion: s,
                                            pushNotification: {fcmDeviceToken: l, settings: d}
                                        }
                                    };
                                    _.makeApiCall("updateMyDetails", {}, a, !1).then(function (e) {
                                        c("Token Registration successful")
                                    }, function (e) {
                                        u(new g.CometChatException(e.error))
                                    }).catch(function (e) {
                                        u(new g.CometChatException(e))
                                    })
                                })
                            } catch (e) {
                                u(new g.CometChatException(e))
                            }
                        })
                    }, h.login = function () {
                        for (var s = this, i = [], e = 0; e < arguments.length; e++) i[e] = arguments[e];
                        return new Promise(function (r, o) {
                            try {
                                if ("object" == typeof i[0]) {
                                    var e = i[0];
                                    i[0].hasOwnProperty("authToken") ? i[0] = e.authToken : i[0].hasOwnProperty("username") && i[0].hasOwnProperty("apiKey") && (i[0] = e.username, i[1] = e.apiKey)
                                }
                                if (2 == i.length ? (f.isFalsy(i[0]) || f.isFalsy(i[1])) && o(new g.CometChatException(y.ERRORS.PARAMETER_MISSING)) : 1 == i.length ? f.isFalsy(i[0]) && o(new g.CometChatException(y.ERRORS.PARAMETER_MISSING)) : o(new g.CometChatException(y.ERRORS.PARAMETER_MISSING)), !f.isFalsy(s.getAppId())) return h.localStorage.get("user").then(function (n) {
                                    if (2 == i.length) {
                                        h.isSecure = !1, h.apiKey = i[1];
                                        var e = i[0];
                                        null != n && n.uid !== i[0] ? s.messagesStore.clearStore().then(function () {
                                            h.userStore.clearStore().then(function () {
                                                h.localStorage.clearStore().then(function () {
                                                    a.XMPPConnectionHelper.getInstance().XMPPDisconnect(), h.generateAuthToken(e).then(function (e) {
                                                        h.user = new d.Me(e), h.setAuthToken(h.user.getAuthToken()), h.getLoggedInUser().then(function (e) {
                                                            (h.user = new d.Me(e)).setAuthToken(h.authToken), h.setAuthToken(h.user.getAuthToken()), F.ExtensionController.hookOnLogin(h.user), h.XMPPLogin(h.user, r, o)
                                                        }, function (e) {
                                                            o(new g.CometChatException(e.error))
                                                        })
                                                    }, function (e) {
                                                        o(new g.CometChatException(e))
                                                    })
                                                })
                                            })
                                        }) : f.isFalsy(h.authToken) ? f.isFalsy(e) || (f.isFalsy(h.apiKey) ? o(new g.CometChatException(y.LOGIN_ERROR.UNAUTHORISED)) : s.generateAuthToken(e).then(function (e) {
                                            s.user = new d.Me(e), s.setAuthToken(h.user.getAuthToken()), s.getLoggedInUser().then(function (e) {
                                                s.user = new d.Me(e), s.user.setAuthToken(h.authToken), s.setAuthToken(s.user.getAuthToken()), F.ExtensionController.hookOnLogin(h.user), a.XMPPConnectionHelper.getInstance().XMPPDisconnect(), s.XMPPLogin(s.user, r, o)
                                            }, function (e) {
                                                o(new g.CometChatException(e.error))
                                            })
                                        }, function (e) {
                                            o(new g.CometChatException(e))
                                        })) : (F.ExtensionController.hookOnLogin(h.user), r(s.user))
                                    } else h.authToken = i[0], h.isSecure = !0, s.getLoggedInUser().then(function (e) {
                                        if (e.authToken != i[0]) {
                                            var t = s;
                                            t.messagesStore.clearStore().then(function () {
                                                t.userStore.clearStore().then(function () {
                                                    t.localStorage.clearStore().then(function () {
                                                        a.XMPPConnectionHelper.getInstance().XMPPDisconnect(), t.getLoggedInUser().then(function (e) {
                                                            h.XMPPLogin(new d.Me(e), r, o)
                                                        }, function (e) {
                                                            o(new g.CometChatException(e))
                                                        })
                                                    })
                                                })
                                            })
                                        } else n ? r(new d.Me(e)) : h.XMPPLogin(new d.Me(e), r, o)
                                    }, function (e) {
                                        o(new g.CometChatException(e))
                                    })
                                });
                                o(new g.CometChatException(y.LOGIN_ERROR.NOT_INITIALIZED))
                            } catch (e) {
                                o(new g.CometChatException(e))
                            }
                        })
                    }, h.sendMessage = function (c) {
                        var e = this;
                        return new Promise(function (i, a) {
                            return u(e, void 0, void 0, function () {
                                var t, n, r, o, s = this;
                                return l(this, function (e) {
                                    switch (e.label) {
                                        case 0:
                                            return e.trys.push([0, 2, , 3]), c instanceof C.TextMessage || c instanceof E.MediaMessage || c instanceof Y.CustomMessage || (c = c[m.MessageConstatnts.KEYS.ATTATCHMENT] ? (t = m.MessageConstatnts.TYPE.FILE, f.isImage(c[m.MessageConstatnts.KEYS.ATTATCHMENT]) ? t = m.MessageConstatnts.TYPE.IMAGE : f.isAudio(c[m.MessageConstatnts.KEYS.ATTATCHMENT]) ? t = m.MessageConstatnts.TYPE.AUDIO : f.isVideo(c[m.MessageConstatnts.KEYS.ATTATCHMENT]) && (t = m.MessageConstatnts.TYPE.VIDEO), new E.MediaMessage(c[m.MessageConstatnts.KEYS.RECEIVER_ID], c[m.MessageConstatnts.KEYS.ATTATCHMENT], t, c[m.MessageConstatnts.KEYS.RECEIVER_TYPE])) : new C.TextMessage(c[m.MessageConstatnts.KEYS.RECEIVER_ID], c[m.MessageConstatnts.KEYS.TEXT], c[m.MessageConstatnts.KEYS.RECEIVER_TYPE])), [4, F.ExtensionController.hookBeforeMessageSent(c)];
                                        case 1:
                                            return n = e.sent(), c = n, (r = f.validateMessage(c)) instanceof g.CometChatException ? (a(r), [2]) : (c.receiver = c.receiverId, delete c.receiverId, [2, _.makeApiCall("sendMessage", {}, c, c instanceof E.MediaMessage).then(function (r) {
                                                return u(s, void 0, void 0, function () {
                                                    var t, n;
                                                    return l(this, function (e) {
                                                        switch (e.label) {
                                                            case 0:
                                                                return t = S.MessageController.trasformJSONMessge(r.data), [4, F.ExtensionController.hookAfterMessageSent(t)];
                                                            case 1:
                                                                return n = e.sent(), i(t = n), [2]
                                                        }
                                                    })
                                                })
                                            }, function (e) {
                                                a(new g.CometChatException(e.error))
                                            })]);
                                        case 2:
                                            return o = e.sent(), a(new g.CometChatException(o)), [3, 3];
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        })
                    }, h.sendDirectMessage = function (e) {
                        try {
                            return Object.assign(e, {receiverType: m.MessageConstatnts.RECEIVER_TYPE.USER}), this.sendMessage(e)
                        } catch (e) {
                            f.Logger.error("CometChat: sendDirectMessage", e)
                        }
                    }, h.sendGroupMessage = function (e) {
                        try {
                            return Object.assign(e, {receiverType: m.MessageConstatnts.RECEIVER_TYPE.GROUP}), this.sendMessage(e)
                        } catch (e) {
                            f.Logger.error("CometChat: sendGroupMessage", e)
                        }
                    }, h.sendMediaMessage = function (e) {
                        try {
                            return this.sendMessage(e)
                        } catch (e) {
                            f.Logger.error("CometChat: sendMediaMessage", e)
                        }
                    }, h.sendCustomMessage = function (e) {
                        try {
                            return this.sendMessage(e)
                        } catch (e) {
                            f.Logger.error("CometChat: sendCustomMessage", e)
                        }
                    }, h.getLastDeliveredMessageId = function () {
                        return u(this, void 0, void 0, function () {
                            var t;
                            return l(this, function (e) {
                                switch (e.label) {
                                    case 0:
                                        return e.trys.push([0, 2, , 3]), [4, D.MessageListnerMaping.getInstance().get("all")];
                                    case 1:
                                        return [2, e.sent()];
                                    case 2:
                                        return t = e.sent(), f.Logger.error("CometChat: getLastDeliveredMessageId", t), [3, 3];
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, h.startTyping = function (e) {
                        try {
                            if (f.isFalsy(e)) return;
                            var t, n = this.RECEIVER_TYPE.USER, r = {};
                            if (e instanceof w.TypingIndicator) t = e.getReceiverId(), n = e.getReceiverType(), r = e.getMetadata(); else {
                                if (!e.hasOwnProperty(m.TYPING_NOTIFICATION.RECEIVER_ID)) return;
                                t = e[m.TYPING_NOTIFICATION.RECEIVER_ID], e.hasOwnProperty(m.TYPING_NOTIFICATION.RECEIVER_TYPE) && (n = e[m.TYPING_NOTIFICATION.RECEIVER_TYPE]), e.hasOwnProperty(m.TYPING_NOTIFICATION.META) && (r = e[m.TYPING_NOTIFICATION.META])
                            }
                            if (f.isFalsy(t)) return;
                            n = n == this.RECEIVER_TYPE.USER ? m.XMPP.CONVERSATION.TYPE.CHAT : m.XMPP.CONVERSATION.TYPE.GROUP_CHAT, (b.TypingNotificationController.getTypingStartedMap(t) && f.getCurrentTime() - b.TypingNotificationController.getTypingStartedMap(t) >= 1e3 * m.DEFAULT_VALUES.DEFAULT_MAX_TYPING_INDICATOR_LIMIT || null == b.TypingNotificationController.getTypingStartedMap(t)) && f.getAppSettings().then(function (e) {
                                switch (n) {
                                    case m.XMPP.CONVERSATION.TYPE.CHAT:
                                        j.sendTypingStarted(f.format(m.XMPP.bare_jid_string, h.getAppId(), t, e[m.APP_SETTINGS.KEYS.CHAT_HOST]), n, r);
                                        break;
                                    case m.XMPP.CONVERSATION.TYPE.GROUP_CHAT:
                                        j.sendTypingStarted(f.format(m.XMPP.muc_jid_string, h.getAppId(), t, e[m.APP_SETTINGS.KEYS.GROUP_SERVICE], e[m.APP_SETTINGS.KEYS.CHAT_HOST]), n, r)
                                }
                                b.TypingNotificationController.addTypingStarted(t)
                            }, function (e) {
                            })
                        } catch (e) {
                            f.Logger.error("CometChat: startTyping", e)
                        }
                    }, h.endTyping = function (e) {
                        try {
                            if (!f.isFalsy(e)) {
                                var t, n = this.RECEIVER_TYPE.USER, r = {};
                                if (e instanceof w.TypingIndicator) t = e.getReceiverId(), n = e.getReceiverType(), r = e.getMetadata(); else {
                                    if (!e.hasOwnProperty(m.TYPING_NOTIFICATION.RECEIVER_ID)) return;
                                    t = e[m.TYPING_NOTIFICATION.RECEIVER_ID], e.hasOwnProperty(m.TYPING_NOTIFICATION.RECEIVER_TYPE) && (n = e[m.TYPING_NOTIFICATION.RECEIVER_TYPE]), n = n == this.RECEIVER_TYPE.USER ? m.XMPP.CONVERSATION.TYPE.CHAT : m.XMPP.CONVERSATION.TYPE.GROUP_CHAT, e.hasOwnProperty(m.TYPING_NOTIFICATION.META) && (r = e[m.TYPING_NOTIFICATION.META])
                                }
                                if (f.isFalsy(t)) return;
                                n = n == this.RECEIVER_TYPE.USER ? m.XMPP.CONVERSATION.TYPE.CHAT : m.XMPP.CONVERSATION.TYPE.GROUP_CHAT, b.TypingNotificationController.getTypingStartedMap(t) && f.getCurrentTime() - b.TypingNotificationController.getTypingStartedMap(t) < 1e3 * m.DEFAULT_VALUES.DEFAULT_MAX_TYPING_INDICATOR_LIMIT && (b.TypingNotificationController.getTypingEndedMap(t) && f.getCurrentTime() - b.TypingNotificationController.getTypingEndedMap(t) >= 1e3 * m.DEFAULT_VALUES.DEFAULT_MAX_TYPING_INDICATOR_LIMIT || null == b.TypingNotificationController.getTypingEndedMap(t)) && f.getAppSettings().then(function (e) {
                                    switch (n) {
                                        case m.XMPP.CONVERSATION.TYPE.CHAT:
                                            j.sendTypingPaused(f.format(m.XMPP.bare_jid_string, h.getAppId(), t, e[m.APP_SETTINGS.KEYS.CHAT_HOST]), n, r);
                                            break;
                                        case m.XMPP.CONVERSATION.TYPE.GROUP_CHAT:
                                            j.sendTypingPaused(f.format(m.XMPP.muc_jid_string, h.getAppId(), t, e[m.APP_SETTINGS.KEYS.GROUP_SERVICE], e[m.APP_SETTINGS.KEYS.CHAT_HOST]), n, r)
                                    }
                                    b.TypingNotificationController.addTypingEnded(t)
                                }, function (e) {
                                })
                            }
                        } catch (e) {
                            f.Logger.error("CometChat: endTyping", e)
                        }
                    }, h.markAsRead = function (e, t, n) {
                        try {
                            a.XMPPConnectionHelper.getInstance().markAsRead(t, n, e)
                        } catch (e) {
                            f.Logger.error("CometChat: markAsRead", e)
                        }
                    }, h.markAsDelivered = function (e, t, n) {
                        try {
                            a.XMPPConnectionHelper.getInstance().markAsDelivered(t, n, e)
                        } catch (e) {
                            f.Logger.error("CometChat: markAsDelivered", e)
                        }
                    }, h.getMessageDetails = function (e) {
                        return new Promise(function (t, n) {
                            try {
                                f.isFalsy(e) ? n(new g.CometChatException(y.ERRORS.PARAMETER_MISSING)) : _.makeApiCall("getMessageDetails", {messageId: e}).then(function (e) {
                                    t(S.MessageController.trasformJSONMessge(e.data))
                                }, function (e) {
                                    f.Logger.error("CometChat:GetMessageDetails:", e), n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.getMessageReceipts = function (r) {
                        return new Promise(function (t, n) {
                            try {
                                var e = f.validateMsgId(r);
                                if (e instanceof g.CometChatException) return void n(e);
                                f.isFalsy(r) ? n(new g.CometChatException(y.ERRORS.PARAMETER_MISSING)) : _.makeApiCall("getMessageDetails", {messageId: r}).then(function (e) {
                                    S.MessageController.getReceiptsFromJSON(e.data).then(function (e) {
                                        t(e)
                                    }, function (e) {
                                        n(new g.CometChatException(e))
                                    })
                                }, function (e) {
                                    f.Logger.error("CometChat:GetMessageDetails:", e), n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.getUnreadMessageCount = function (n) {
                        void 0 === n && (n = !1);
                        var o = 0;
                        return new Promise(function (r, t) {
                            try {
                                var e = f.validateHideMessagesFromBlockedUsers(n);
                                if (e instanceof g.CometChatException) return void t(e);
                                n && (o = 1), _.makeApiCall("getMessages", {}, {
                                    unread: 1,
                                    count: 1,
                                    hideMessagesFromBlockedUsers: o
                                }).then(function (e) {
                                    var t = {}, n = {};
                                    e.data.map(function (e) {
                                        e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_TYPE] == m.MessageConstatnts.RECEIVER_TYPE.GROUP ? n[e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_Id]] = e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.COUNT] : t[e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_Id]] = e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.COUNT]
                                    }), r({users: t, groups: n})
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.getUnreadMessageCountForAllUsers = function (r) {
                        void 0 === r && (r = !1);
                        var o = 0;
                        return new Promise(function (n, t) {
                            try {
                                var e = f.validateHideMessagesFromBlockedUsers(r);
                                if (e instanceof g.CometChatException) return void t(e);
                                r && (o = 1), _.makeApiCall("getMessages", {}, {
                                    hideMessagesFromBlockedUsers: o,
                                    receiverType: m.MessageConstatnts.RECEIVER_TYPE.USER,
                                    unread: 1,
                                    count: 1
                                }).then(function (e) {
                                    var t = {};
                                    e.data.map(function (e) {
                                        t[e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_Id]] = e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.COUNT]
                                    }), n(p({}, t))
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.getUnreadMessageCountForAllGroups = function (r) {
                        void 0 === r && (r = !1);
                        var o = 0;
                        return new Promise(function (n, t) {
                            try {
                                var e = f.validateHideMessagesFromBlockedUsers(r);
                                if (e instanceof g.CometChatException) return void t(e);
                                r && (o = 1), _.makeApiCall("getMessages", {}, {
                                    hideMessagesFromBlockedUsers: o,
                                    receiverType: m.MessageConstatnts.RECEIVER_TYPE.GROUP,
                                    unread: 1,
                                    count: 1
                                }).then(function (e) {
                                    var t = {};
                                    e.data.map(function (e) {
                                        e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_TYPE] == m.MessageConstatnts.RECEIVER_TYPE.GROUP && (t[e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_Id]] = e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.COUNT])
                                    }), n(p({}, t))
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.getUnreadMessageCountForUser = function (o, s) {
                        void 0 === s && (s = !1);
                        var i = 0;
                        return new Promise(function (n, t) {
                            try {
                                var e = f.validateId(o);
                                if (e instanceof g.CometChatException) return void t(e);
                                var r = f.validateHideMessagesFromBlockedUsers(s);
                                if (r instanceof g.CometChatException) return void t(r);
                                s && (i = 1), _.makeApiCall("getUserMessages", {listId: o}, {
                                    hideMessagesFromBlockedUsers: i,
                                    unread: 1,
                                    count: 1,
                                    uid: o
                                }).then(function (e) {
                                    var t = {};
                                    e.data.map(function (e) {
                                        t[e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_Id]] = e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.COUNT]
                                    }), n(p({}, t))
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.getUnreadMessageCountForGroup = function (o, s) {
                        void 0 === s && (s = !1);
                        var i = 0;
                        return new Promise(function (n, t) {
                            try {
                                var e = f.validateId(o);
                                if (e instanceof g.CometChatException) return void t(e);
                                var r = f.validateHideMessagesFromBlockedUsers(s);
                                if (r instanceof g.CometChatException) return void t(r);
                                s && (i = 1), _.makeApiCall("getGroupMessages", {listId: o}, {
                                    hideMessagesFromBlockedUsers: i,
                                    unread: 1,
                                    count: 1,
                                    guid: o
                                }).then(function (e) {
                                    var t = {};
                                    e.data.map(function (e) {
                                        e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_TYPE] == m.MessageConstatnts.RECEIVER_TYPE.GROUP && (t[e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_Id]] = e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.COUNT])
                                    }), n(p({}, t))
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.getUndeliveredMessageCount = function (n) {
                        void 0 === n && (n = !1);
                        var o = 0;
                        return new Promise(function (r, t) {
                            try {
                                var e = f.validateHideMessagesFromBlockedUsers(n);
                                if (e instanceof g.CometChatException) return void t(e);
                                n && (o = 1), _.makeApiCall("getMessages", {}, {
                                    hideMessagesFromBlockedUsers: o,
                                    undelivered: 1,
                                    count: 1
                                }).then(function (e) {
                                    var t = {}, n = {};
                                    e.data.map(function (e) {
                                        e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_TYPE] == m.MessageConstatnts.RECEIVER_TYPE.GROUP ? n[e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_Id]] = e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.COUNT] : t[e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_Id]] = e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.COUNT]
                                    }), r({users: t, groups: n})
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.getUndeliveredMessageCountForAllUsers = function (r) {
                        void 0 === r && (r = !1);
                        var o = 0;
                        return new Promise(function (n, t) {
                            try {
                                var e = f.validateHideMessagesFromBlockedUsers(r);
                                if (e instanceof g.CometChatException) return void t(e);
                                r && (o = 1), _.makeApiCall("getMessages", {}, {
                                    hideMessagesFromBlockedUsers: o,
                                    unread: 1,
                                    count: 1
                                }).then(function (e) {
                                    var t = {};
                                    e.data.map(function (e) {
                                        t[e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_Id]] = e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.COUNT]
                                    }), n(p({}, t))
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.getUndeliveredMessageCountForAllGroups = function (r) {
                        void 0 === r && (r = !1);
                        var o = 0;
                        return new Promise(function (n, t) {
                            try {
                                var e = f.validateHideMessagesFromBlockedUsers(r);
                                if (e instanceof g.CometChatException) return void t(e);
                                r && (o = 1), _.makeApiCall("getMessages", {}, {
                                    hideMessagesFromBlockedUsers: o,
                                    unread: 1,
                                    count: 1
                                }).then(function (e) {
                                    var t = {};
                                    e.data.map(function (e) {
                                        t[e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_Id]] = e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.COUNT]
                                    }), n(p({}, t))
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.getUndeliveredMessageCountForUser = function (o, s) {
                        void 0 === s && (s = !1);
                        var i = 0;
                        return new Promise(function (n, t) {
                            try {
                                var e = f.validateId(o);
                                if (e instanceof g.CometChatException) return void t(e);
                                var r = f.validateHideMessagesFromBlockedUsers(s);
                                if (r instanceof g.CometChatException) return void t(r);
                                s && (i = 1), _.makeApiCall("getUserMessages", {listId: o}, {
                                    hideMessagesFromBlockedUsers: i,
                                    undelivered: 1,
                                    count: 1,
                                    uid: o
                                }).then(function (e) {
                                    var t = {};
                                    e.data.map(function (e) {
                                        t[e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_Id]] = e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.COUNT]
                                    }), n(p({}, t))
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.getUndeliveredMessageCountForGroup = function (o, s) {
                        void 0 === s && (s = !1);
                        var i = 0;
                        return new Promise(function (n, t) {
                            try {
                                var e = f.validateId(o);
                                if (e instanceof g.CometChatException) return void t(e);
                                var r = f.validateHideMessagesFromBlockedUsers(s);
                                if (r instanceof g.CometChatException) return void t(r);
                                s && (i = 1), _.makeApiCall("getGroupMessages", {listId: o}, {
                                    hideMessagesFromBlockedUsers: i,
                                    undelivered: 1,
                                    count: 1,
                                    uid: o
                                }).then(function (e) {
                                    var t = {};
                                    e.data.map(function (e) {
                                        t[e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.ENTITY_Id]] = e[m.ResponseConstants.RESPONSE_KEYS.UNREAD_UNDELIVERED_KEYS.COUNT]
                                    }), n(p({}, t))
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.editMessage = function (r) {
                        return new Promise(function (t, n) {
                            try {
                                var e = f.validateMsgId(r.getId());
                                if (e instanceof g.CometChatException) return void n(e);
                                _.makeApiCall("updateMessage", {messageId: r.getId()}, r).then(function (e) {
                                    t(S.MessageController.trasformJSONMessge(e.data).getActionOn())
                                }, function (e) {
                                    n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.deleteMessage = function (r) {
                        return new Promise(function (t, n) {
                            try {
                                var e = f.validateMsgId(r);
                                if (e instanceof g.CometChatException) return void n(e);
                                _.makeApiCall("deleteMessage", {messageId: r}, {id: r}).then(function (e) {
                                    t(S.MessageController.trasformJSONMessge(e.data).getActionOn())
                                }, function (e) {
                                    n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.getPreviousMessagesByTimestamp = function (e, r) {
                        return new Promise(function (t, n) {
                            try {
                                f.isFalsy(r) ? n(new g.CometChatException(JSON.parse(f.format(JSON.stringify(m.PARAMETER_ERROR.PARAMETER_REQUIRED), "TIMESTAMP", "TIMESTAMP", "timestamp")))) : S.MessageController.getAllMessage(e, r, m.MessageConstatnts.PAGINATION.CURSOR_FILEDS.SENT_AT, m.MessageConstatnts.PAGINATION.AFFIX.PREPEND).then(function (e) {
                                    return t(e)
                                }, function (e) {
                                    return n(new g.CometChatException(e))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.getPreviousMessagesById = function (e, r) {
                        return new Promise(function (t, n) {
                            try {
                                f.isFalsy(r) ? n(new g.CometChatException(JSON.parse(f.format(JSON.stringify(m.PARAMETER_ERROR.PARAMETER_REQUIRED), "ID", "ID", "id")))) : S.MessageController.getAllMessage(e, r, m.MessageConstatnts.PAGINATION.CURSOR_FILEDS.ID, m.MessageConstatnts.PAGINATION.AFFIX.PREPEND).then(function (e) {
                                    return t(e)
                                }, function (e) {
                                    return n(new g.CometChatException(e))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.getNextMessagesByTimestamp = function (e, r) {
                        return new Promise(function (t, n) {
                            try {
                                f.isFalsy(r) ? n(new g.CometChatException(JSON.parse(f.format(JSON.stringify(m.PARAMETER_ERROR.PARAMETER_REQUIRED), "TIMESTAMP", "TIMESTAMP", "timestamp")))) : S.MessageController.getAllMessage(e, r, m.MessageConstatnts.PAGINATION.CURSOR_FILEDS.SENT_AT, m.MessageConstatnts.PAGINATION.AFFIX.APPEND).then(function (e) {
                                    return t(e)
                                }, function (e) {
                                    return n(new g.CometChatException(e))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.getNextMessagesById = function (e, r) {
                        return new Promise(function (t, n) {
                            try {
                                f.isFalsy(r) ? n(new g.CometChatException(JSON.parse(f.format(JSON.stringify(m.PARAMETER_ERROR.PARAMETER_REQUIRED), "ID", "ID", "id")))) : S.MessageController.getAllMessage(e, r, m.MessageConstatnts.PAGINATION.CURSOR_FILEDS.ID, m.MessageConstatnts.PAGINATION.AFFIX.APPEND).then(function (e) {
                                    return t(e)
                                }, function (e) {
                                    return n(new g.CometChatException(e))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.createUser = function (o, s) {
                        return new Promise(function (n, t) {
                            try {
                                if (f.isFalsy(s)) return void t(new g.CometChatException(JSON.parse(f.format(JSON.stringify(m.GENERAL_ERROR.INVALID), "API_KEY", "API_KEY", "API_KEY"))));
                                h.apiKey = s;
                                var e = f.validateCreateUser(o);
                                if (e instanceof g.CometChatException) return void t(e);
                                if (!(o instanceof d.User)) {
                                    var r = void 0;
                                    if (!o.hasOwnProperty(m.UserConstants.UID)) return void t(new g.CometChatException(y.ERRORS.PARAMETER_MISSING));
                                    if (!o.hasOwnProperty(m.UserConstants.NAME)) return void t(new g.CometChatException(y.ERRORS.PARAMETER_MISSING));
                                    r = new d.User(o[m.UserConstants.UID], o[m.UserConstants.NAME]), o.hasOwnProperty(m.UserConstants.AVATAR) && r.setAvatar(o[m.UserConstants.AVATAR]), o.hasOwnProperty(m.UserConstants.ROLE) && r.setRole(o[m.UserConstants.ROLE]), o.hasOwnProperty(m.UserConstants.META_DATA) && r.setMetadata(o[m.UserConstants.META_DATA]), o.hasOwnProperty(m.UserConstants.LINK) && r.setLink(o[m.UserConstants.LINK]), o.hasOwnProperty(m.UserConstants.CREDITS) && r.setCredits(o[m.UserConstants.CREDITS]), o.hasOwnProperty(m.UserConstants.STATUS_MESSAGE) && r.setStatusMessage(o[m.UserConstants.STATUS_MESSAGE]), o = r
                                }
                                _.makeApiCall("createUser", {}, o).then(function (e) {
                                    var t = T.UsersController.trasformJSONUser(e.data);
                                    n(t)
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.updateUser = function (s, i) {
                        return new Promise(function (n, t) {
                            try {
                                if (f.isFalsy(i)) return void t(new g.CometChatException(JSON.parse(f.format(JSON.stringify(m.GENERAL_ERROR.INVALID), "API_KEY", "API_KEY", "API_KEY"))));
                                h.apiKey = i;
                                var e = f.validateUpdateUser(s);
                                if (e instanceof g.CometChatException) return void t(e);
                                if (!(s instanceof d.User)) {
                                    var r = void 0;
                                    if (!s.hasOwnProperty(m.UserConstants.UID)) return void t(new g.CometChatException(y.ERRORS.PARAMETER_MISSING));
                                    r = new d.User(s[m.UserConstants.UID]), s.hasOwnProperty(m.UserConstants.NAME) && r.setName(s[m.UserConstants.NAME]), s.hasOwnProperty(m.UserConstants.AVATAR) && r.setAvatar(s[m.UserConstants.AVATAR]), s.hasOwnProperty(m.UserConstants.ROLE) && r.setRole(s[m.UserConstants.ROLE]), s.hasOwnProperty(m.UserConstants.META_DATA) && r.setMetadata(s[m.UserConstants.META_DATA]), s.hasOwnProperty(m.UserConstants.LINK) && r.setLink(s[m.UserConstants.LINK]), s.hasOwnProperty(m.UserConstants.CREDITS) && r.setCredits(s[m.UserConstants.CREDITS]), s.hasOwnProperty(m.UserConstants.STATUS_MESSAGE) && r.setStatusMessage(s[m.UserConstants.STATUS_MESSAGE]), s = r
                                }
                                var o = s.uid;
                                _.makeApiCall("updateUser", {uid: o}, s).then(function (e) {
                                    var t = T.UsersController.trasformJSONUser(e.data);
                                    n(t)
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.getUser = function (r) {
                        return new Promise(function (n, t) {
                            try {
                                "object" == typeof r && r.hasOwnProperty("uid") && (r = r.uid);
                                var e = f.validateId(r);
                                if (e instanceof g.CometChatException) return void t(e);
                                _.makeApiCall("user", {uid: r}).then(function (e) {
                                    var t = T.UsersController.trasformJSONUser(e.data);
                                    n(t)
                                }).catch(function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.getLoggedInUser = function () {
                        var l = this;
                        return new Promise(function (c, u) {
                            try {
                                h.localStorage.get("user").then(function (e) {
                                    if (e) c(h.user = new d.Me(e)); else {
                                        var r = "", o = "", s = m.APPINFO.platform, i = m.APPINFO.sdkVersion,
                                            a = m.APPINFO.apiVersion;
                                        h.keyStore.get("deviceId").then(function (e) {
                                            if (o = e, navigator && (r = navigator.userAgent), null == o) {
                                                var t = l.appId.substr(0, l.appId.length - 10) + "_" + V() + "_" + (new Date).getTime();
                                                o = f.SHA1(t), h.keyStore.set("deviceId", o)
                                            }
                                            var n = {
                                                platform: s,
                                                userAgent: r,
                                                deviceId: o,
                                                appInfo: {version: i, apiVersion: a}
                                            };
                                            _.makeApiCall("updateMyDetails", {}, n, !1).then(function (e) {
                                                c(new d.Me(e.data))
                                            }, function (e) {
                                                u(new g.CometChatException(e.error))
                                            }).catch(function (e) {
                                                u(new g.CometChatException(e))
                                            })
                                        })
                                    }
                                })
                            } catch (e) {
                                u(new g.CometChatException(e))
                            }
                        })
                    }, h.getLoggedinUser = function () {
                        return new Promise(function (t, n) {
                            try {
                                h.localStorage.get("user").then(function (e) {
                                    t(e ? h.user = new d.Me(e) : null)
                                }, function (e) {
                                    t(null)
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.blockUsers = function (r) {
                        return new Promise(function (t, n) {
                            try {
                                var e = f.validateArray(r);
                                if (e instanceof g.CometChatException) return void n(e);
                                f.isFalsy(r) ? n(new g.CometChatException(y.USERS_REQUEST_ERRORS.EMPTY_USERS_LIST)) : _.makeApiCall("blockUsers", {}, {blockedUids: r}).then(function (e) {
                                    t(e.data)
                                }, function (e) {
                                    n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.unblockUsers = function (r) {
                        return new Promise(function (t, n) {
                            try {
                                var e = f.validateArray(r);
                                if (e instanceof g.CometChatException) return void n(e);
                                f.isFalsy(r) ? n(new g.CometChatException(y.USERS_REQUEST_ERRORS.EMPTY_USERS_LIST)) : _.makeApiCall("unblockUsers", {}, {blockedUids: r}).then(function (e) {
                                    t(e.data)
                                }, function (e) {
                                    n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.createGroup = function (o) {
                        return new Promise(function (t, n) {
                            try {
                                var e = f.validateCreateGroup(o);
                                if (e instanceof g.CometChatException) return void n(e);
                                if (!(o instanceof A.Group)) {
                                    var r = void 0;
                                    if (!o.hasOwnProperty(m.GroupConstants.KEYS.GUID)) return void n(new g.CometChatException(y.ERRORS.PARAMETER_MISSING));
                                    if (!o.hasOwnProperty(m.GroupConstants.KEYS.NAME)) return void n(new g.CometChatException(y.ERRORS.PARAMETER_MISSING));
                                    if (r = new A.Group(o[m.GroupConstants.KEYS.GUID], o[m.GroupConstants.KEYS.NAME], ""), o.hasOwnProperty(m.GroupConstants.KEYS.TYPE)) if (o[m.GroupConstants.KEYS.TYPE].toLocaleLowerCase() == m.GroupType.Password) {
                                        if (!o.hasOwnProperty(m.GroupConstants.KEYS.PASSWORD)) return void n(new g.CometChatException(y.GROUP_CREATION_ERRORS.EMPTY_PASSWORD));
                                        r.setType(m.GROUP_TYPE.PASSWORD), r.setPassword(o[m.GroupConstants.KEYS.PASSWORD])
                                    } else r.setType(o[m.GroupConstants.KEYS.TYPE]); else r.setType(m.GROUP_TYPE.PUBLIC);
                                    o.hasOwnProperty(m.GroupConstants.KEYS.ICON) && r.setIcon(o[m.GroupConstants.KEYS.ICON]), o.hasOwnProperty(m.GroupConstants.KEYS.DESCRIPTION) && r.setDescription(o[m.GroupConstants.KEYS.DESCRIPTION]), o = r
                                }
                                _.makeApiCall("createGroup", {}, o).then(function (e) {
                                    j.joinMuc(o), I.GroupsController.trasformJSONGroup(e.data).setHasJoined(!0), t(I.GroupsController.trasformJSONGroup(e.data))
                                }, function (e) {
                                    n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.getGroup = function (r) {
                        return new Promise(function (t, n) {
                            try {
                                "object" == typeof r && r.hasOwnProperty("guid") && (r = r.guid);
                                var e = f.validateId(r);
                                if (e instanceof g.CometChatException) return void n(e);
                                _.makeApiCall("getGroup", {guid: r}).then(function (e) {
                                    t(I.GroupsController.trasformJSONGroup(e.data))
                                }, function (e) {
                                    n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.getJoinedGroups = function () {
                        return new Promise(function (t, n) {
                            try {
                                j.getRooms().then(function (e) {
                                    t(e)
                                }, function (e) {
                                    n(e)
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.joinGroup = function (o, s, i) {
                        return void 0 === s && (s = m.GroupType.Public), void 0 === i && (i = ""), new Promise(function (n, t) {
                            try {
                                var r, e = f.validateJoinGroup(o, s, i);
                                if (e instanceof g.CometChatException) return void t(e);
                                "object" == typeof o && (o.hasOwnProperty(m.GroupConstants.KEYS.GUID) ? (o.hasOwnProperty(m.GroupConstants.KEYS.TYPE) && (s = o[m.GroupConstants.KEYS.TYPE], o[m.GroupConstants.KEYS.TYPE].toLocaleLowerCase() === m.GroupType.Password && o.hasOwnProperty(m.GroupConstants.KEYS.PASSWORD) && (i = o[m.GroupConstants.KEYS.PASSWORD])), o = o[m.GroupConstants.KEYS.GUID]) : t(new g.CometChatException(y.ERRORS.PARAMETER_MISSING))), r = f.isFalsy(i) ? new A.Group(o, "name", s) : new A.Group(o, "name", s, i), _.makeApiCall("joinGroup", r, r).then(function (e) {
                                    j.joinMuc(r);
                                    var t = I.GroupsController.trasformJSONGroup(e.data[m.ResponseConstants.RESPONSE_KEYS.KEY_DATA][m.ActionConstatnts.ACTION_KEYS.ENTITIES][m.ActionConstatnts.ACTION_SUBJECTS.ACTION_FOR][m.ActionConstatnts.ACTION_KEYS.ENTITY]);
                                    t.setHasJoined(!0), n(t)
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.updateGroup = function (o) {
                        return new Promise(function (t, n) {
                            try {
                                var e = f.validateUpdateGroup(o);
                                if (e instanceof g.CometChatException) return void n(e);
                                if (!(o instanceof A.Group)) {
                                    var r = void 0;
                                    if (!o.hasOwnProperty(m.GroupConstants.KEYS.GUID)) return void n(new g.CometChatException(y.ERRORS.PARAMETER_MISSING));
                                    r = new A.Group(m.GroupConstants.KEYS.GUID, "", ""), o.hasOwnProperty(m.GroupConstants.KEYS.TYPE) ? r.setType(o[m.GroupConstants.KEYS.TYPE]) : (o[m.GroupConstants.KEYS.TYPE] = m.GROUP_TYPE.PUBLIC, r.setType[m.GROUP_TYPE.PUBLIC]), o.hasOwnProperty(m.GroupConstants.KEYS.NAME) && r.setName(o[m.GroupConstants.KEYS.NAME]), o.hasOwnProperty(m.GroupConstants.KEYS.ICON) && r.setIcon(o[m.GroupConstants.KEYS.ICON]), o.hasOwnProperty(m.GroupConstants.KEYS.DESCRIPTION) && r.setDescription(o[m.GroupConstants.KEYS.DESCRIPTION]), o = r
                                }
                                _.makeApiCall("updateGroup", o, o).then(function (e) {
                                    t(I.GroupsController.trasformJSONGroup(e.data))
                                }, function (e) {
                                    n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.deleteGroup = function (r) {
                        return new Promise(function (t, n) {
                            try {
                                var e = f.validateId(r);
                                if (e instanceof g.CometChatException) return void n(e);
                                _.makeApiCall("deleteGroup", {guid: r}).then(function (e) {
                                    t(!0)
                                }, function (e) {
                                    n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.leaveGroup = function (r) {
                        return new Promise(function (t, n) {
                            try {
                                var e = f.validateId(r);
                                if (e instanceof g.CometChatException) return void n(e);
                                _.makeApiCall("leaveGroup", {guid: r}).then(function (e) {
                                    j.leaveMuc(r), t(!0)
                                }, function (e) {
                                    n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.kickGroupMember = function (o, s) {
                        return new Promise(function (t, n) {
                            try {
                                var e = f.validateId(o);
                                if (e instanceof g.CometChatException) return void n(e);
                                var r = f.validateId(s);
                                if (r instanceof g.CometChatException) return void n(r);
                                _.makeApiCall("kickGroupMembers", {guid: o, uid: s}).then(function (e) {
                                    t(!0)
                                }, function (e) {
                                    n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.updateGroupMemberScope = function (s, i, a) {
                        return new Promise(function (t, n) {
                            try {
                                var e = f.validateId(s);
                                if (e instanceof g.CometChatException) return void n(e);
                                var r = f.validateId(i);
                                if (r instanceof g.CometChatException) return void n(r);
                                var o = f.validateScope(a);
                                if (o instanceof g.CometChatException) return void n(o);
                                _.makeApiCall("changeScopeOfMember", {guid: s, uid: i}, {scope: a}).then(function (e) {
                                    t(!0)
                                }, function (e) {
                                    n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.banGroupMember = function (o, s) {
                        return new Promise(function (t, n) {
                            try {
                                var e = f.validateId(o);
                                if (e instanceof g.CometChatException) return void n(e);
                                var r = f.validateId(s);
                                if (r instanceof g.CometChatException) return void n(r);
                                _.makeApiCall("banGroupMember", {guid: o, uid: s}).then(function (e) {
                                    t(!0)
                                }, function (e) {
                                    n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.unbanGroupMember = function (o, s) {
                        return new Promise(function (t, n) {
                            try {
                                var e = f.validateId(o);
                                if (e instanceof g.CometChatException) return void n(e);
                                var r = f.validateId(s);
                                if (r instanceof g.CometChatException) return void n(r);
                                _.makeApiCall("unbanGroupMember", {guid: o, uid: s}).then(function (e) {
                                    t(!0)
                                }, function (e) {
                                    n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.addMembersToGroup = function (i, a, c) {
                        var u = [], l = [], d = [], E = [];
                        return new Promise(function (e, t) {
                            try {
                                var n = f.validateId(i);
                                if (n instanceof g.CometChatException) return void t(n);
                                var r = f.validateArray(a);
                                if (r instanceof g.CometChatException) return void t(r);
                                var o = f.validateArray(c);
                                if (o instanceof g.CometChatException) return void t(o);
                                f.isFalsy(a) && f.isFalsy(c) ? t(new g.CometChatException({})) : f.isFalsy(a) || f.isFalsy(c) ? f.isFalsy(a) ? c.map(function (e) {
                                    E.push(e)
                                }) : (a.filter(function (e) {
                                    if (e.getScope() == m.GROUP_MEMBER_SCOPE.ADMIN) return !0
                                }).map(function (e) {
                                    u.push(e.getUid())
                                }), a.filter(function (e) {
                                    if (e.getScope() == m.GROUP_MEMBER_SCOPE.MODERATOR) return !0
                                }).map(function (e) {
                                    l.push(e.getUid())
                                }), a.filter(function (e) {
                                    if (e.getScope() == m.GROUP_MEMBER_SCOPE.PARTICIPANT) return !0
                                }).map(function (e) {
                                    d.push(e.getUid())
                                })) : (a.filter(function (e) {
                                    if (e.getScope() == m.GROUP_MEMBER_SCOPE.ADMIN) return !0
                                }).map(function (e) {
                                    u.push(e.getUid())
                                }), a.filter(function (e) {
                                    if (e.getScope() == m.GROUP_MEMBER_SCOPE.MODERATOR) return !0
                                }).map(function (e) {
                                    l.push(e.getUid())
                                }), a.filter(function (e) {
                                    if (e.getScope() == m.GROUP_MEMBER_SCOPE.PARTICIPANT) return !0
                                }).map(function (e) {
                                    d.push(e.getUid())
                                }), c.map(function (e) {
                                    E.push(e)
                                }));
                                var s = {};
                                f.isFalsy(u) || (s = p({}, s, {admins: u})), f.isFalsy(d) || (s = p({}, s, {participants: d})), f.isFalsy(l) || (s = p({}, s, {moderators: l})), f.isFalsy(E) || (s = p({}, s, {usersToBan: E})), _.makeApiCall("addMemebersToGroup", {guid: i}, s).then(function (t) {
                                    var n = {};
                                    Object.keys(t.data.admins).map(function (e) {
                                        t.data.admins[e][m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.SUCCESS] ? n[e] = m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.SUCCESS : n[e] = t.data.admins[e][m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.ERROR][m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.MESSAGE]
                                    }), Object.keys(t.data.participants).map(function (e) {
                                        t.data.participants[e][m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.SUCCESS] ? n[e] = m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.SUCCESS : n[e] = t.data.participants[e][m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.ERROR][m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.MESSAGE]
                                    }), Object.keys(t.data.moderators).map(function (e) {
                                        t.data.moderators[e][m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.SUCCESS] ? n[e] = m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.SUCCESS : n[e] = t.data.moderators[e][m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.ERROR][m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.MESSAGE]
                                    }), Object.keys(t.data.usersToBan).map(function (e) {
                                        t.data.usersToBan[e][m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.SUCCESS] ? n[e] = m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.SUCCESS : n[e] = t.data.usersToBan[e][m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.ERROR][m.ResponseConstants.RESPONSE_KEYS.GROUP_MEMBERS_RESPONSE.MESSAGE]
                                    }), e(n)
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.initiateCall = function (t) {
                        var e = this;
                        return new Promise(function (n, r) {
                            if (null === e.getActiveCall()) try {
                                f.isFalsy(JSON.parse(JSON.stringify(t)).sender) ? f.isFalsy(e.getActiveCall()) ? (t.setStatus(m.CallConstants.CALL_STATUS.INITIATED), t.receiver = t.receiverId.toString(), delete t.receiverId, _.makeApiCall("createCallSession", {}, t).then(function (e) {
                                    var t = S.MessageController.trasformJSONMessge(e[m.ResponseConstants.RESPONSE_KEYS.KEY_DATA]);
                                    R.CallController.getInstance().initiateCall(t).then(function (e) {
                                        n(t)
                                    }).catch(function (e) {
                                        r(new g.CometChatException(e))
                                    })
                                }, function (e) {
                                    r(new g.CometChatException(e.error))
                                })) : r(new g.CometChatException(m.CALL_ERROR.ERROR_IN_CALLING)) : R.CallController.getInstance().initiateCall(t).then(function (e) {
                                    n(Object.assign(t))
                                }).catch(function (e) {
                                    r(new g.CometChatException(e))
                                })
                            } catch (e) {
                                r(new g.CometChatException(e))
                            } else r(new g.CometChatException(m.CALL_ERROR.CALL_ALREADY_INITIATED))
                        })
                    }, h.acceptCall = function (r) {
                        var o = this;
                        return new Promise(function (n, t) {
                            if (null === o.getActiveCall()) try {
                                var e = {};
                                e[m.CallConstants.CALL_KEYS.CALL_STATUS] = m.CallConstants.CALL_STATUS.ONGOING, _.makeApiCall("updateCallSession", {sessionid: r}, e).then(function (e) {
                                    var t = S.MessageController.trasformJSONMessge(e[m.ResponseConstants.RESPONSE_KEYS.KEY_DATA]);
                                    R.CallController.getInstance().onCallStarted(t), n(t)
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            } else t(new g.CometChatException(m.CALL_ERROR.CANNOT_ACCEPT_CALL))
                        })
                    }, h.rejectCall = function (e, t) {
                        try {
                            switch (t) {
                                case m.CallConstants.CALL_STATUS.REJECTED:
                                    return this.rejectIncomingCall(e);
                                case m.CallConstants.CALL_STATUS.CANCELLED:
                                    return this.cancelCall(e);
                                case m.CallConstants.CALL_STATUS.BUSY:
                                    return this.sendBusyResponse(e);
                                default:
                                    return this.endCall(e)
                            }
                        } catch (e) {
                            f.Logger.error("CometChat: rejectCall", e)
                        }
                    }, h.endCall = function (o) {
                        var s = this;
                        return new Promise(function (n, t) {
                            var e = s.getActiveCall();
                            if (null !== e && e.getSessionId() === o) try {
                                var r = {};
                                r[m.CallConstants.CALL_KEYS.CALL_STATUS] = m.CallConstants.CALL_STATUS.ENDED, R.CallController.getInstance().getActiveCall().getJoinedAt() && (r[m.CallConstants.CALL_KEYS.CALL_JOINED_AT] = R.CallController.getInstance().getActiveCall().getJoinedAt()), _.makeApiCall("updateCallSession", {sessionid: o}, r).then(function (e) {
                                    var t = S.MessageController.trasformJSONMessge(e[m.ResponseConstants.RESPONSE_KEYS.KEY_DATA]);
                                    n(t), R.CallController.getInstance().endCall()
                                }, function (e) {
                                    f.Logger.log("calling Log", {error: e});
                                    var t = s.getActiveCall();
                                    t.setStatus(m.CallConstants.CALL_STATUS.ENDED), n(t), R.CallController.getInstance().endCall()
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.getActiveCall = function () {
                        try {
                            return R.CallController.getInstance().getActiveCall()
                        } catch (e) {
                            f.Logger.error("CometChat: getActiveCall", e)
                        }
                    }, h.startCall = function (e, t, n, r) {
                        try {
                            R.CallController.getInstance().startCall(t, n, r)
                        } catch (e) {
                            f.Logger.error("CometChat: startCall", e)
                        }
                    }, h.toggleAudio = function () {
                        try {
                            R.CallController.toggleAudio()
                        } catch (e) {
                            f.Logger.error("CometChat: toggleAudio", e)
                        }
                    }, h.toggleVideo = function () {
                        try {
                            R.CallController.toggleVideo()
                        } catch (e) {
                            f.Logger.error("CometChat: toggleVideo", e)
                        }
                    }, h.leaveCall = function () {
                        try {
                            R.CallController.leave()
                        } catch (e) {
                            f.Logger.error("CometChat: leaveCall", e)
                        }
                    }, h.createCallView = function (e) {
                        var t = this;
                        try {
                            return {
                                prop1: this.makeCall, onMessage: function (e) {
                                    R.CallController.getInstance().getCallListner()._eventListener.onCallEnded(t.getActiveCall()), h.endCall(t.getActiveCall().getSessionId()).then(function (e) {
                                        f.Logger.info("CometChat: createCallView", e)
                                    }).catch(function (e) {
                                        f.Logger.error("CometChat: createCallView", e)
                                    })
                                }
                            }
                        } catch (e) {
                            f.Logger.error("CometChat: createCallView", e)
                        }
                    }, h.makeCall = function (e, t) {
                        try {
                            e.setState(function (e) {
                                return p({}, e, {uri: t})
                            })
                        } catch (e) {
                            f.Logger.error("CometChat: makeCall", e)
                        }
                    }, h.rejectIncomingCall = function (r) {
                        return new Promise(function (n, t) {
                            try {
                                var e = {};
                                e[m.CallConstants.CALL_KEYS.CALL_STATUS] = m.CallConstants.CALL_STATUS.REJECTED, _.makeApiCall("updateCallSession", {sessionid: r}, e).then(function (e) {
                                    var t = S.MessageController.trasformJSONMessge(e[m.ResponseConstants.RESPONSE_KEYS.KEY_DATA]);
                                    n(t)
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.cancelCall = function (r) {
                        var o = this;
                        return new Promise(function (n, t) {
                            try {
                                var e = {};
                                e[m.CallConstants.CALL_KEYS.CALL_STATUS] = m.CallConstants.CALL_STATUS.CANCELLED, _.makeApiCall("updateCallSession", {sessionid: r}, e).then(function (e) {
                                    var t = S.MessageController.trasformJSONMessge(e[m.ResponseConstants.RESPONSE_KEYS.KEY_DATA]);
                                    o.getActiveCall().getSessionId() === r && R.CallController.getInstance().endCallSession(), n(t)
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.sendBusyResponse = function (r) {
                        return new Promise(function (n, t) {
                            try {
                                var e = {};
                                e[m.CallConstants.CALL_KEYS.CALL_STATUS] = m.CallConstants.CALL_STATUS.BUSY, _.makeApiCall("updateCallSession", {sessionid: r}, e).then(function (e) {
                                    var t = S.MessageController.trasformJSONMessge(e[m.ResponseConstants.RESPONSE_KEYS.KEY_DATA]);
                                    n(t)
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.sendUnansweredResponse = function (r) {
                        return new Promise(function (n, t) {
                            try {
                                var e = {};
                                e[m.CallConstants.CALL_KEYS.CALL_STATUS] = m.CallConstants.CALL_STATUS.UNANSWERED, _.makeApiCall("updateCallSession", {sessionid: r}, e).then(function (e) {
                                    var t = S.MessageController.trasformJSONMessge(e[m.ResponseConstants.RESPONSE_KEYS.KEY_DATA]);
                                    a.XMPPConnectionHelper.getInstance().trigerMessageHandler(Object.assign(t, e[m.ResponseConstants.RESPONSE_KEYS.KEY_DATA])), n(t)
                                }, function (e) {
                                    t(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                t(new g.CometChatException(e))
                            }
                        })
                    }, h.addMessageListener = function (e, t) {
                        try {
                            j.addMessageEventListener(e, t)
                        } catch (e) {
                            f.Logger.error("CometChat: addMessageListener", e)
                        }
                    }, h.removeMessageListener = function (e) {
                        try {
                            j.removeMessageEventListener(e)
                        } catch (e) {
                            f.Logger.error("CometChat: removeMessageListener", e)
                        }
                    }, h.addCallListener = function (e, t) {
                        try {
                            j.addCallEventListener(e, t)
                        } catch (e) {
                            f.Logger.error("CometChat: addCallListener", e)
                        }
                    }, h.removeCallListener = function (e) {
                        try {
                            j.removeCallEventListener(e)
                        } catch (e) {
                            f.Logger.error("CometChat: removeCallListener", e)
                        }
                    }, h.addUserListener = function (e, t) {
                        try {
                            j.addUserEventListener(e, t)
                        } catch (e) {
                            f.Logger.error("CometChat: addUserListener", e)
                        }
                    }, h.removeUserListener = function (e) {
                        try {
                            j.removeUserEventListener(e)
                        } catch (e) {
                            f.Logger.error("CometChat: removeUserListener", e)
                        }
                    }, h.addGroupListener = function (e, t) {
                        try {
                            j.addGroupEventListener(e, t)
                        } catch (e) {
                            f.Logger.error("CometChat: addGroupListener", e)
                        }
                    }, h.removeGroupListener = function (e) {
                        try {
                            j.removeGroupEventListener(e)
                        } catch (e) {
                            f.Logger.error("CometChat: removeGroupListener", e)
                        }
                    }, h.generateAuthToken = function (l) {
                        var d = this;
                        return new Promise(function (n, r) {
                            try {
                                var o = {}, s = "", i = "", a = m.APPINFO.platform, c = m.APPINFO.sdkVersion,
                                    u = m.APPINFO.apiVersion;
                                navigator && (i = navigator.userAgent), h.keyStore.get("deviceId").then(function (e) {
                                    if (null == (s = e)) {
                                        var t = d.appId.substr(0, d.appId.length - 10) + "_" + V() + "_" + (new Date).getTime();
                                        s = f.SHA1(t), h.keyStore.set("deviceId", s)
                                    }
                                    o = {
                                        platform: a,
                                        userAgent: i,
                                        deviceId: s,
                                        appInfo: {version: c, apiVersion: u}
                                    }, _.makeApiCall("authToken", {uid: l}, o).then(function (e) {
                                        n(e.data)
                                    }).catch(function (e) {
                                        r(new g.CometChatException(e.error))
                                    })
                                }, function (e) {
                                    f.Logger.error("Got error while fetching data from key store", e)
                                })
                            } catch (e) {
                                r(new g.CometChatException(e))
                            }
                        })
                    }, h.XMPPLogin = function (t, n, r) {
                        var o = this;
                        try {
                            var s = !1;
                            this.timeOut + this.timeIncrements < 3e4 && (this.timeOut = this.timeOut + this.timeIncrements, this.timeIncrements = this.timeIncrements + 2e3);
                            var i = !0;
                            j.XMMPLogin(t.getUid(), t.getWsChannel().secret, this.fallback, function (e) {
                                switch (e) {
                                    case c.Strophe.Status.CONNFAIL:
                                        f.Logger.info("CometChat: XMPPLogin", "In connection fail state"), s = !0, i && setTimeout(function () {
                                            o.fallback = !o.fallback, o.XMPPLogin(t, n, r)
                                        }, o.timeOut);
                                        break;
                                    case c.Strophe.Status.CONNECTING:
                                        f.Logger.info("CometChat: XMPPLogin", "In connecting state");
                                        break;
                                    case c.Strophe.Status.CONNECTED:
                                        f.Logger.info("CometChat: XMPPLogin", "In connected state"), o.timeOut = 0, o.timeIncrements = 1e3, s = !1, o.localStorage.set("user", t), n(new d.User(t));
                                        break;
                                    case c.Strophe.Status.DISCONNECTED:
                                        f.Logger.info("CometChat: XMPPLogin", "In disconnected state"), i && !s && setTimeout(function () {
                                            o.fallback = !o.fallback, o.XMPPLogin(t, n, r)
                                        }, o.timeOut);
                                        break;
                                    case c.Strophe.Status.DISCONNECTING:
                                        i = !1, f.Logger.info("CometChat: XMPPLogin", "In disconnecting state");
                                        break;
                                    case c.Strophe.Status.AUTHFAIL:
                                        o.timeOut = 0, o.timeIncrements = 1e3, s = !1, r(new g.CometChatException(y.LOGIN_ERROR.XMPP_AUTH_FAIL))
                                }
                            })
                        } catch (e) {
                            return void r(new g.CometChatException(e))
                        }
                    }, h.getAppSettings = function () {
                        return new Promise(function (t, n) {
                            try {
                                _.makeApiCall("appSettings").then(function (e) {
                                    r.LocalStorage.getInstance().set("app_settings", e.data), t(e.data)
                                }, function (e) {
                                    n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.logout = function () {
                        var r = this;
                        return new Promise(function (t, n) {
                            try {
                                _.makeApiCall("userLogout").then(function (e) {
                                    r.clearCache(), r.apiKey = void 0, r.user = void 0, r.authToken = void 0, r.cometChat = void 0, a.XMPPConnectionHelper.getInstance().XMPPDisconnect(), t(e.data)
                                }, function (e) {
                                    r.clearCache(), r.apiKey = void 0, r.user = void 0, r.authToken = void 0, r.cometChat = void 0, a.XMPPConnectionHelper.getInstance().XMPPDisconnect(), new g.CometChatException(e.error).code == y.SERVER_ERRORS.AUTH_ERR.code ? t({}) : n(new g.CometChatException(e.error))
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.isExtensionEnabled = function (r) {
                        return new Promise(function (t, n) {
                            try {
                                F.ExtensionController.getExtensionList().then(function (e) {
                                    Object.keys(e).map(function (e) {
                                        e == r && t(!0)
                                    }), t(!1)
                                }, function (e) {
                                    f.Logger.log("error while fetching exntension list", e), t(!1)
                                })
                            } catch (e) {
                                n(new g.CometChatException(e))
                            }
                        })
                    }, h.clearCache = function () {
                        try {
                            this.messagesStore.clearStore(), this.userStore.clearStore(), this.localStorage.clearStore()
                        } catch (e) {
                            f.Logger.error("CometChat: clearCache", e)
                        }
                    }, h.typingTimer = function () {
                        try {
                            setInterval(function () {
                                b.TypingNotificationController.clearTimer()
                            }, 500)
                        } catch (e) {
                            f.Logger.error("CometChat: typingTimer", e)
                        }
                    }, h.initialzed = !1, h.isNative = !1, h.CometChatException = g.CometChatException, h.TextMessage = C.TextMessage, h.MediaMessage = E.MediaMessage, h.CustomMessage = Y.CustomMessage, h.Action = O.Action, h.Call = N.Call, h.TypingIndicator = w.TypingIndicator, h.Group = A.Group, h.AppUser = d.User, h.User = d.User, h.GroupMember = x.GroupMember, h.Conversation = J.Conversation, h.USER_STATUS = {
                        ONLINE: m.PresenceConstatnts.STATUS.ONLINE,
                        OFFLINE: m.PresenceConstatnts.STATUS.OFFLINE
                    },h.MessagesRequest = U.DefaultMessagesRequest,h.MessagesRequestBuilder = U.DefaultMessagesRequestBuilder,h.UsersRequest = P.UsersRequest,h.UsersRequestBuilder = P.UsersRequestBuilder,h.ConversationsRequest = L.ConversationsRequest,h.ConversationsRequestBuilder = L.ConversationsRequestBuilder,h.BlockedUsersRequest = K.BlockedUsersRequest,h.BlockedUsersRequestBuilder = K.BlockedUsersRequestBuilder,h.GroupsRequest = v.GroupsRequest,h.GroupsRequestBuilder = v.GroupsRequestBuilder,h.GroupMembersRequest = M.GroupMembersRequest,h.GroupMembersRequestBuilder = M.GroupMembersRequestBuilder,h.BannedMembersRequest = M.GroupMembersRequest,h.BannedMembersRequestBuilder = M.GroupOutCastMembersRequestBuilder,h.AppSettings = H.AppSettings,h.AppSettingsBuilder = H.AppSettingsBuilder,h.MessageListener = i.MessageEventListener,h.UserListener = i.UserEventListener,h.GroupListener = i.GroupEventListener,h.OngoingCallListener = i.UserCallEventListener,h.CallListener = i.CallEventListener,h.MESSAGE_TYPE = m.MessageConstatnts.TYPE,h.CATEGORY_MESSAGE = m.MessageConstatnts.CATEGORY.MESSAGE,h.CATEGORY_ACTION = m.MessageConstatnts.CATEGORY.ACTION,h.CATEGORY_CALL = m.MessageConstatnts.CATEGORY.CALL,h.ACTION_TYPE = m.ActionConstatnts.ACTIONS,h.CALL_TYPE = m.CallConstants.CALL_TYPE,h.RECEIVER_TYPE = m.MessageConstatnts.RECEIVER_TYPE,h.CALL_STATUS = m.CallConstants.CALL_STATUS,h.CallController = R.CallController,h.GROUP_MEMBER_SCOPE = m.GROUP_MEMBER_SCOPE,h.GROUP_TYPE = m.GROUP_TYPE,h.MESSAGE_REQUEST = m.MessageConstatnts.PAGINATION.CURSOR_FILEDS,h.CometChatExtension = G.CometChatExtension,h.ExtensionManager = B.ExtensionManager,h.isCall = !1,h.endpointFactory = new e.EndpointFactory,h.startTypingCount = 0,h.endTypingCount = 0,h.CometChatHelper = k.CometChatHelper,h.fallback = !1,h.timeOut = 0,h.timeIncrements = 1e3,h
                }();
            X.CometChat = h
        }).call(this, q(26))
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var c = n(40), u = n(3), i = n(1), l = n(2);

        function d(t, e, n, r, o) {
            var s;
            return void 0 === t && (t = ""), void 0 === e && (e = "GET"), void 0 === n && (n = {}), void 0 === r && (r = {}), n = i.isFalsy(n) ? void 0 : ("GET" == e && (t += "?", Object.keys(n).map(function (e) {
                t = t + e + "=" + n[e] + "&"
            }), n = void 0), o && (s = new FormData, Object.keys(n).map(function (e) {
                "data" != e ? "metadata" != e && s.append(e, n[e]) : s.append(e, JSON.stringify(n[e]))
            })), JSON.stringify(n)), fetch(t, {
                method: e,
                mode: "cors",
                cache: "no-cache",
                headers: r,
                redirect: "follow",
                referrer: "no-referrer",
                body: o ? s : n
            })
        }

        t.makeApiCall = function (o, e, s, i) {
            void 0 === o && (o = ""), void 0 === e && (e = {}), void 0 === s && (s = {});
            var a = u.CometChat.getInstance();
            return new Promise(function (n, r) {
                try {
                    c.getEndPoint(o, e).then(function (e) {
                        var t = {appId: u.CometChat.getAppId(), Accept: "application/json"};
                        i || (t["Content-Type"] = "application/json"), e.hasOwnProperty("isAdminApi") && e.isAdminApi ? a.getApiKey() ? t.apiKey = a.getApiKey() : r({
                            error: {
                                code: "API_KEY_NOT_SET",
                                message: "An apiKey is needed to use the " + o + " api.",
                                name: "API_KEY_NOT_SET"
                            }
                        }) : a.getAuthToken() ? t.authToken = a.getAuthToken() : r({
                            error: {
                                code: "USER_NOT_LOGED_IN",
                                message: "An authToken is need to use the " + o + " api.",
                                name: "user not logged in"
                            }
                        }), d(e.endpoint, e.method, s, t, i).then(function (e) {
                            return e.json()
                        }).then(function (e) {
                            e.hasOwnProperty("data") ? (e.data.hasOwnProperty("authToken") && u.CometChat.setAuthToken(e.data.authToken), n(e)) : r(e)
                        }).catch(function (e) {
                            return r
                        })
                    }).catch(function (e) {
                        return r
                    })
                } catch (e) {
                    r(new l.CometChatException(e))
                }
            })
        }, t.makeAdminApiCall = function (o, e, s, i) {
            void 0 === o && (o = ""), void 0 === e && (e = {}), void 0 === s && (s = {});
            var a = u.CometChat.getInstance();
            return new Promise(function (n, r) {
                c.getEndPoint(o, e).then(function (e) {
                    var t = {appId: u.CometChat.getAppId(), Accept: "application/json"};
                    i || (t["Content-Type"] = "application/json"), e.hasOwnProperty("isAdminApi") && e.isAdminApi ? a.getApiKey() ? t.apiKey = a.getApiKey() : r({error: "An apiKey is need to use the " + o + " api."}) : a.getAuthToken() ? t.authToken = a.getAuthToken() : r({error: "An authToken is need to use the " + o + " api."}), d(e.endpoint, e.method, s, t, i).then(function (e) {
                        return e.json()
                    }).then(function (e) {
                        e.hasOwnProperty("data") ? (e.data.hasOwnProperty("authToken") && u.CometChat.setAuthToken(e.data.authToken), n(e)) : r(e)
                    }).catch(function (e) {
                        return r
                    })
                }).catch(function (e) {
                    return r
                })
            })
        }, t.postData = d
    }, function (e, t, n) {
        "use strict";
        var r, o = this && this.__extends || (r = function (e, t) {
            return (r = Object.setPrototypeOf || {__proto__: []} instanceof Array && function (e, t) {
                e.__proto__ = t
            } || function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n])
            })(e, t)
        }, function (e, t) {
            function n() {
                this.constructor = e
            }

            r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
        });
        t.__esModule = !0;
        var s = n(2), i = n(14), a = n(0), c = function () {
            function e() {
                for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                if (this.hasBlockedMe = !1, this.blockedByMe = !1, 1 === e.length) typeof e[0] === a.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING ? this.uid = e[0] : (this.uid = e[0].uid, this.name = e[0].name, e[0].authToken && (this.authToken = e[0].authToken), e[0].avatar && (this.avatar = e[0].avatar), e[0].credits && (this.credits = e[0].credits), e[0].lastActiveAt && (this.lastActiveAt = e[0].lastActiveAt), e[0].link && (this.link = e[0].link), e[0].metadata && (this.metadata = e[0].metadata), e[0].role && (this.role = e[0].role), e[0].statusMessage && (this.statusMessage = e[0].statusMessage)); else {
                    if (2 !== e.length) throw new s.CometChatException(i.ERRORS.PARAMETER_MISSING);
                    this.uid = e[0], this.name = e[1]
                }
            }

            return e.prototype.getUid = function () {
                return this.uid
            }, e.prototype.setUid = function (e) {
                this.uid = e
            }, e.prototype.getName = function () {
                return this.name
            }, e.prototype.setName = function (e) {
                e && (this.name = e)
            }, e.prototype.getAuthToken = function () {
                return this.authToken
            }, e.prototype.setAuthToken = function (e) {
                this.authToken = e
            }, e.prototype.getAvatar = function () {
                return this.avatar
            }, e.prototype.setAvatar = function (e) {
                this.avatar = e
            }, e.prototype.getCredits = function () {
                return this.credits
            }, e.prototype.setCredits = function (e) {
                this.credits = e
            }, e.prototype.getLastActiveAt = function () {
                return this.lastActiveAt
            }, e.prototype.setLastActiveAt = function (e) {
                this.lastActiveAt = e
            }, e.prototype.getLink = function () {
                return this.link
            }, e.prototype.setLink = function (e) {
                return this.link = e
            }, e.prototype.getMetadata = function () {
                return this.metadata
            }, e.prototype.setMetadata = function (e) {
                this.metadata = e
            }, e.prototype.getRole = function () {
                return this.role
            }, e.prototype.setRole = function (e) {
                this.role = e
            }, e.prototype.getStatus = function () {
                return this.status
            }, e.prototype.setStatus = function (e) {
                this.status = e
            }, e.prototype.getStatusMessage = function () {
                return this.statusMessage
            }, e.prototype.setStatusMessage = function (e) {
                this.statusMessage = e
            }, e.prototype.setBlockedByMe = function (e) {
                this.blockedByMe = e
            }, e.prototype.getBlockedByMe = function () {
                return this.blockedByMe
            }, e.prototype.setHasBlockedMe = function (e) {
                this.hasBlockedMe = e
            }, e.prototype.getHasBlockedMe = function () {
                return this.hasBlockedMe
            }, e
        }(), u = function (n) {
            function e(e) {
                var t = n.call(this, e) || this;
                return t.wsChannel = e.wsChannel, t
            }

            return o(e, n), e.prototype.getWsChannel = function () {
                return this.wsChannel
            }, e
        }(t.User = c);
        t.Me = u
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(0), o = function () {
            function e(e, t, n, r, o, s, i) {
                this.hasJoined = !1, this.guid = e, t && (this.name = t), n && (this.type = n), !r && "" !== r || "password" != n || (this.password = r), (o || "" === o) && (this.icon = o), (s || "" === s) && (this.description = s), i && (this.hasJoined = i)
            }

            return e.prototype.getGuid = function () {
                return this.guid
            }, e.prototype.setGuid = function (e) {
                this.guid = e
            }, e.prototype.getName = function () {
                return this.name
            }, e.prototype.setName = function (e) {
                e && (this.name = e)
            }, e.prototype.getType = function () {
                return this.type
            }, e.prototype.setType = function (e) {
                this.type = e
            }, e.prototype.setPassword = function (e) {
                this.password = e
            }, e.prototype.getIcon = function () {
                return this.icon
            }, e.prototype.setIcon = function (e) {
                this.icon = e
            }, e.prototype.getDescription = function () {
                return this.description
            }, e.prototype.setDescription = function (e) {
                this.description = e
            }, e.prototype.getOwner = function () {
                return this.owner
            }, e.prototype.setOwner = function (e) {
                this.owner = e
            }, e.prototype.getMetadata = function () {
                return this.metadata
            }, e.prototype.setMetadata = function (e) {
                this.metadata = e
            }, e.prototype.getCreatedAt = function () {
                return this.createdAt
            }, e.prototype.setCreatedAt = function (e) {
                this.createdAt = e
            }, e.prototype.getUpdatedAt = function () {
                return this.updatedAt
            }, e.prototype.setUpdatedAt = function (e) {
                this.updatedAt = e
            }, e.prototype.getHasJoined = function () {
                return this.hasJoined
            }, e.prototype.setHasJoined = function (e) {
                this.hasJoined = e
            }, e.prototype.getWsChannel = function () {
                return this.wsChannel
            }, e.prototype.setWsChannel = function (e) {
                this.wsChannel = e
            }, e.prototype.setScope = function (e) {
                this.scope = e
            }, e.prototype.getScope = function () {
                return this.scope
            }, e.prototype.getJoinedAt = function () {
                return this.joinedAt
            }, e.prototype.setJoinedAt = function (e) {
                this.joinedAt = e
            }, e.TYPE = r.GroupType, e.Type = e.TYPE, e
        }();
        t.Group = o
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var s = n(17), i = n(10), a = n(18), u = n(4), r = n(21), l = n(1), d = n(0), E = n(13), h = n(22), p = n(23),
            f = n(42), g = n(2), _ = n(43), C = n(19), S = n(3), T = n(8), o = function () {
                function c() {
                }

                return c.trasformXMPPMessage = function (e) {
                    var t = {};
                    try {
                        var n = JSON.parse(unescape(i.parseHTML(e.getElementsByTagName("body")[0])).trim().toString());
                        t = this.trasformJSONMessge(n)
                    } catch (e) {
                        l.Logger.error("MessageController: transformXMPPMessage", {e: e})
                    }
                    return t
                }, c.checkIfCabon = function (e) {
                    try {
                        return 0 < e.getElementsByTagName("forwarded").length && e.getElementsByTagName("forwarded")[0], 0 < e.getElementsByTagName("forwarded").length
                    } catch (e) {
                        l.Logger.error("MessageController: checkIfCabon", {e: e})
                    }
                }, c.trasformJSONMessge = function (n) {
                    try {
                        var e = void 0;
                        switch (n[d.MessageConstatnts.KEYS.CATEGORY]) {
                            case d.MessageConstatnts.CATEGORY.ACTION:
                                e = h.Action.actionFromJSON(n);
                                break;
                            case d.MessageConstatnts.CATEGORY.CALL:
                                e = p.Call.callFromJSON(n);
                                break;
                            case d.MessageConstatnts.CATEGORY.MESSAGE:
                                switch (n[d.MessageConstatnts.KEYS.TYPE]) {
                                    case d.MessageConstatnts.TYPE.TEXT:
                                        e = new s.TextMessage(n[d.MessageConstatnts.KEYS.RECEIVER], n[d.MessageConstatnts.KEYS.DATA][d.MessageConstatnts.KEYS.TEXT], n[d.MessageConstatnts.KEYS.RECEIVER_TYPE]);
                                        break;
                                    case d.MessageConstatnts.TYPE.CUSTOM:
                                        e = new C.CustomMessage(n[d.MessageConstatnts.KEYS.RECEIVER], n[d.MessageConstatnts.KEYS.DATA][d.MessageConstatnts.KEYS.CUSTOM_DATA], n[d.MessageConstatnts.KEYS.RECEIVER_TYPE]);
                                        break;
                                    default:
                                        if (e = new a.MediaMessage(n[d.MessageConstatnts.KEYS.RECEIVER], n[d.MessageConstatnts.KEYS.DATA][d.MessageConstatnts.KEYS.URL], n[d.MessageConstatnts.KEYS.TYPE], n[d.MessageConstatnts.KEYS.RECEIVER_TYPE]), n.hasOwnProperty(d.MessageConstatnts.KEYS.DATA)) {
                                            var t = n[d.MessageConstatnts.KEYS.DATA];
                                            if (t.hasOwnProperty(d.MessageConstatnts.KEYS.ATTATCHMENTS)) {
                                                var r, o = t[d.MessageConstatnts.KEYS.ATTATCHMENTS];
                                                new Array;
                                                o.map(function (e) {
                                                    r = new _.Attachment(e)
                                                }), e.setAttachment(r)
                                            }
                                            t.hasOwnProperty(d.MessageConstatnts.KEYS.TEXT) && e.setCaption(t[d.MessageConstatnts.KEYS.TEXT])
                                        }
                                        e.hasOwnProperty("file") && delete e.file
                                }
                                break;
                            case d.MessageConstatnts.CATEGORY.CUSTOM:
                                e = new C.CustomMessage(n[d.MessageConstatnts.KEYS.RECEIVER], n[d.MessageConstatnts.KEYS.DATA][d.MessageConstatnts.KEYS.CUSTOM_DATA], n[d.MessageConstatnts.KEYS.RECEIVER_TYPE], n.type)
                        }
                        n[d.MessageConstatnts.KEYS.MY_RECEIPTS] && (n[d.MessageConstatnts.KEYS.MY_RECEIPTS] = n[d.MessageConstatnts.KEYS.MY_RECEIPTS], Object.keys(n[d.MessageConstatnts.KEYS.MY_RECEIPTS]).map(function (e) {
                            var t = new f.MessageReceipt;
                            e == d.DELIVERY_RECEIPTS.DELIVERED_AT && (t.setReceiptType(t.RECEIPT_TYPE.DELIVERY_RECEIPT), t.setDeliveredAt(n[d.MessageConstatnts.KEYS.MY_RECEIPTS][d.DELIVERY_RECEIPTS.DELIVERED_AT]), l.isFalsy(n[d.MessageConstatnts.KEYS.MY_RECEIPTS][d.DELIVERY_RECEIPTS.RECIPIENT]) ? n[d.DELIVERY_RECEIPTS.DELIVERED_TO_ME_AT] = n[d.MessageConstatnts.KEYS.MY_RECEIPTS][d.DELIVERY_RECEIPTS.DELIVERED_AT] : t.setSender(n[d.MessageConstatnts.KEYS.MY_RECEIPTS][d.DELIVERY_RECEIPTS.RECIPIENT]), t.setReceiverType(n[d.MessageConstatnts.KEYS.RECEIVER_TYPE]), t.setReceiver(n[d.MessageConstatnts.KEYS.RECEIVER])), n[d.MessageConstatnts.KEYS.MY_RECEIPTS][d.READ_RECEIPTS.READ_AT] && (t.setReceiptType(t.RECEIPT_TYPE.READ_RECEIPT), t.setReadAt(n[d.MessageConstatnts.KEYS.MY_RECEIPTS][d.READ_RECEIPTS.READ_AT]), l.isFalsy(n[d.MessageConstatnts.KEYS.MY_RECEIPTS][d.READ_RECEIPTS.RECIPIENT]) ? n[d.READ_RECEIPTS.READ_BY_ME_AT] = n[d.MessageConstatnts.KEYS.MY_RECEIPTS][d.READ_RECEIPTS.READ_AT] : t.setSender(n[d.MessageConstatnts.KEYS.MY_RECEIPTS][d.READ_RECEIPTS.RECIPIENT]), t.setReceiverType(n[d.MessageConstatnts.KEYS.RECEIVER_TYPE]), t.setReceiver(n[d.MessageConstatnts.KEYS.RECEIVER]))
                        }));
                        try {
                            if (Object.assign(e, n), (n = e) instanceof s.TextMessage) n.setSender(n.getSender()), n.setReceiver(n.getReceiver()), n.getData()[d.MessageConstatnts.KEYS.METADATA] && n.setMetadata(n.getData()[d.MessageConstatnts.KEYS.METADATA]); else if (n instanceof a.MediaMessage) n.getData()[d.MessageConstatnts.KEYS.METADATA] && n.setMetadata(n.getData()[d.MessageConstatnts.KEYS.METADATA]), n.setSender(n.getSender()), n.setReceiver(n.getReceiver()); else if (n instanceof h.Action) n.setSender(n.getSender()), n.setReceiver(n.getActionFor()), n.setActionBy(n.getActionBy()), n.setActionOn(n.getActionOn()), n.setActionFor(n.getActionFor()), n.setMessage(n.getMessage()); else if (n instanceof p.Call) {
                                try {
                                    n.setSender(n.getSender())
                                } catch (e) {
                                    l.Logger.error("MessageController: trasformJSONMessge: setSender", e)
                                }
                                try {
                                    n.setCallInitiator(n.getCallInitiator())
                                } catch (e) {
                                    l.Logger.error("MessageController: trasformJSONMessge: setCallInitiator", e)
                                }
                                try {
                                    n.setReceiver(n.getCallReceiver()), n.setCallReceiver(n.getCallReceiver())
                                } catch (e) {
                                    l.Logger.error("MessageController: trasformJSONMessge: setCallreceiver", e)
                                }
                            } else n instanceof C.CustomMessage && (n.getData()[d.MessageConstatnts.KEYS.METADATA] && n.setMetadata(n.getData()[d.MessageConstatnts.KEYS.METADATA]), n.setSubType(n.getData()[d.MessageConstatnts.KEYS.CUSTOM_SUB_TYPE]), n.setSender(n.getSender()), n.setReceiver(n.getReceiver()))
                        } catch (e) {
                            l.Logger.error("MessageController: trasformJSONMessge: Main", e), n = null
                        }
                        return n
                    } catch (e) {
                        l.Logger.error("MessageController: trasformJSONMessge", e)
                    }
                }, c.getOfflineHistory = function (e, t) {
                    void 0 === e && (e = 1e3), void 0 === t && (t = 1);
                    try {
                        r.MessagesStore.getInstance();
                        var n = [];
                        u.makeApiCall("getMessages", {}, this.createData(e, t)).then(function (e) {
                            return l.isFalsy(e.data) || e.data.map(function (e) {
                                E.XMPPConnectionHelper.getInstance().trigerMessageHandler(e), n.push(c.trasformJSONMessge(e))
                            }), !0
                        })
                    } catch (e) {
                        l.Logger.error("MessageController: getOfflineHistory", e)
                    }
                }, c.getAllMessage = function (e, r, o, s) {
                    var i = this;
                    void 0 === e && (e = 100);
                    var a = [];
                    return new Promise(function (t, n) {
                        try {
                            u.makeApiCall("getMessages", {}, i.createAllMessageData(e, r, o, s)).then(function (e) {
                                l.isFalsy(e.data) || (e.data.map(function (e) {
                                    a.push(c.trasformJSONMessge(e))
                                }), t(a))
                            }, function (e) {
                                l.Logger.error("Error on fetching all message", e), t([])
                            })
                        } catch (e) {
                            n(new g.CometChatException(e))
                        }
                    })
                }, c.createData = function (e, t) {
                    return void 0 === t && (t = 0), {
                        per_page: e,
                        cursorValue: t,
                        cursorField: d.MessageConstatnts.PAGINATION.CURSOR_FILEDS.ID,
                        cursorAffix: l.isFalsy(t) ? d.MessageConstatnts.PAGINATION.AFFIX.PREPEND : d.MessageConstatnts.PAGINATION.AFFIX.APPEND
                    }
                }, c.createAllMessageData = function (e, t, n, r) {
                    return {per_page: e, cursorValue: t, cursorField: n, cursorAffix: r}
                }, c.isDeliveryReceipt = function (e) {
                    try {
                        return 0 < e.getElementsByTagName(d.DELIVERY_RECEIPTS.RECEIVED).length
                    } catch (e) {
                        l.Logger.error("MessageController: isDeliveryReceipts", e)
                    }
                }, c.isReadRceipt = function (e) {
                    try {
                        return 0 < e.getElementsByTagName(d.READ_RECEIPTS.READ).length
                    } catch (e) {
                        l.Logger.error("MessageController: isDeliveryReceipts", e)
                    }
                }, c.processDeliveryReceipt = function (s) {
                    return new Promise(function (n, t) {
                        try {
                            var r = s.getElementsByTagName(d.DELIVERY_RECEIPTS.RECEIVED)[0],
                                o = s.getElementsByTagName(d.DELIVERY_RECEIPTS.DELIVERED_AT)[0];
                            E.XMPPConnectionHelper.getInstance().getUsersVCard(i.getUidFromJid(s.getAttribute(d.MessageConstatnts.XMPP_KEYS.FROM)), function (e) {
                                var t = new f.MessageReceipt;
                                t.setSender(e), r.getAttribute(d.DELIVERY_RECEIPTS.RECEIVER_TYPE) == d.MessageConstatnts.RECEIVER_TYPE.GROUP ? (t.setReceiverType(d.MessageConstatnts.RECEIVER_TYPE.GROUP), t.setReceiver(r.getAttribute(d.DELIVERY_RECEIPTS.RECEIVER_ID))) : (t.setReceiverType(d.MessageConstatnts.RECEIVER_TYPE.USER), t.setReceiver(i.getUidFromJid(s.getAttribute(d.MessageConstatnts.XMPP_KEYS.TO)))), t.setReceiptType(t.RECEIPT_TYPE.DELIVERY_RECEIPT), t.setMessageId(i.getmessageIdFromStanzaId(r.getAttribute(d.DELIVERY_RECEIPTS.ID))), t.setTimestamp(o.getAttribute(d.DELIVERY_RECEIPTS.TIME)), t.setDeliveredAt(o.getAttribute(d.DELIVERY_RECEIPTS.TIME)), n(t)
                            })
                        } catch (e) {
                            t(new g.CometChatException(e))
                        }
                    })
                }, c.processReadReceipt = function (s) {
                    return new Promise(function (n, t) {
                        try {
                            var r = s.getElementsByTagName(d.READ_RECEIPTS.READ)[0],
                                o = s.getElementsByTagName(d.READ_RECEIPTS.READ_AT)[0];
                            E.XMPPConnectionHelper.getInstance().getUsersVCard(i.getUidFromJid(s.getAttribute(d.MessageConstatnts.XMPP_KEYS.FROM)), function (e) {
                                var t = new f.MessageReceipt;
                                t.setSender(e), r.getAttribute(d.READ_RECEIPTS.RECEIVER_TYPE) == d.MessageConstatnts.RECEIVER_TYPE.GROUP ? (t.setReceiverType(d.MessageConstatnts.RECEIVER_TYPE.GROUP), t.setReceiver(r.getAttribute(d.READ_RECEIPTS.RECEIVER_ID))) : (t.setReceiverType(d.MessageConstatnts.RECEIVER_TYPE.USER), t.setReceiver(i.getUidFromJid(s.getAttribute(d.MessageConstatnts.XMPP_KEYS.TO)))), t.setReceiptType(t.RECEIPT_TYPE.READ_RECEIPT), t.setMessageId(i.getmessageIdFromStanzaId(r.getAttribute(d.READ_RECEIPTS.ID))), t.setTimestamp(o.getAttribute(d.READ_RECEIPTS.TIME)), t.setReadAt(o.getAttribute(d.READ_RECEIPTS.TIME)), n(t)
                            })
                        } catch (e) {
                            t(new g.CometChatException(e))
                        }
                    })
                }, c.getReceiptsFromJSON = function (o) {
                    return new Promise(function (e, t) {
                        try {
                            var r = [];
                            S.CometChat.getLoggedInUser().then(function (n) {
                                l.isFalsy(o.receipts) ? e([]) : (o.receipts.data.map(function (e) {
                                    var t = new f.MessageReceipt;
                                    e[d.DELIVERY_RECEIPTS.DELIVERED_AT] && (t.setReceiptType(t.RECEIPT_TYPE.DELIVERY_RECEIPT), t.setDeliveredAt(e[d.DELIVERY_RECEIPTS.DELIVERED_AT]), t.setTimestamp(e[d.DELIVERY_RECEIPTS.DELIVERED_AT]), l.isFalsy(e[d.DELIVERY_RECEIPTS.RECIPIENT]) ? t.setSender(n) : t.setSender(T.UsersController.trasformJSONUser(e[d.DELIVERY_RECEIPTS.RECIPIENT])), t.setReceiverType(o[d.MessageConstatnts.KEYS.RECEIVER_TYPE]), t.setReceiver(o[d.MessageConstatnts.KEYS.RECEIVER])), e[d.READ_RECEIPTS.READ_AT] && (t.setReceiptType(t.RECEIPT_TYPE.READ_RECEIPT), t.setReadAt(e[d.READ_RECEIPTS.READ_AT]), t.setTimestamp(e[e[d.READ_RECEIPTS.READ_AT]]), l.isFalsy(e[d.READ_RECEIPTS.RECIPIENT]) ? t.setSender(n) : t.setSender(T.UsersController.trasformJSONUser(e[d.READ_RECEIPTS.RECIPIENT])), t.setReceiverType(o[d.MessageConstatnts.KEYS.RECEIVER_TYPE]), t.setReceiver(o[d.MessageConstatnts.KEYS.RECEIVER])), r.push(t)
                                }), e(r))
                            })
                        } catch (e) {
                            t(new g.CometChatException(e))
                        }
                    })
                }, c
            }();
        t.MessageController = o
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(5), o = n(1), s = function () {
            function e() {
            }

            return e.trasformJSONUser = function (e) {
                var t;
                try {
                    "offline" != e.status && (e.status = "online"), t = new r.User(e), Object.assign(t, e), e = t
                } catch (e) {
                    o.Logger.error("UsersController:transformJSONUser", e)
                }
                return e
            }, e
        }();
        t.UsersController = s
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(1), o = n(0), s = n(11), i = n(3), a = n(2), c = function () {
            function e(e) {
                this.store = o.constants.DEFAULT_STORE, r.isFalsy(e) || (this.store = e), this.localStore = s.createInstance({name: r.format(o.LOCAL_STORE.STORE_STRING, i.CometChat.getAppId(), o.LOCAL_STORE.COMMON_STORE)}), this.localStore.setDriver([s.LOCALSTORAGE, s.INDEXEDDB, s.WEBSQL])
            }

            return e.getInstance = function () {
                return null == e.localStorage && (e.localStorage = new e), e.localStorage
            }, e.prototype.set = function (e, t) {
                return this.localStore.setItem(e, JSON.stringify(t))
            }, e.prototype.remove = function (e) {
                this.localStore.removeItem(e)
            }, e.prototype.get = function (e) {
                var r = this;
                return new Promise(function (n, t) {
                    try {
                        r.localStore.getItem(e).then(function (t) {
                            try {
                                n(JSON.parse(t))
                            } catch (e) {
                                n(t)
                            }
                        }, function (e) {
                            t(e)
                        })
                    } catch (e) {
                        t(new a.CometChatException(e))
                    }
                })
            }, e.prototype.clearStore = function () {
                return this.localStore.clear()
            }, e.prototype.clear = function (e) {
            }, e.prototype.selectStore = function (e) {
                this.store = e
            }, e.localStorage = null, e
        }();
        t.LocalStorage = c
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var o = n(0), s = n(1), i = n(3), a = n(2);
        t.getUidFromJid = function (e) {
            try {
                return e.substring(e.lastIndexOf("]") + 1, e.lastIndexOf("@"))
            } catch (e) {
                s.Logger.error("XMPPUtils: getUidFromJid", e)
            }
        }, t.getappIdFromJid = function (e) {
            try {
                return e.substring(e.lastIndexOf("[") + 1, e.lastIndexOf("]"))
            } catch (e) {
                s.Logger.error("XMPPUtils: getappIdFromJid", e)
            }
        }, t.getmessageIdFromStanzaId = function (t) {
            try {
                return t ? t.substring(t.lastIndexOf("]") + 1, t.length) : t
            } catch (e) {
                return s.Logger.error("XMPPUtils: getmessageIdFromStanzaId", e), t
            }
        }, t.parseHTML = function (t) {
            try {
                return void 0 !== t ? t.textContent : t
            } catch (e) {
                return s.Logger.error("XMPPUtils: parseHTML", e), t
            }
        }, t.getJidFromUid = function (r) {
            return new Promise(function (t, n) {
                try {
                    s.getAppSettings().then(function (e) {
                        t(s.format(o.XMPP.bare_jid_string, i.CometChat.getAppId(), r, e[o.APP_SETTINGS.KEYS.CHAT_HOST]))
                    }, function (e) {
                        t(s.format(o.XMPP.bare_jid_string, i.CometChat.getAppId(), r, o.XMPP.host))
                    })
                } catch (e) {
                    n(new a.CometChatException(e))
                }
            })
        }, t.getGUIDFromJID = function (e) {
            try {
                return e.substring(e.indexOf("]") + 1, e.indexOf("@"))
            } catch (e) {
                s.Logger.error("XMPPUtils: getGUIDFromJID", e)
            }
        }, t.getGroupJidFromGUID = function (r) {
            return new Promise(function (t, n) {
                try {
                    s.getAppSettings().then(function (e) {
                        t(s.format(o.XMPP.muc_jid_string, i.CometChat.getAppId(), r, e[o.APP_SETTINGS.KEYS.GROUP_SERVICE], e[o.APP_SETTINGS.KEYS.CHAT_HOST]))
                    }, function (e) {
                        t(s.format(o.XMPP.muc_jid_string, i.CometChat.getAppId(), r, i.CometChat.getAppId(), o.XMPP.host))
                    })
                } catch (e) {
                    n(new a.CometChatException(e))
                }
            })
        }, t.getFullJidForGroup = function (e) {
            try {
                return e.substring(e.indexOf("/") + 1)
            } catch (e) {
                s.Logger.error("XMPPUtils: getFullJidForGroup", e)
            }
        }, t.getGroupJidFullGroupJid = function (e) {
            try {
                return e.substring(0, e.indexOf("/"))
            } catch (e) {
                s.Logger.error("XMPPUtils: getGroupJidFullGroupJid", e)
            }
        }
    }, function (e, t, n) {
        (function (r) {
            e.exports = function o(s, i, a) {
                function c(n, e) {
                    if (!i[n]) {
                        if (!s[n]) {
                            if (u) return u(n, !0);
                            var t = new Error("Cannot find module '" + n + "'");
                            throw t.code = "MODULE_NOT_FOUND", t
                        }
                        var r = i[n] = {exports: {}};
                        s[n][0].call(r.exports, function (e) {
                            var t = s[n][1][e];
                            return c(t || e)
                        }, r, r.exports, o, s, i, a)
                    }
                    return i[n].exports
                }

                for (var u = !1, e = 0; e < a.length; e++) c(a[e]);
                return c
            }({
                1: [function (e, l, t) {
                    (function (t) {
                        "use strict";
                        var n, r, e = t.MutationObserver || t.WebKitMutationObserver;
                        if (e) {
                            var o = 0, s = new e(u), i = t.document.createTextNode("");
                            s.observe(i, {characterData: !0}), n = function () {
                                i.data = o = ++o % 2
                            }
                        } else if (t.setImmediate || void 0 === t.MessageChannel) n = "document" in t && "onreadystatechange" in t.document.createElement("script") ? function () {
                            var e = t.document.createElement("script");
                            e.onreadystatechange = function () {
                                u(), e.onreadystatechange = null, e.parentNode.removeChild(e), e = null
                            }, t.document.documentElement.appendChild(e)
                        } : function () {
                            setTimeout(u, 0)
                        }; else {
                            var a = new t.MessageChannel;
                            a.port1.onmessage = u, n = function () {
                                a.port2.postMessage(0)
                            }
                        }
                        var c = [];

                        function u() {
                            var e, t;
                            r = !0;
                            for (var n = c.length; n;) {
                                for (t = c, c = [], e = -1; ++e < n;) t[e]();
                                n = c.length
                            }
                            r = !1
                        }

                        l.exports = function (e) {
                            1 !== c.push(e) || r || n()
                        }
                    }).call(this, void 0 !== r ? r : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
                }, {}], 2: [function (e, t, n) {
                    "use strict";
                    var o = e(1);

                    function u() {
                    }

                    var l = {}, s = ["REJECTED"], i = ["FULFILLED"], a = ["PENDING"];

                    function r(e) {
                        if ("function" != typeof e) throw new TypeError("resolver must be a function");
                        this.state = a, this.queue = [], this.outcome = void 0, e !== u && h(this, e)
                    }

                    function c(e, t, n) {
                        this.promise = e, "function" == typeof t && (this.onFulfilled = t, this.callFulfilled = this.otherCallFulfilled), "function" == typeof n && (this.onRejected = n, this.callRejected = this.otherCallRejected)
                    }

                    function d(t, n, r) {
                        o(function () {
                            var e;
                            try {
                                e = n(r)
                            } catch (e) {
                                return l.reject(t, e)
                            }
                            e === t ? l.reject(t, new TypeError("Cannot resolve promise with itself")) : l.resolve(t, e)
                        })
                    }

                    function E(e) {
                        var t = e && e.then;
                        if (e && ("object" == typeof e || "function" == typeof e) && "function" == typeof t) return function () {
                            t.apply(e, arguments)
                        }
                    }

                    function h(t, e) {
                        var n = !1;

                        function r(e) {
                            n || (n = !0, l.reject(t, e))
                        }

                        function o(e) {
                            n || (n = !0, l.resolve(t, e))
                        }

                        var s = p(function () {
                            e(o, r)
                        });
                        "error" === s.status && r(s.value)
                    }

                    function p(e, t) {
                        var n = {};
                        try {
                            n.value = e(t), n.status = "success"
                        } catch (e) {
                            n.status = "error", n.value = e
                        }
                        return n
                    }

                    (t.exports = r).prototype.catch = function (e) {
                        return this.then(null, e)
                    }, r.prototype.then = function (e, t) {
                        if ("function" != typeof e && this.state === i || "function" != typeof t && this.state === s) return this;
                        var n = new this.constructor(u);
                        if (this.state !== a) {
                            var r = this.state === i ? e : t;
                            d(n, r, this.outcome)
                        } else this.queue.push(new c(n, e, t));
                        return n
                    }, c.prototype.callFulfilled = function (e) {
                        l.resolve(this.promise, e)
                    }, c.prototype.otherCallFulfilled = function (e) {
                        d(this.promise, this.onFulfilled, e)
                    }, c.prototype.callRejected = function (e) {
                        l.reject(this.promise, e)
                    }, c.prototype.otherCallRejected = function (e) {
                        d(this.promise, this.onRejected, e)
                    }, l.resolve = function (e, t) {
                        var n = p(E, t);
                        if ("error" === n.status) return l.reject(e, n.value);
                        var r = n.value;
                        if (r) h(e, r); else {
                            e.state = i, e.outcome = t;
                            for (var o = -1, s = e.queue.length; ++o < s;) e.queue[o].callFulfilled(t)
                        }
                        return e
                    }, l.reject = function (e, t) {
                        e.state = s, e.outcome = t;
                        for (var n = -1, r = e.queue.length; ++n < r;) e.queue[n].callRejected(t);
                        return e
                    }, r.resolve = function (e) {
                        return e instanceof this ? e : l.resolve(new this(u), e)
                    }, r.reject = function (e) {
                        var t = new this(u);
                        return l.reject(t, e)
                    }, r.all = function (e) {
                        var n = this;
                        if ("[object Array]" !== Object.prototype.toString.call(e)) return this.reject(new TypeError("must be an array"));
                        var r = e.length, o = !1;
                        if (!r) return this.resolve([]);
                        for (var s = new Array(r), i = 0, t = -1, a = new this(u); ++t < r;) c(e[t], t);
                        return a;

                        function c(e, t) {
                            n.resolve(e).then(function (e) {
                                s[t] = e, ++i !== r || o || (o = !0, l.resolve(a, s))
                            }, function (e) {
                                o || (o = !0, l.reject(a, e))
                            })
                        }
                    }, r.race = function (e) {
                        var t = this;
                        if ("[object Array]" !== Object.prototype.toString.call(e)) return this.reject(new TypeError("must be an array"));
                        var n = e.length, r = !1;
                        if (!n) return this.resolve([]);
                        for (var o, s = -1, i = new this(u); ++s < n;) o = e[s], t.resolve(o).then(function (e) {
                            r || (r = !0, l.resolve(i, e))
                        }, function (e) {
                            r || (r = !0, l.reject(i, e))
                        });
                        return i
                    }
                }, {1: 1}], 3: [function (t, e, n) {
                    (function (e) {
                        "use strict";
                        "function" != typeof e.Promise && (e.Promise = t(2))
                    }).call(this, void 0 !== r ? r : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
                }, {2: 2}], 4: [function (e, t, n) {
                    "use strict";
                    var r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
                        return typeof e
                    } : function (e) {
                        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
                    }, c = function () {
                        try {
                            if ("undefined" != typeof indexedDB) return indexedDB;
                            if ("undefined" != typeof webkitIndexedDB) return webkitIndexedDB;
                            if ("undefined" != typeof mozIndexedDB) return mozIndexedDB;
                            if ("undefined" != typeof OIndexedDB) return OIndexedDB;
                            if ("undefined" != typeof msIndexedDB) return msIndexedDB
                        } catch (e) {
                            return
                        }
                    }();

                    function i(t, n) {
                        t = t || [], n = n || {};
                        try {
                            return new Blob(t, n)
                        } catch (e) {
                            if ("TypeError" !== e.name) throw e;
                            for (var r = "undefined" != typeof BlobBuilder ? BlobBuilder : "undefined" != typeof MSBlobBuilder ? MSBlobBuilder : "undefined" != typeof MozBlobBuilder ? MozBlobBuilder : WebKitBlobBuilder, o = new r, s = 0; s < t.length; s += 1) o.append(t[s]);
                            return o.getBlob(n.type)
                        }
                    }

                    "undefined" == typeof Promise && e(3);
                    var d = Promise;

                    function E(e, t) {
                        t && e.then(function (e) {
                            t(null, e)
                        }, function (e) {
                            t(e)
                        })
                    }

                    function u(e, t, n) {
                        "function" == typeof t && e.then(t), "function" == typeof n && e.catch(n)
                    }

                    function l(e) {
                        return "string" != typeof e && (e = String(e)), e
                    }

                    function s() {
                        if (arguments.length && "function" == typeof arguments[arguments.length - 1]) return arguments[arguments.length - 1]
                    }

                    var a = "local-forage-detect-blob-support", o = void 0, h = {}, p = Object.prototype.toString,
                        f = "readonly", g = "readwrite";

                    function _(e) {
                        return "boolean" == typeof o ? d.resolve(o) : (r = e, new d(function (n) {
                            var e = r.transaction(a, g), t = i([""]);
                            e.objectStore(a).put(t, "key"), e.onabort = function (e) {
                                e.preventDefault(), e.stopPropagation(), n(!1)
                            }, e.oncomplete = function () {
                                var e = navigator.userAgent.match(/Chrome\/(\d+)/),
                                    t = navigator.userAgent.match(/Edge\//);
                                n(t || !e || 43 <= parseInt(e[1], 10))
                            }
                        }).catch(function () {
                            return !1
                        })).then(function (e) {
                            return o = e
                        });
                        var r
                    }

                    function C(e) {
                        var t = h[e.name], n = {};
                        n.promise = new d(function (e, t) {
                            n.resolve = e, n.reject = t
                        }), t.deferredOperations.push(n), t.dbReady ? t.dbReady = t.dbReady.then(function () {
                            return n.promise
                        }) : t.dbReady = n.promise
                    }

                    function S(e) {
                        var t = h[e.name], n = t.deferredOperations.pop();
                        if (n) return n.resolve(), n.promise
                    }

                    function T(e, t) {
                        var n = h[e.name], r = n.deferredOperations.pop();
                        if (r) return r.reject(t), r.promise
                    }

                    function m(o, s) {
                        return new d(function (e, t) {
                            if (h[o.name] = h[o.name] || {
                                forages: [],
                                db: null,
                                dbReady: null,
                                deferredOperations: []
                            }, o.db) {
                                if (!s) return e(o.db);
                                C(o), o.db.close()
                            }
                            var n = [o.name];
                            s && n.push(o.version);
                            var r = c.open.apply(c, n);
                            s && (r.onupgradeneeded = function (e) {
                                var t = r.result;
                                try {
                                    t.createObjectStore(o.storeName), e.oldVersion <= 1 && t.createObjectStore(a)
                                } catch (e) {
                                    if ("ConstraintError" !== e.name) throw e
                                }
                            }), r.onerror = function (e) {
                                e.preventDefault(), t(r.error)
                            }, r.onsuccess = function () {
                                e(r.result), S(o)
                            }
                        })
                    }

                    function A(e) {
                        return m(e, !1)
                    }

                    function I(e) {
                        return m(e, !0)
                    }

                    function N(e, t) {
                        if (!e.db) return !0;
                        var n = !e.db.objectStoreNames.contains(e.storeName), r = e.version < e.db.version,
                            o = e.version > e.db.version;
                        if (r && (e.version, e.version = e.db.version), o || n) {
                            if (n) {
                                var s = e.db.version + 1;
                                s > e.version && (e.version = s)
                            }
                            return !0
                        }
                        return !1
                    }

                    function R(e) {
                        var t = function (e) {
                            for (var t = e.length, n = new ArrayBuffer(t), r = new Uint8Array(n), o = 0; o < t; o++) r[o] = e.charCodeAt(o);
                            return n
                        }(atob(e.data));
                        return i([t], {type: e.type})
                    }

                    function y(e) {
                        return e && e.__local_forage_encoded_blob
                    }

                    function O(e) {
                        var t = this, n = t._initReady().then(function () {
                            var e = h[t._dbInfo.name];
                            if (e && e.dbReady) return e.dbReady
                        });
                        return u(n, e, e), n
                    }

                    function v(t, n, r, o) {
                        void 0 === o && (o = 1);
                        try {
                            var e = t.db.transaction(t.storeName, n);
                            r(null, e)
                        } catch (e) {
                            if (0 < o && (!t.db || "InvalidStateError" === e.name || "NotFoundError" === e.name)) return d.resolve().then(function () {
                                if (!t.db || "NotFoundError" === e.name && !t.db.objectStoreNames.contains(t.storeName) && t.version <= t.db.version) return t.db && (t.version = t.db.version + 1), I(t)
                            }).then(function () {
                                return function (n) {
                                    C(n);
                                    for (var r = h[n.name], o = r.forages, e = 0; e < o.length; e++) {
                                        var t = o[e];
                                        t._dbInfo.db && (t._dbInfo.db.close(), t._dbInfo.db = null)
                                    }
                                    return n.db = null, A(n).then(function (e) {
                                        return n.db = e, N(n) ? I(n) : e
                                    }).then(function (e) {
                                        n.db = r.db = e;
                                        for (var t = 0; t < o.length; t++) o[t]._dbInfo.db = e
                                    }).catch(function (e) {
                                        throw T(n, e), e
                                    })
                                }(t).then(function () {
                                    v(t, n, r, o - 1)
                                })
                            }).catch(r);
                            r(e)
                        }
                    }

                    var M = {
                            _driver: "asyncStorage", _initStorage: function (e) {
                                var r = this, o = {db: null};
                                if (e) for (var t in e) o[t] = e[t];
                                var s = h[o.name];
                                s || (s = {
                                    forages: [],
                                    db: null,
                                    dbReady: null,
                                    deferredOperations: []
                                }, h[o.name] = s), s.forages.push(r), r._initReady || (r._initReady = r.ready, r.ready = O);
                                var n = [];

                                function i() {
                                    return d.resolve()
                                }

                                for (var a = 0; a < s.forages.length; a++) {
                                    var c = s.forages[a];
                                    c !== r && n.push(c._initReady().catch(i))
                                }
                                var u = s.forages.slice(0);
                                return d.all(n).then(function () {
                                    return o.db = s.db, A(o)
                                }).then(function (e) {
                                    return o.db = e, N(o, r._defaultConfig.version) ? I(o) : e
                                }).then(function (e) {
                                    o.db = s.db = e, r._dbInfo = o;
                                    for (var t = 0; t < u.length; t++) {
                                        var n = u[t];
                                        n !== r && (n._dbInfo.db = o.db, n._dbInfo.version = o.version)
                                    }
                                })
                            }, _support: function () {
                                try {
                                    if (!c) return !1;
                                    var e = "undefined" != typeof openDatabase && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform),
                                        t = "function" == typeof fetch && -1 !== fetch.toString().indexOf("[native code");
                                    return (!e || t) && "undefined" != typeof indexedDB && "undefined" != typeof IDBKeyRange
                                } catch (e) {
                                    return !1
                                }
                            }(), iterate: function (a, e) {
                                var c = this, t = new d(function (s, i) {
                                    c.ready().then(function () {
                                        v(c._dbInfo, f, function (e, t) {
                                            if (e) return i(e);
                                            try {
                                                var n = t.objectStore(c._dbInfo.storeName), r = n.openCursor(), o = 1;
                                                r.onsuccess = function () {
                                                    var e = r.result;
                                                    if (e) {
                                                        var t = e.value;
                                                        y(t) && (t = R(t));
                                                        var n = a(t, e.key, o++);
                                                        void 0 !== n ? s(n) : e.continue()
                                                    } else s()
                                                }, r.onerror = function () {
                                                    i(r.error)
                                                }
                                            } catch (e) {
                                                i(e)
                                            }
                                        })
                                    }).catch(i)
                                });
                                return E(t, e), t
                            }, getItem: function (i, e) {
                                var a = this;
                                i = l(i);
                                var t = new d(function (o, s) {
                                    a.ready().then(function () {
                                        v(a._dbInfo, f, function (e, t) {
                                            if (e) return s(e);
                                            try {
                                                var n = t.objectStore(a._dbInfo.storeName), r = n.get(i);
                                                r.onsuccess = function () {
                                                    var e = r.result;
                                                    void 0 === e && (e = null), y(e) && (e = R(e)), o(e)
                                                }, r.onerror = function () {
                                                    s(r.error)
                                                }
                                            } catch (e) {
                                                s(e)
                                            }
                                        })
                                    }).catch(s)
                                });
                                return E(t, e), t
                            }, setItem: function (a, t, e) {
                                var c = this;
                                a = l(a);
                                var n = new d(function (s, i) {
                                    var e;
                                    c.ready().then(function () {
                                        return e = c._dbInfo, "[object Blob]" === p.call(t) ? _(e.db).then(function (e) {
                                            return e ? t : (r = t, new d(function (n, e) {
                                                var t = new FileReader;
                                                t.onerror = e, t.onloadend = function (e) {
                                                    var t = btoa(e.target.result || "");
                                                    n({__local_forage_encoded_blob: !0, data: t, type: r.type})
                                                }, t.readAsBinaryString(r)
                                            }));
                                            var r
                                        }) : t
                                    }).then(function (o) {
                                        v(c._dbInfo, g, function (e, t) {
                                            if (e) return i(e);
                                            try {
                                                var n = t.objectStore(c._dbInfo.storeName);
                                                null === o && (o = void 0);
                                                var r = n.put(o, a);
                                                t.oncomplete = function () {
                                                    void 0 === o && (o = null), s(o)
                                                }, t.onabort = t.onerror = function () {
                                                    var e = r.error ? r.error : r.transaction.error;
                                                    i(e)
                                                }
                                            } catch (e) {
                                                i(e)
                                            }
                                        })
                                    }).catch(i)
                                });
                                return E(n, e), n
                            }, removeItem: function (i, e) {
                                var a = this;
                                i = l(i);
                                var t = new d(function (o, s) {
                                    a.ready().then(function () {
                                        v(a._dbInfo, g, function (e, t) {
                                            if (e) return s(e);
                                            try {
                                                var n = t.objectStore(a._dbInfo.storeName), r = n.delete(i);
                                                t.oncomplete = function () {
                                                    o()
                                                }, t.onerror = function () {
                                                    s(r.error)
                                                }, t.onabort = function () {
                                                    var e = r.error ? r.error : r.transaction.error;
                                                    s(e)
                                                }
                                            } catch (e) {
                                                s(e)
                                            }
                                        })
                                    }).catch(s)
                                });
                                return E(t, e), t
                            }, clear: function (e) {
                                var i = this, t = new d(function (o, s) {
                                    i.ready().then(function () {
                                        v(i._dbInfo, g, function (e, t) {
                                            if (e) return s(e);
                                            try {
                                                var n = t.objectStore(i._dbInfo.storeName), r = n.clear();
                                                t.oncomplete = function () {
                                                    o()
                                                }, t.onabort = t.onerror = function () {
                                                    var e = r.error ? r.error : r.transaction.error;
                                                    s(e)
                                                }
                                            } catch (e) {
                                                s(e)
                                            }
                                        })
                                    }).catch(s)
                                });
                                return E(t, e), t
                            }, length: function (e) {
                                var i = this, t = new d(function (o, s) {
                                    i.ready().then(function () {
                                        v(i._dbInfo, f, function (e, t) {
                                            if (e) return s(e);
                                            try {
                                                var n = t.objectStore(i._dbInfo.storeName), r = n.count();
                                                r.onsuccess = function () {
                                                    o(r.result)
                                                }, r.onerror = function () {
                                                    s(r.error)
                                                }
                                            } catch (e) {
                                                s(e)
                                            }
                                        })
                                    }).catch(s)
                                });
                                return E(t, e), t
                            }, key: function (a, e) {
                                var c = this, t = new d(function (s, i) {
                                    a < 0 ? s(null) : c.ready().then(function () {
                                        v(c._dbInfo, f, function (e, t) {
                                            if (e) return i(e);
                                            try {
                                                var n = t.objectStore(c._dbInfo.storeName), r = !1, o = n.openCursor();
                                                o.onsuccess = function () {
                                                    var e = o.result;
                                                    e ? 0 === a ? s(e.key) : r ? s(e.key) : (r = !0, e.advance(a)) : s(null)
                                                }, o.onerror = function () {
                                                    i(o.error)
                                                }
                                            } catch (e) {
                                                i(e)
                                            }
                                        })
                                    }).catch(i)
                                });
                                return E(t, e), t
                            }, keys: function (e) {
                                var a = this, t = new d(function (s, i) {
                                    a.ready().then(function () {
                                        v(a._dbInfo, f, function (e, t) {
                                            if (e) return i(e);
                                            try {
                                                var n = t.objectStore(a._dbInfo.storeName), r = n.openCursor(), o = [];
                                                r.onsuccess = function () {
                                                    var e = r.result;
                                                    e ? (o.push(e.key), e.continue()) : s(o)
                                                }, r.onerror = function () {
                                                    i(r.error)
                                                }
                                            } catch (e) {
                                                i(e)
                                            }
                                        })
                                    }).catch(i)
                                });
                                return E(t, e), t
                            }, dropInstance: function (a, e) {
                                e = s.apply(this, arguments);
                                var t, n = this.config();
                                if ((a = "function" != typeof a && a || {}).name || (a.name = a.name || n.name, a.storeName = a.storeName || n.storeName), a.name) {
                                    var r = a.name === n.name && this._dbInfo.db,
                                        o = r ? d.resolve(this._dbInfo.db) : A(a).then(function (e) {
                                            var t = h[a.name], n = t.forages;
                                            t.db = e;
                                            for (var r = 0; r < n.length; r++) n[r]._dbInfo.db = e;
                                            return e
                                        });
                                    t = a.storeName ? o.then(function (e) {
                                        if (e.objectStoreNames.contains(a.storeName)) {
                                            var o = e.version + 1;
                                            C(a);
                                            var r = h[a.name], s = r.forages;
                                            e.close();
                                            for (var t = 0; t < s.length; t++) {
                                                var n = s[t];
                                                n._dbInfo.db = null, n._dbInfo.version = o
                                            }
                                            var i = new d(function (t, n) {
                                                var r = c.open(a.name, o);
                                                r.onerror = function (e) {
                                                    var t = r.result;
                                                    t.close(), n(e)
                                                }, r.onupgradeneeded = function () {
                                                    var e = r.result;
                                                    e.deleteObjectStore(a.storeName)
                                                }, r.onsuccess = function () {
                                                    var e = r.result;
                                                    e.close(), t(e)
                                                }
                                            });
                                            return i.then(function (e) {
                                                r.db = e;
                                                for (var t = 0; t < s.length; t++) {
                                                    var n = s[t];
                                                    n._dbInfo.db = e, S(n._dbInfo)
                                                }
                                            }).catch(function (e) {
                                                throw(T(a, e) || d.resolve()).catch(function () {
                                                }), e
                                            })
                                        }
                                    }) : o.then(function (e) {
                                        C(a);
                                        var r = h[a.name], o = r.forages;
                                        e.close();
                                        for (var t = 0; t < o.length; t++) {
                                            var n = o[t];
                                            n._dbInfo.db = null
                                        }
                                        var s = new d(function (t, n) {
                                            var r = c.deleteDatabase(a.name);
                                            r.onerror = r.onblocked = function (e) {
                                                var t = r.result;
                                                t && t.close(), n(e)
                                            }, r.onsuccess = function () {
                                                var e = r.result;
                                                e && e.close(), t(e)
                                            }
                                        });
                                        return s.then(function (e) {
                                            r.db = e;
                                            for (var t = 0; t < o.length; t++) {
                                                var n = o[t];
                                                S(n._dbInfo)
                                            }
                                        }).catch(function (e) {
                                            throw(T(a, e) || d.resolve()).catch(function () {
                                            }), e
                                        })
                                    })
                                } else t = d.reject("Invalid arguments");
                                return E(t, e), t
                            }
                        }, P = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
                        L = /^~~local_forage_type~([^~]+)~/, U = "__lfsc__:", D = U.length, w = "arbf", b = "blob",
                        Y = D + w.length, x = Object.prototype.toString;

                    function G(e) {
                        var t, n, r, o, s, i = .75 * e.length, a = e.length, c = 0;
                        "=" === e[e.length - 1] && (i--, "=" === e[e.length - 2] && i--);
                        var u = new ArrayBuffer(i), l = new Uint8Array(u);
                        for (t = 0; t < a; t += 4) n = P.indexOf(e[t]), r = P.indexOf(e[t + 1]), o = P.indexOf(e[t + 2]), s = P.indexOf(e[t + 3]), l[c++] = n << 2 | r >> 4, l[c++] = (15 & r) << 4 | o >> 2, l[c++] = (3 & o) << 6 | 63 & s;
                        return u
                    }

                    function B(e) {
                        var t, n = new Uint8Array(e), r = "";
                        for (t = 0; t < n.length; t += 3) r += P[n[t] >> 2], r += P[(3 & n[t]) << 4 | n[t + 1] >> 4], r += P[(15 & n[t + 1]) << 2 | n[t + 2] >> 6], r += P[63 & n[t + 2]];
                        return n.length % 3 == 2 ? r = r.substring(0, r.length - 1) + "=" : n.length % 3 == 1 && (r = r.substring(0, r.length - 2) + "=="), r
                    }

                    var F = {
                        serialize: function (t, n) {
                            var e = "";
                            if (t && (e = x.call(t)), t && ("[object ArrayBuffer]" === e || t.buffer && "[object ArrayBuffer]" === x.call(t.buffer))) {
                                var r, o = U;
                                t instanceof ArrayBuffer ? (r = t, o += w) : (r = t.buffer, "[object Int8Array]" === e ? o += "si08" : "[object Uint8Array]" === e ? o += "ui08" : "[object Uint8ClampedArray]" === e ? o += "uic8" : "[object Int16Array]" === e ? o += "si16" : "[object Uint16Array]" === e ? o += "ur16" : "[object Int32Array]" === e ? o += "si32" : "[object Uint32Array]" === e ? o += "ui32" : "[object Float32Array]" === e ? o += "fl32" : "[object Float64Array]" === e ? o += "fl64" : n(new Error("Failed to get type for BinaryArray"))), n(o + B(r))
                            } else if ("[object Blob]" === e) {
                                var s = new FileReader;
                                s.onload = function () {
                                    var e = "~~local_forage_type~" + t.type + "~" + B(this.result);
                                    n(U + b + e)
                                }, s.readAsArrayBuffer(t)
                            } else try {
                                n(JSON.stringify(t))
                            } catch (e) {
                                n(null, e)
                            }
                        }, deserialize: function (e) {
                            if (e.substring(0, D) !== U) return JSON.parse(e);
                            var t, n = e.substring(Y), r = e.substring(D, Y);
                            if (r === b && L.test(n)) {
                                var o = n.match(L);
                                t = o[1], n = n.substring(o[0].length)
                            }
                            var s = G(n);
                            switch (r) {
                                case w:
                                    return s;
                                case b:
                                    return i([s], {type: t});
                                case"si08":
                                    return new Int8Array(s);
                                case"ui08":
                                    return new Uint8Array(s);
                                case"uic8":
                                    return new Uint8ClampedArray(s);
                                case"si16":
                                    return new Int16Array(s);
                                case"ur16":
                                    return new Uint16Array(s);
                                case"si32":
                                    return new Int32Array(s);
                                case"ui32":
                                    return new Uint32Array(s);
                                case"fl32":
                                    return new Float32Array(s);
                                case"fl64":
                                    return new Float64Array(s);
                                default:
                                    throw new Error("Unkown type: " + r)
                            }
                        }, stringToBuffer: G, bufferToString: B
                    };

                    function K(e, t, n, r) {
                        e.executeSql("CREATE TABLE IF NOT EXISTS " + t.storeName + " (id INTEGER PRIMARY KEY, key unique, value)", [], n, r)
                    }

                    function H(e, r, o, s, i, a) {
                        e.executeSql(o, s, i, function (e, n) {
                            n.code === n.SYNTAX_ERR ? e.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?", [r.storeName], function (e, t) {
                                t.rows.length ? a(e, n) : K(e, r, function () {
                                    e.executeSql(o, s, i, a)
                                }, a)
                            }, a) : a(e, n)
                        }, a)
                    }

                    function k(i, e, a, c) {
                        var u = this;
                        i = l(i);
                        var t = new d(function (o, s) {
                            u.ready().then(function () {
                                void 0 === e && (e = null);
                                var n = e, r = u._dbInfo;
                                r.serializer.serialize(e, function (t, e) {
                                    e ? s(e) : r.db.transaction(function (e) {
                                        H(e, r, "INSERT OR REPLACE INTO " + r.storeName + " (key, value) VALUES (?, ?)", [i, t], function () {
                                            o(n)
                                        }, function (e, t) {
                                            s(t)
                                        })
                                    }, function (e) {
                                        if (e.code === e.QUOTA_ERR) {
                                            if (0 < c) return void o(k.apply(u, [i, n, a, c - 1]));
                                            s(e)
                                        }
                                    })
                                })
                            }).catch(s)
                        });
                        return E(t, a), t
                    }

                    var J = {
                        _driver: "webSQLStorage", _initStorage: function (e) {
                            var r = this, o = {db: null};
                            if (e) for (var t in e) o[t] = "string" != typeof e[t] ? e[t].toString() : e[t];
                            var n = new d(function (t, n) {
                                try {
                                    o.db = openDatabase(o.name, String(o.version), o.description, o.size)
                                } catch (e) {
                                    return n(e)
                                }
                                o.db.transaction(function (e) {
                                    K(e, o, function () {
                                        r._dbInfo = o, t()
                                    }, function (e, t) {
                                        n(t)
                                    })
                                }, n)
                            });
                            return o.serializer = F, n
                        }, _support: "function" == typeof openDatabase, iterate: function (u, e) {
                            var t = this, n = new d(function (c, n) {
                                t.ready().then(function () {
                                    var a = t._dbInfo;
                                    a.db.transaction(function (e) {
                                        H(e, a, "SELECT * FROM " + a.storeName, [], function (e, t) {
                                            for (var n = t.rows, r = n.length, o = 0; o < r; o++) {
                                                var s = n.item(o), i = s.value;
                                                if (i && (i = a.serializer.deserialize(i)), void 0 !== (i = u(i, s.key, o + 1))) return void c(i)
                                            }
                                            c()
                                        }, function (e, t) {
                                            n(t)
                                        })
                                    })
                                }).catch(n)
                            });
                            return E(n, e), n
                        }, getItem: function (t, e) {
                            var s = this;
                            t = l(t);
                            var n = new d(function (o, n) {
                                s.ready().then(function () {
                                    var r = s._dbInfo;
                                    r.db.transaction(function (e) {
                                        H(e, r, "SELECT * FROM " + r.storeName + " WHERE key = ? LIMIT 1", [t], function (e, t) {
                                            var n = t.rows.length ? t.rows.item(0).value : null;
                                            n && (n = r.serializer.deserialize(n)), o(n)
                                        }, function (e, t) {
                                            n(t)
                                        })
                                    })
                                }).catch(n)
                            });
                            return E(n, e), n
                        }, setItem: function (e, t, n) {
                            return k.apply(this, [e, t, n, 1])
                        }, removeItem: function (o, e) {
                            var s = this;
                            o = l(o);
                            var t = new d(function (n, r) {
                                s.ready().then(function () {
                                    var t = s._dbInfo;
                                    t.db.transaction(function (e) {
                                        H(e, t, "DELETE FROM " + t.storeName + " WHERE key = ?", [o], function () {
                                            n()
                                        }, function (e, t) {
                                            r(t)
                                        })
                                    })
                                }).catch(r)
                            });
                            return E(t, e), t
                        }, clear: function (e) {
                            var o = this, t = new d(function (n, r) {
                                o.ready().then(function () {
                                    var t = o._dbInfo;
                                    t.db.transaction(function (e) {
                                        H(e, t, "DELETE FROM " + t.storeName, [], function () {
                                            n()
                                        }, function (e, t) {
                                            r(t)
                                        })
                                    })
                                }).catch(r)
                            });
                            return E(t, e), t
                        }, length: function (e) {
                            var o = this, t = new d(function (r, n) {
                                o.ready().then(function () {
                                    var t = o._dbInfo;
                                    t.db.transaction(function (e) {
                                        H(e, t, "SELECT COUNT(key) as c FROM " + t.storeName, [], function (e, t) {
                                            var n = t.rows.item(0).c;
                                            r(n)
                                        }, function (e, t) {
                                            n(t)
                                        })
                                    })
                                }).catch(n)
                            });
                            return E(t, e), t
                        }, key: function (o, e) {
                            var s = this, t = new d(function (r, n) {
                                s.ready().then(function () {
                                    var t = s._dbInfo;
                                    t.db.transaction(function (e) {
                                        H(e, t, "SELECT key FROM " + t.storeName + " WHERE id = ? LIMIT 1", [o + 1], function (e, t) {
                                            var n = t.rows.length ? t.rows.item(0).key : null;
                                            r(n)
                                        }, function (e, t) {
                                            n(t)
                                        })
                                    })
                                }).catch(n)
                            });
                            return E(t, e), t
                        }, keys: function (e) {
                            var r = this, t = new d(function (o, n) {
                                r.ready().then(function () {
                                    var t = r._dbInfo;
                                    t.db.transaction(function (e) {
                                        H(e, t, "SELECT key FROM " + t.storeName, [], function (e, t) {
                                            for (var n = [], r = 0; r < t.rows.length; r++) n.push(t.rows.item(r).key);
                                            o(n)
                                        }, function (e, t) {
                                            n(t)
                                        })
                                    })
                                }).catch(n)
                            });
                            return E(t, e), t
                        }, dropInstance: function (n, e) {
                            e = s.apply(this, arguments);
                            var r = this.config();
                            (n = "function" != typeof n && n || {}).name || (n.name = n.name || r.name, n.storeName = n.storeName || r.storeName);
                            var t, o = this;
                            return E(t = n.name ? new d(function (e) {
                                var t, s;
                                t = n.name === r.name ? o._dbInfo.db : openDatabase(n.name, "", "", 0), n.storeName ? e({
                                    db: t,
                                    storeNames: [n.storeName]
                                }) : e((s = t, new d(function (o, n) {
                                    s.transaction(function (e) {
                                        e.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function (e, t) {
                                            for (var n = [], r = 0; r < t.rows.length; r++) n.push(t.rows.item(r).name);
                                            o({db: s, storeNames: n})
                                        }, function (e, t) {
                                            n(t)
                                        })
                                    }, function (e) {
                                        n(e)
                                    })
                                })))
                            }).then(function (a) {
                                return new d(function (s, i) {
                                    a.db.transaction(function (r) {
                                        function e(t) {
                                            return new d(function (e, n) {
                                                r.executeSql("DROP TABLE IF EXISTS " + t, [], function () {
                                                    e()
                                                }, function (e, t) {
                                                    n(t)
                                                })
                                            })
                                        }

                                        for (var t = [], n = 0, o = a.storeNames.length; n < o; n++) t.push(e(a.storeNames[n]));
                                        d.all(t).then(function () {
                                            s()
                                        }).catch(function (e) {
                                            i(e)
                                        })
                                    }, function (e) {
                                        i(e)
                                    })
                                })
                            }) : d.reject("Invalid arguments"), e), t
                        }
                    };

                    function V(e, t) {
                        var n = e.name + "/";
                        return e.storeName !== t.storeName && (n += e.storeName + "/"), n
                    }

                    function j() {
                        return !function () {
                            var e = "_localforage_support_test";
                            try {
                                return localStorage.setItem(e, !0), localStorage.removeItem(e), !1
                            } catch (e) {
                                return !0
                            }
                        }() || 0 < localStorage.length
                    }

                    var X = {
                            _driver: "localStorageWrapper", _initStorage: function (e) {
                                var t = {};
                                if (e) for (var n in e) t[n] = e[n];
                                return t.keyPrefix = V(e, this._defaultConfig), j() ? ((this._dbInfo = t).serializer = F, d.resolve()) : d.reject()
                            }, _support: function () {
                                try {
                                    return "undefined" != typeof localStorage && "setItem" in localStorage && !!localStorage.setItem
                                } catch (e) {
                                    return !1
                                }
                            }(), iterate: function (c, e) {
                                var u = this, t = u.ready().then(function () {
                                    for (var e = u._dbInfo, t = e.keyPrefix, n = t.length, r = localStorage.length, o = 1, s = 0; s < r; s++) {
                                        var i = localStorage.key(s);
                                        if (0 === i.indexOf(t)) {
                                            var a = localStorage.getItem(i);
                                            if (a && (a = e.serializer.deserialize(a)), void 0 !== (a = c(a, i.substring(n), o++))) return a
                                        }
                                    }
                                });
                                return E(t, e), t
                            }, getItem: function (n, e) {
                                var r = this;
                                n = l(n);
                                var t = r.ready().then(function () {
                                    var e = r._dbInfo, t = localStorage.getItem(e.keyPrefix + n);
                                    return t && (t = e.serializer.deserialize(t)), t
                                });
                                return E(t, e), t
                            }, setItem: function (i, e, t) {
                                var a = this;
                                i = l(i);
                                var n = a.ready().then(function () {
                                    void 0 === e && (e = null);
                                    var s = e;
                                    return new d(function (n, r) {
                                        var o = a._dbInfo;
                                        o.serializer.serialize(e, function (e, t) {
                                            if (t) r(t); else try {
                                                localStorage.setItem(o.keyPrefix + i, e), n(s)
                                            } catch (e) {
                                                "QuotaExceededError" !== e.name && "NS_ERROR_DOM_QUOTA_REACHED" !== e.name || r(e), r(e)
                                            }
                                        })
                                    })
                                });
                                return E(n, t), n
                            }, removeItem: function (t, e) {
                                var n = this;
                                t = l(t);
                                var r = n.ready().then(function () {
                                    var e = n._dbInfo;
                                    localStorage.removeItem(e.keyPrefix + t)
                                });
                                return E(r, e), r
                            }, clear: function (e) {
                                var r = this, t = r.ready().then(function () {
                                    for (var e = r._dbInfo.keyPrefix, t = localStorage.length - 1; 0 <= t; t--) {
                                        var n = localStorage.key(t);
                                        0 === n.indexOf(e) && localStorage.removeItem(n)
                                    }
                                });
                                return E(t, e), t
                            }, length: function (e) {
                                var t = this.keys().then(function (e) {
                                    return e.length
                                });
                                return E(t, e), t
                            }, key: function (n, e) {
                                var r = this, t = r.ready().then(function () {
                                    var t, e = r._dbInfo;
                                    try {
                                        t = localStorage.key(n)
                                    } catch (e) {
                                        t = null
                                    }
                                    return t && (t = t.substring(e.keyPrefix.length)), t
                                });
                                return E(t, e), t
                            }, keys: function (e) {
                                var s = this, t = s.ready().then(function () {
                                    for (var e = s._dbInfo, t = localStorage.length, n = [], r = 0; r < t; r++) {
                                        var o = localStorage.key(r);
                                        0 === o.indexOf(e.keyPrefix) && n.push(o.substring(e.keyPrefix.length))
                                    }
                                    return n
                                });
                                return E(t, e), t
                            }, dropInstance: function (t, e) {
                                if (e = s.apply(this, arguments), !(t = "function" != typeof t && t || {}).name) {
                                    var n = this.config();
                                    t.name = t.name || n.name, t.storeName = t.storeName || n.storeName
                                }
                                var r, o = this;
                                return E(r = t.name ? new d(function (e) {
                                    t.storeName ? e(V(t, o._defaultConfig)) : e(t.name + "/")
                                }).then(function (e) {
                                    for (var t = localStorage.length - 1; 0 <= t; t--) {
                                        var n = localStorage.key(t);
                                        0 === n.indexOf(e) && localStorage.removeItem(n)
                                    }
                                }) : d.reject("Invalid arguments"), e), r
                            }
                        }, q = function (e, t) {
                            for (var n = e.length, r = 0; r < n;) {
                                if ((o = e[r]) === (s = t) || "number" == typeof o && "number" == typeof s && isNaN(o) && isNaN(s)) return !0;
                                r++
                            }
                            var o, s;
                            return !1
                        }, W = Array.isArray || function (e) {
                            return "[object Array]" === Object.prototype.toString.call(e)
                        }, $ = {}, Q = {}, z = {INDEXEDDB: M, WEBSQL: J, LOCALSTORAGE: X},
                        Z = [z.INDEXEDDB._driver, z.WEBSQL._driver, z.LOCALSTORAGE._driver], ee = ["dropInstance"],
                        te = ["clear", "getItem", "iterate", "key", "keys", "length", "removeItem", "setItem"].concat(ee),
                        ne = {
                            description: "",
                            driver: Z.slice(),
                            name: "localforage",
                            size: 4980736,
                            storeName: "keyvaluepairs",
                            version: 1
                        };

                    function re(t, n) {
                        t[n] = function () {
                            var e = arguments;
                            return t.ready().then(function () {
                                return t[n].apply(t, e)
                            })
                        }
                    }

                    function oe() {
                        for (var e = 1; e < arguments.length; e++) {
                            var t = arguments[e];
                            if (t) for (var n in t) t.hasOwnProperty(n) && (W(t[n]) ? arguments[0][n] = t[n].slice() : arguments[0][n] = t[n])
                        }
                        return arguments[0]
                    }

                    var se = function () {
                        function o(e) {
                            for (var t in function (e, t) {
                                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
                            }(this, o), z) if (z.hasOwnProperty(t)) {
                                var n = z[t], r = n._driver;
                                this[t] = r, $[r] || this.defineDriver(n)
                            }
                            this._defaultConfig = oe({}, ne), this._config = oe({}, this._defaultConfig, e), this._driverSet = null, this._initDriver = null, this._ready = !1, this._dbInfo = null, this._wrapLibraryMethodsWithReady(), this.setDriver(this._config.driver).catch(function () {
                            })
                        }

                        return o.prototype.config = function (e) {
                            if ("object" !== (void 0 === e ? "undefined" : r(e))) return "string" == typeof e ? this._config[e] : this._config;
                            if (this._ready) return new Error("Can't call config() after localforage has been used.");
                            for (var t in e) {
                                if ("storeName" === t && (e[t] = e[t].replace(/\W/g, "_")), "version" === t && "number" != typeof e[t]) return new Error("Database version must be a number.");
                                this._config[t] = e[t]
                            }
                            return !("driver" in e && e.driver) || this.setDriver(this._config.driver)
                        }, o.prototype.defineDriver = function (l, e, t) {
                            var n = new d(function (t, n) {
                                try {
                                    var r = l._driver,
                                        e = new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");
                                    if (!l._driver) return void n(e);
                                    for (var o = te.concat("_initStorage"), s = 0, i = o.length; s < i; s++) {
                                        var a = o[s], c = !q(ee, a);
                                        if ((c || l[a]) && "function" != typeof l[a]) return void n(e)
                                    }
                                    !function () {
                                        for (var e = function (n) {
                                            return function () {
                                                var e = new Error("Method " + n + " is not implemented by the current driver"),
                                                    t = d.reject(e);
                                                return E(t, arguments[arguments.length - 1]), t
                                            }
                                        }, t = 0, n = ee.length; t < n; t++) {
                                            var r = ee[t];
                                            l[r] || (l[r] = e(r))
                                        }
                                    }();
                                    var u = function (e) {
                                        $[r], $[r] = l, Q[r] = e, t()
                                    };
                                    "_support" in l ? l._support && "function" == typeof l._support ? l._support().then(u, n) : u(!!l._support) : u(!0)
                                } catch (e) {
                                    n(e)
                                }
                            });
                            return u(n, e, t), n
                        }, o.prototype.driver = function () {
                            return this._driver || null
                        }, o.prototype.getDriver = function (e, t, n) {
                            var r = $[e] ? d.resolve($[e]) : d.reject(new Error("Driver not found."));
                            return u(r, t, n), r
                        }, o.prototype.getSerializer = function (e) {
                            var t = d.resolve(F);
                            return u(t, e), t
                        }, o.prototype.ready = function (e) {
                            var t = this, n = t._driverSet.then(function () {
                                return null === t._ready && (t._ready = t._initDriver()), t._ready
                            });
                            return u(n, e, e), n
                        }, o.prototype.setDriver = function (e, t, n) {
                            var s = this;
                            W(e) || (e = [e]);
                            var r = this._getSupportedDrivers(e);

                            function i() {
                                s._config.driver = s.driver()
                            }

                            function a(e) {
                                return s._extend(e), i(), s._ready = s._initStorage(s._config), s._ready
                            }

                            var o = null !== this._driverSet ? this._driverSet.catch(function () {
                                return d.resolve()
                            }) : d.resolve();
                            return this._driverSet = o.then(function () {
                                var e = r[0];
                                return s._dbInfo = null, s._ready = null, s.getDriver(e).then(function (e) {
                                    var o;
                                    s._driver = e._driver, i(), s._wrapLibraryMethodsWithReady(), s._initDriver = (o = r, function () {
                                        var n = 0;

                                        function r() {
                                            for (; n < o.length;) {
                                                var e = o[n];
                                                return n++, s._dbInfo = null, s._ready = null, s.getDriver(e).then(a).catch(r)
                                            }
                                            i();
                                            var t = new Error("No available storage method found.");
                                            return s._driverSet = d.reject(t), s._driverSet
                                        }

                                        return r()
                                    })
                                })
                            }).catch(function () {
                                i();
                                var e = new Error("No available storage method found.");
                                return s._driverSet = d.reject(e), s._driverSet
                            }), u(this._driverSet, t, n), this._driverSet
                        }, o.prototype.supports = function (e) {
                            return !!Q[e]
                        }, o.prototype._extend = function (e) {
                            oe(this, e)
                        }, o.prototype._getSupportedDrivers = function (e) {
                            for (var t = [], n = 0, r = e.length; n < r; n++) {
                                var o = e[n];
                                this.supports(o) && t.push(o)
                            }
                            return t
                        }, o.prototype._wrapLibraryMethodsWithReady = function () {
                            for (var e = 0, t = te.length; e < t; e++) re(this, te[e])
                        }, o.prototype.createInstance = function (e) {
                            return new o(e)
                        }, o
                    }(), ie = new se;
                    t.exports = ie
                }, {3: 3}]
            }, {}, [4])(4)
        }).call(this, n(26))
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = function () {
            function e(e, t, n, r) {
                this.receiverId = e, this.type = t, this.receiverType = n, this.category = r
            }

            return e.prototype.getId = function () {
                return this.id
            }, e.prototype.setId = function (e) {
                this.id = e
            }, e.prototype.getConversationId = function () {
                return this.conversationId
            }, e.prototype.setConversationId = function (e) {
                this.conversationId = e
            }, e.prototype.getMuid = function () {
                return this.muid
            }, e.prototype.setMuid = function (e) {
                this.muid = e
            }, e.prototype.getSender = function () {
                return this.sender
            }, e.prototype.setSender = function (e) {
                this.sender = e
            }, e.prototype.getReceiver = function () {
                return this.receiver
            }, e.prototype.setReceiver = function (e) {
                this.receiver = e
            }, e.prototype.getReceiverId = function () {
                return this.receiverId
            }, e.prototype.setReceiverId = function (e) {
                this.receiverId = e
            }, e.prototype.getType = function () {
                return this.type
            }, e.prototype.setType = function (e) {
                this.type = e
            }, e.prototype.get = function () {
                return this.id
            }, e.prototype.setReceiverType = function (e) {
                this.receiverType = e
            }, e.prototype.getReceiverType = function () {
                return this.receiverType
            }, e.prototype.setSentAt = function (e) {
                this.sentAt = e
            }, e.prototype.getSentAt = function () {
                return this.sentAt
            }, e.prototype.getStatus = function () {
                return this.status
            }, e.prototype.setStatus = function (e) {
                this.status = e
            }, e.prototype.getDeliveredAt = function () {
                return this.deliveredAt
            }, e.prototype.setDeliveredAt = function (e) {
                this.deliveredAt = e
            }, e.prototype.getDeliveredToMeAt = function () {
                return this.deliveredToMeAt
            }, e.prototype.setDeliveredToMeAt = function (e) {
                this.deliveredToMeAt = e
            }, e.prototype.getReadAt = function () {
                return this.readAt
            }, e.prototype.setReadAt = function (e) {
                this.readAt = e
            }, e.prototype.getReadByMeAt = function () {
                return this.readByMeAt
            }, e.prototype.setReadByMeAt = function (e) {
                this.readByMeAt = e
            }, e.prototype.getCategory = function () {
                return this.category
            }, e.prototype.setCategory = function (e) {
                this.category = e
            }, e.prototype.setEditedAt = function (e) {
                this.editedAt = e
            }, e.prototype.getEditedAt = function () {
                return this.editedAt
            }, e.prototype.setEditedBy = function (e) {
                this.editedBy = e
            }, e.prototype.getEditedBy = function () {
                return this.editedBy
            }, e.prototype.setDeletedAt = function (e) {
                this.deletedAt = e
            }, e.prototype.getDeletedAt = function () {
                return this.deletedAt
            }, e.prototype.setDeletedBy = function (e) {
                this.deletedBy = e
            }, e.prototype.getDeletedBy = function () {
                return this.deletedBy
            }, e
        }();
        t.BaseMessage = r
    }, function (e, t, n) {
        "use strict";
        var r, o = this && this.__extends || (r = function (e, t) {
            return (r = Object.setPrototypeOf || {__proto__: []} instanceof Array && function (e, t) {
                e.__proto__ = t
            } || function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n])
            })(e, t)
        }, function (e, t) {
            function n() {
                this.constructor = e
            }

            r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
        }), i = this && this.__awaiter || function (s, i, a, c) {
            return new (a || (a = Promise))(function (e, t) {
                function n(e) {
                    try {
                        o(c.next(e))
                    } catch (e) {
                        t(e)
                    }
                }

                function r(e) {
                    try {
                        o(c.throw(e))
                    } catch (e) {
                        t(e)
                    }
                }

                function o(t) {
                    t.done ? e(t.value) : new a(function (e) {
                        e(t.value)
                    }).then(n, r)
                }

                o((c = c.apply(s, i || [])).next())
            })
        }, u = this && this.__generator || function (n, r) {
            var o, s, i, e, a = {
                label: 0, sent: function () {
                    if (1 & i[0]) throw i[1];
                    return i[1]
                }, trys: [], ops: []
            };
            return e = {
                next: t(0),
                throw: t(1),
                return: t(2)
            }, "function" == typeof Symbol && (e[Symbol.iterator] = function () {
                return this
            }), e;

            function t(t) {
                return function (e) {
                    return function (t) {
                        if (o) throw new TypeError("Generator is already executing.");
                        for (; a;) try {
                            if (o = 1, s && (i = 2 & t[0] ? s.return : t[0] ? s.throw || ((i = s.return) && i.call(s), 0) : s.next) && !(i = i.call(s, t[1])).done) return i;
                            switch (s = 0, i && (t = [2 & t[0], i.value]), t[0]) {
                                case 0:
                                case 1:
                                    i = t;
                                    break;
                                case 4:
                                    return a.label++, {value: t[1], done: !1};
                                case 5:
                                    a.label++, s = t[1], t = [0];
                                    continue;
                                case 7:
                                    t = a.ops.pop(), a.trys.pop();
                                    continue;
                                default:
                                    if (!(i = 0 < (i = a.trys).length && i[i.length - 1]) && (6 === t[0] || 2 === t[0])) {
                                        a = 0;
                                        continue
                                    }
                                    if (3 === t[0] && (!i || t[1] > i[0] && t[1] < i[3])) {
                                        a.label = t[1];
                                        break
                                    }
                                    if (6 === t[0] && a.label < i[1]) {
                                        a.label = i[1], i = t;
                                        break
                                    }
                                    if (i && a.label < i[2]) {
                                        a.label = i[2], a.ops.push(t);
                                        break
                                    }
                                    i[2] && a.ops.pop(), a.trys.pop();
                                    continue
                            }
                            t = r.call(n, a)
                        } catch (e) {
                            t = [6, e], s = 0
                        } finally {
                            o = i = 0
                        }
                        if (5 & t[0]) throw t[1];
                        return {value: t[0] ? t[1] : void 0, done: !0}
                    }([t, e])
                }
            }
        };
        t.__esModule = !0;
        var l = n(1), f = n(41), d = n(3), s = n(20), E = n(7), h = n(0), p = n(28), g = (n(45), n(46), n(22)),
            _ = n(10), a = n(47), C = n(23), S = n(29), T = n(9), m = n(30), A = n(24), I = n(31), N = n(25), R = n(8),
            y = n(33), O = n(2);
        f.Strophe.addConnectionPlugin("pubsub", {
            _connection: null, init: function (e) {
                this._connection = e, f.Strophe.addNamespace("PUBSUB", "http://jabber.org/protocol/pubsub"), f.Strophe.addNamespace("PUBSUB_SUBSCRIBE_OPTIONS", f.Strophe.NS.PUBSUB + "#subscribe_options"), f.Strophe.addNamespace("PUBSUB_ERRORS", f.Strophe.NS.PUBSUB + "#errors"), f.Strophe.addNamespace("PUBSUB_EVENT", f.Strophe.NS.PUBSUB + "#event"), f.Strophe.addNamespace("PUBSUB_OWNER", f.Strophe.NS.PUBSUB + "#owner"), f.Strophe.addNamespace("PUBSUB_AUTO_CREATE", f.Strophe.NS.PUBSUB + "#auto-create"), f.Strophe.addNamespace("PUBSUB_PUBLISH_OPTIONS", f.Strophe.NS.PUBSUB + "#publish-options"), f.Strophe.addNamespace("PUBSUB_NODE_CONFIG", f.Strophe.NS.PUBSUB + "#node_config"), f.Strophe.addNamespace("PUBSUB_CREATE_AND_CONFIGURE", f.Strophe.NS.PUBSUB + "#create-and-configure"), f.Strophe.addNamespace("PUBSUB_SUBSCRIBE_AUTHORIZATION", f.Strophe.NS.PUBSUB + "#subscribe_authorization"), f.Strophe.addNamespace("PUBSUB_GET_PENDING", f.Strophe.NS.PUBSUB + "#get-pending"), f.Strophe.addNamespace("PUBSUB_MANAGE_SUBSCRIPTIONS", f.Strophe.NS.PUBSUB + "#manage-subscriptions"), f.Strophe.addNamespace("PUBSUB_META_DATA", f.Strophe.NS.PUBSUB + "#meta-data")
            }, createNode: function (e, t, n, r, o) {
                var s = this._connection.getUniqueId("pubsubcreatenode"),
                    i = f.$iq({from: e, to: t, type: "set", id: s}), a = f.Strophe.xmlElement("configure", []),
                    c = f.Strophe.xmlElement("x", [["xmlns", "jabber:x:data"]]),
                    u = f.Strophe.xmlElement("field", [["var", "FORM_TYPE"], ["type", "hidden"]]),
                    l = f.Strophe.xmlElement("value", []),
                    d = f.Strophe.xmlTextNode(f.Strophe.NS.PUBSUB + "#node_config");
                for (var E in l.appendChild(d), u.appendChild(l), c.appendChild(u), r) {
                    var h = r[E];
                    c.appendChild(h)
                }
                return r.length && 0 != r.length && a.appendChild(c), i.c("pubsub", {xmlns: f.Strophe.NS.PUBSUB}).c("create", {node: n}).up().cnode(a), this._connection.addHandler(o, null, "iq", null, s, null), this._connection.send(i.tree()), s
            }, subscribe: function (e, t, n, r, o, s) {
                var i = this._connection.getUniqueId("subscribenode"), a = f.Strophe.xmlElement("options", []),
                    c = f.Strophe.xmlElement("x", [["xmlns", "jabber:x:data"]]),
                    u = f.Strophe.xmlElement("field", [["var", "FORM_TYPE"], ["type", "hidden"]]),
                    l = f.Strophe.xmlElement("value", []),
                    d = f.Strophe.xmlTextNode(f.Strophe.NS.PUBSUB_SUBSCRIBE_OPTIONS);
                l.appendChild(d), u.appendChild(l), c.appendChild(u);
                var E = f.$iq({from: e, to: t, type: "set", id: i});
                if (r && r.length && 0 !== r.length) {
                    for (var h = 0; h < r.length; h++) {
                        var p = r[h];
                        c.appendChild(p)
                    }
                    a.appendChild(c), E.c("pubsub", {xmlns: f.Strophe.NS.PUBSUB}).c("subscribe", {
                        node: n,
                        jid: e
                    }).up().cnode(a)
                } else E.c("pubsub", {xmlns: f.Strophe.NS.PUBSUB}).c("subscribe", {node: n, jid: e});
                return this._connection.addHandler(s, null, "iq", null, i, null), this._connection.addHandler(o, null, "message", null, null, null), this._connection.send(E.tree()), i
            }, unsubscribe: function (e, t, n, r) {
                var o = this._connection.getUniqueId("unsubscribenode"),
                    s = f.$iq({from: e, to: t, type: "set", id: o});
                return s.c("pubsub", {xmlns: f.Strophe.NS.PUBSUB}).c("unsubscribe", {
                    node: n,
                    jid: e
                }), this._connection.addHandler(r, null, "iq", null, o, null), this._connection.send(s.tree()), o
            }, publish: function (e, t, n, r, o) {
                var s = this._connection.getUniqueId("publishnode"),
                    i = f.Strophe.xmlElement("publish", [["node", n], ["jid", e]]);
                for (var a in r) {
                    var c = f.Strophe.xmlElement("item", []), u = f.Strophe.xmlElement("entry", []),
                        l = f.Strophe.xmlTextNode(r[a]);
                    u.appendChild(l), c.appendChild(u), i.appendChild(c)
                }
                var d = f.$iq({from: e, to: t, type: "set", id: s});
                return d.c("pubsub", {xmlns: f.Strophe.NS.PUBSUB}).cnode(i), this._connection.addHandler(o, null, "iq", null, s, null), this._connection.send(d.tree()), s
            }, items: function (e, t, n, r, o) {
                var s = f.$iq({from: e, to: t, type: "get"});
                return s.c("pubsub", {xmlns: f.Strophe.NS.PUBSUB}).c("items", {node: n}), this._connection.sendIQ(s.tree(), r, o)
            }
        });
        var c = function () {
            function c() {
                this.messageHandlers = [], this.XMPPConnectionHandlers = [], this.userHandlers = [], this.callHandlers = [], this.groupHandlers = [], this.joinedGroups = [], this.iqHandlers = []
            }

            return c.getInstance = function () {
                try {
                    return null != this.xMPPConnectionHelper && null != this.xMPPConnectionHelper || (this.xMPPConnectionHelper = new c), this.xMPPConnectionHelper
                } catch (e) {
                    l.Logger.error("Error in getInstance", e)
                }
            }, c.prototype.XMPPConnect = function (e, r) {
                var o = this, s = "wss://", i = "/ws/";
                return e && (s = "https://", i = "/http-bind/"), new Promise(function (t, n) {
                    try {
                        l.isFalsy(r) && (r = e ? c.XMPP_BIND_URL_HTTPS : c.XMPP_BIND_URL_WS), T.LocalStorage.getInstance().get(h.APP_SETTINGS.APP_SETTINGS).then(function (e) {
                            l.isFalsy(e) ? l.getAppSettings().then(function (e) {
                                c.XMPP_BIND_URL = s + e[h.APP_SETTINGS.KEYS.CHAT_HOST] + ":" + e[h.APP_SETTINGS.KEYS.CHAT_HTTPS_BIND_PORT] + i, o.connection = new f.Strophe.Connection(c.XMPP_BIND_URL), t(!0)
                            }) : (c.XMPP_BIND_URL = s + e[h.APP_SETTINGS.KEYS.CHAT_HOST] + ":" + e[h.APP_SETTINGS.KEYS.CHAT_HTTPS_BIND_PORT] + i, o.connection = new f.Strophe.Connection(c.XMPP_BIND_URL), t(!0))
                        })
                    } catch (e) {
                        n(new O.CometChatException(e))
                    }
                })
            }, c.prototype.XMPPDisconnect = function () {
                try {
                    this.connection ? (this.connection.flush(), this.connection.disconnect()) : l.Logger.info("XMPPPHelper", "No connection object found")
                } catch (e) {
                    l.Logger.error("XMPPHelper: XMPPDisconnect", e)
                }
            }, c.prototype.XMMPLogin = function (t, n, e, r) {
                var o = this;
                void 0 === n && (n = h.XMPP.deafult_password);
                try {
                    this.XMPPConnect(e).then(function (e) {
                        o.connection.connected ? r(f.Strophe.Status.CONNECTED) : T.LocalStorage.getInstance().get(h.APP_SETTINGS.APP_SETTINGS).then(function (e) {
                            l.isFalsy(e) ? l.getAppSettings().then(function (e) {
                                o.perfomAfterConnection(t, n, r, e[h.APP_SETTINGS.KEYS.CHAT_HOST])
                            }) : o.perfomAfterConnection(t, n, r, e[h.APP_SETTINGS.KEYS.CHAT_HOST])
                        })
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: XMPPLogin", e)
                }
            }, c.prototype.getPresenceInfo = function (n, t) {
                var r = this;
                try {
                    var e = "somename" + (new Date).getTime();
                    this.addIqHandler(e, function (e) {
                        t(e)
                    }), l.getAppSettings().then(function (e) {
                        var t = f.$iq({
                            from: r.connection.jid,
                            id: "CC^COMETCHAT-PRESENCE",
                            type: "get",
                            to: e[h.APP_SETTINGS.KEYS.CHAT_HOST]
                        }).c("query", {xmlns: "jabber:iq:presencereq", action: "presence"}).t(JSON.stringify(n));
                        r.connection.send(t)
                    }, function (e) {
                        l.Logger.error("XMPPHelper: getPresenceInfo", e);
                        var t = f.$iq({
                            from: r.connection.jid,
                            id: "CC^COMETCHAT-PRESENCE",
                            type: "get",
                            to: h.XMPP.host
                        }).c("query", {xmlns: "jabber:iq:presencereq", action: "presence"}).t(JSON.stringify(n));
                        r.connection.send(t)
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: getPresenceInfo", e)
                }
            }, c.prototype.sendTypingStarted = function (e, t, n) {
                void 0 === t && (t = h.XMPP.CONVERSATION.TYPE.CHAT);
                try {
                    if (e) {
                        switch (t) {
                            case h.XMPP.CONVERSATION.TYPE.CHAT:
                            case h.XMPP.CONVERSATION.TYPE.GROUP_CHAT:
                        }
                        this.connection.chatstates.sendComposing(e, t, n)
                    }
                } catch (e) {
                    l.Logger.error("XMPPHelper: sendTypingStarted", e)
                }
            }, c.prototype.sendTypingPaused = function (e, t, n) {
                void 0 === t && (t = h.XMPP.CONVERSATION.TYPE.CHAT);
                try {
                    if (e) {
                        switch (t) {
                            case h.XMPP.CONVERSATION.TYPE.CHAT:
                            case h.XMPP.CONVERSATION.TYPE.GROUP_CHAT:
                        }
                        this.connection.chatstates.sendPaused(e, t, n)
                    }
                } catch (e) {
                    l.Logger.error("XMPPHelper: sendTypingPaused", e)
                }
            }, c.prototype.addMessageEventListener = function (t, e) {
                try {
                    this.messageHandlers = this.messageHandlers.filter(function (e) {
                        return e._name != t
                    }), this.messageHandlers = this.messageHandlers.concat([new s.MessageListener(t, e)])
                } catch (e) {
                    l.Logger.error("XMPPHelper: addMessageEventListener", e)
                }
            }, c.prototype.removeMessageEventListener = function (t) {
                try {
                    this.messageHandlers = this.messageHandlers.filter(function (e) {
                        return e._name !== t
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: removeMessageEventListener", e)
                }
            }, c.prototype.addXMPPConnectionEventListener = function (t, e) {
                try {
                    this.XMPPConnectionHandlers = this.XMPPConnectionHandlers.filter(function (e) {
                        return e._name != t
                    }), this.XMPPConnectionHandlers = this.XMPPConnectionHandlers.concat([new P(t, e)])
                } catch (e) {
                    l.Logger.error("XMPPHelper: addXMPPConnectionEventListener", e)
                }
            }, c.prototype.removeXMPPConnectionEventListener = function (t) {
                try {
                    this.XMPPConnectionHandlers = this.XMPPConnectionHandlers.filter(function (e) {
                        return e._name !== t
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: removeXMPPConnectionEventListener", e)
                }
            }, c.prototype.addCallEventListener = function (t, e) {
                try {
                    this.callHandlers = this.callHandlers.filter(function (e) {
                        return e._name != t
                    }), this.callHandlers = this.callHandlers.concat([new s.CallListener(t, e)])
                } catch (e) {
                    l.Logger.error("XMPPHelper: addCallEventListener", e)
                }
            }, c.prototype.removeCallEventListener = function (t) {
                try {
                    this.callHandlers = this.callHandlers.filter(function (e) {
                        return e._name !== t
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: removeCallEventListener", e)
                }
            }, c.prototype.addUserEventListener = function (t, e) {
                try {
                    this.userHandlers = this.userHandlers.filter(function (e) {
                        return e._name != t
                    }), this.userHandlers = this.userHandlers.concat([new s.UserListener(t, e)])
                } catch (e) {
                    l.Logger.error("XMPPHelper: addUserEventListener", e)
                }
            }, c.prototype.removeUserEventListener = function (t) {
                try {
                    this.userHandlers = this.userHandlers.filter(function (e) {
                        return e._name !== t
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: removeUserEventListener", e)
                }
            }, c.prototype.addGroupEventListener = function (t, e) {
                try {
                    this.groupHandlers = this.groupHandlers.filter(function (e) {
                        return e._name != t
                    }), this.groupHandlers = this.groupHandlers.concat([new s.GroupListener(t, e)])
                } catch (e) {
                    l.Logger.error("XMPPHelper: addGroupEventListener", e)
                }
            }, c.prototype.removeGroupEventListener = function (t) {
                try {
                    this.groupHandlers = this.groupHandlers.filter(function (e) {
                        return e._name !== t
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: removeGroupEventListener", e)
                }
            }, c.prototype.addIqHandler = function (e, t) {
                try {
                    this.iqHandlers = this.iqHandlers.concat([new s.Listener(e, t)])
                } catch (e) {
                    l.Logger.error("XMPPHelper: addIqHandler", e)
                }
            }, c.prototype.removeIqHandler = function (t) {
                try {
                    this.iqHandlers = this.iqHandlers.filter(function (e) {
                        return e._name !== t
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: removeIqHandler", e)
                }
            }, c.prototype.joinMuc = function (t) {
                var n = this;
                try {
                    l.getAppSettings().then(function (e) {
                        n.connection.muc.join(l.format(h.XMPP.muc_jid_string, d.CometChat.getAppId(), t.getGuid(), d.CometChat.getAppId(), e[h.APP_SETTINGS.KEYS.CHAT_HOST]), n.connection.jid, null, null, null, null, 0)
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: joinMuc", e)
                }
            }, c.prototype.leaveMuc = function (t) {
                var n = this;
                try {
                    l.getAppSettings().then(function (e) {
                        n.connection.muc.leave(l.format(h.XMPP.muc_jid_string, d.CometChat.getAppId(), t, d.CometChat.getAppId(), e[h.APP_SETTINGS.KEYS.CHAT_HOST]), n.connection.jid)
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: leaveMuc", e)
                }
            }, c.prototype.getUsersVCard = function (e, t) {
                var n = this;
                try {
                    _.getJidFromUid(e).then(function (e) {
                        n.connection.vcard.get(function (e) {
                            t(a.VCardController.transformVCard(e))
                        }, e)
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: getUsersVCard", e)
                }
            }, c.prototype.trigerMessageHandler = function (n, e) {
                if (l.isFalsy(e)) n = E.MessageController.trasformJSONMessge(n), this.messageHandlers.map(function (e) {
                    try {
                        if (e._eventListener) if (n instanceof g.Action) ; else if (n instanceof C.Call) ; else {
                            var t = n;
                            switch (t.getType()) {
                                case h.MessageConstatnts.TYPE.TEXT:
                                    l.isFalsy(e._eventListener.onTextMessageReceived) || e._eventListener.onTextMessageReceived(n);
                                    break;
                                case h.MessageConstatnts.TYPE.CUSTOM:
                                    l.isFalsy(e._eventListener.onCustomMessageReceived) || e._eventListener.onCustomMessageReceived(n);
                                    break;
                                default:
                                    t.getCategory() == h.MessageCategory.CUSTOM ? l.isFalsy(e._eventListener.onCustomMessageReceived) || e._eventListener.onCustomMessageReceived(n) : l.isFalsy(e._eventListener.onMediaMessageReceived) || e._eventListener.onMediaMessageReceived(n)
                            }
                        }
                    } catch (e) {
                        l.Logger.error("XMPPHelper: trigerMessageHandler", e)
                    }
                }), n instanceof C.Call && this.publishCallEvents(n), n instanceof g.Action && this.publishActionEvents(n); else if (n = E.MessageController.trasformJSONMessge(n), this.messageHandlers[e]._eventListener) try {
                    if (this.messageHandlers[e]._eventListener) if (n instanceof g.Action) ; else if (n instanceof C.Call) ; else {
                        var t = n;
                        switch (t.getType()) {
                            case h.MessageConstatnts.TYPE.TEXT:
                                l.isFalsy(this.messageHandlers[e]._eventListener.onTextMessageReceived) || this.messageHandlers[e]._eventListener.onTextMessageReceived(n);
                                break;
                            case h.MessageConstatnts.TYPE.CUSTOM:
                                l.isFalsy(this.messageHandlers[e]._eventListener.onCustomMessageReceived) || this.messageHandlers[e]._eventListener.onCustomMessageReceived(n);
                                break;
                            default:
                                t.getCategory() == h.MessageCategory.CUSTOM ? l.isFalsy(this.messageHandlers[e]._eventListener.onCustomMessageReceived) || this.messageHandlers[e]._eventListener.onCustomMessageReceived(n) : l.isFalsy(this.messageHandlers[e]._eventListener.onMediaMessageReceived) || this.messageHandlers[e]._eventListener.onMediaMessageReceived(n)
                        }
                    }
                } catch (e) {
                    l.Logger.error("XMPPHelper: trigerMessageHandler", e)
                }
            }, c.prototype.publishActionEvents = function (n) {
                var r = this;
                try {
                    switch (n.getAction()) {
                        case h.ActionConstatnts.ACTION_TYPE.TYPE_MEMBER_JOINED:
                            this.groupHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onUserJoined) || e._eventListener.onUserJoined(n, n.getActionBy(), n.getActionFor())
                            });
                            break;
                        case h.ActionConstatnts.ACTION_TYPE.TYPE_MEMBER_INVITED:
                            this.groupHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onUserJoined) || e._eventListener.onUserJoined(n, n.getActionBy(), n.getActionFor())
                            });
                            break;
                        case h.ActionConstatnts.ACTION_TYPE.TYPE_MEMBER_LEFT:
                            this.groupHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onUserLeft) || e._eventListener.onUserLeft(n, n.getActionBy(), n.getActionFor())
                            });
                            break;
                        case h.ActionConstatnts.ACTION_TYPE.TYPE_MEMBER_BANNED:
                            this.groupHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onUserBanned) || e._eventListener.onUserBanned(n, n.getActionOn(), n.getActionBy(), n.getActionFor())
                            });
                            break;
                        case h.ActionConstatnts.ACTION_TYPE.TYPE_MEMBER_KICKED:
                            this.groupHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onUserKicked) || e._eventListener.onUserKicked(n, n.getActionOn(), n.getActionBy(), n.getActionFor())
                            });
                            break;
                        case h.ActionConstatnts.ACTION_TYPE.TYPE_MEMBER_UNBANNED:
                            this.groupHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onUserUnbanned) || e._eventListener.onUserUnbanned(n, n.getActionOn(), n.getActionBy(), n.getActionFor())
                            });
                            break;
                        case h.ActionConstatnts.ACTION_TYPE.TYPE_MEMBER_SCOPE_CHANGED:
                            this.groupHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onMemberScopeChanged) || e._eventListener.onMemberScopeChanged(n, n.getActionOn(), n.getNewScope(), n.getOldScope(), n.getActionFor())
                            });
                            break;
                        case h.ActionConstatnts.ACTION_TYPE.TYPE_MESSAGE_EDITED:
                            this.messageHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onMessageEdited) || e._eventListener.onMessageEdited(n.getActionOn())
                            });
                            break;
                        case h.ActionConstatnts.ACTION_TYPE.TYPE_MESSAGE_DELETED:
                            this.messageHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onMessageDeleted) || e._eventListener.onMessageDeleted(n.getActionOn())
                            });
                            break;
                        case h.ActionConstatnts.ACTION_TYPE.TYPE_MEMBER_ADDED:
                            var e = n.getActionOn();
                            _.getJidFromUid(e.getUid()).then(function (e) {
                                e == f.Strophe.getBareJidFromJid(r.connection.jid) && (r.joinMuc(n.getActionFor()), r.markAsDelivered(n.getActionFor().guid, "group", n.getId()))
                            }), this.groupHandlers.map(function (t) {
                                var e = n.getActionOn();
                                _.getJidFromUid(e.getUid()).then(function (e) {
                                    e == f.Strophe.getBareJidFromJid(r.connection.jid) && r.joinMuc(n.getActionFor()), l.isFalsy(t._eventListener.onMemberAddedToGroup) || t._eventListener.onMemberAddedToGroup(n, n.getActionOn(), n.getActionBy(), n.getActionFor())
                                })
                            })
                    }
                } catch (e) {
                    l.Logger.error("XMPPHelper: publishActionEvents", e)
                }
            }, c.prototype.publishCallEvents = function (t) {
                try {
                    var n = S.CallController.getInstance().getActiveCall();
                    switch (t.getStatus()) {
                        case h.CallConstants.CALL_STATUS.INITIATED:
                            t.getReceiverType() == h.CallConstants.RECEIVER_TYPE_GROUP ? this.callHandlers.map(function (e) {
                                t.getCallInitiator().getUid().toLocaleLowerCase() != d.CometChat.user.getUid().toLocaleLowerCase() && (l.isFalsy(e._eventListener.onIncomingCallReceived) || e._eventListener.onIncomingCallReceived(t))
                            }) : this.callHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onIncomingCallReceived) || e._eventListener.onIncomingCallReceived(t)
                            });
                            break;
                        case h.CallConstants.CALL_STATUS.ONGOING:
                            t.getReceiverType() == h.CallConstants.RECEIVER_TYPE_GROUP ? t.getCallInitiator().getUid().toLocaleLowerCase() == d.CometChat.user.getUid().toLocaleLowerCase() && this.callHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onOutgoingCallAccepted) || e._eventListener.onOutgoingCallAccepted(t)
                            }) : this.callHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onOutgoingCallAccepted) || e._eventListener.onOutgoingCallAccepted(t)
                            });
                            break;
                        case h.CallConstants.CALL_STATUS.UNANSWERED:
                            if (t.getCallInitiator().getUid().toLocaleLowerCase() == d.CometChat.user.getUid().toLocaleLowerCase()) this.callHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onOutgoingCallRejected) || e._eventListener.onOutgoingCallRejected(t)
                            }); else {
                                if (null !== n && n.getSessionId() === t.getSessionId()) try {
                                    S.CallController.getInstance().endCall()
                                } catch (e) {
                                    l.Logger.error("CallError", e)
                                }
                                this.callHandlers.map(function (e) {
                                    l.isFalsy(e._eventListener.onIncomingCallCancelled) || e._eventListener.onIncomingCallCancelled(t)
                                })
                            }
                            break;
                        case h.CallConstants.CALL_STATUS.REJECTED:
                            if (t.getReceiverType() == h.CallConstants.RECEIVER_TYPE_GROUP) t.getCallInitiator().getUid().toLocaleLowerCase() == d.CometChat.user.getUid().toLocaleLowerCase() && this.callHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onOutgoingCallRejected) || e._eventListener.onOutgoingCallRejected(t)
                            }); else {
                                if (null !== n && n.getSessionId() === t.getSessionId()) try {
                                    S.CallController.getInstance().endCall()
                                } catch (e) {
                                    l.Logger.error("CallError", e)
                                }
                                this.callHandlers.map(function (e) {
                                    l.isFalsy(e._eventListener.onOutgoingCallRejected) || e._eventListener.onOutgoingCallRejected(t)
                                })
                            }
                            break;
                        case h.CallConstants.CALL_STATUS.BUSY:
                            t.getReceiverType() == h.CallConstants.RECEIVER_TYPE_GROUP ? t.getCallInitiator().getUid().toLocaleLowerCase() == d.CometChat.user.getUid().toLocaleLowerCase() && this.callHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onOutgoingCallRejected) || e._eventListener.onOutgoingCallRejected(t)
                            }) : this.callHandlers.map(function (e) {
                                if (null !== n && n.getSessionId() === t.getSessionId()) try {
                                    S.CallController.getInstance().endCall()
                                } catch (e) {
                                    l.Logger.error("CallError", e)
                                }
                                l.isFalsy(e._eventListener.onOutgoingCallRejected) || e._eventListener.onOutgoingCallRejected(t)
                            });
                            break;
                        case h.CallConstants.CALL_STATUS.CANCELLED:
                            if (this.callHandlers.map(function (e) {
                                l.isFalsy(e._eventListener.onIncomingCallCancelled) || e._eventListener.onIncomingCallCancelled(t)
                            }), null !== n && n.getSessionId() === t.getSessionId()) try {
                                S.CallController.getInstance().endCall()
                            } catch (e) {
                                l.Logger.error("CallError", e)
                            }
                            break;
                        case h.CallConstants.CALL_STATUS.ENDED:
                            if (S.CallController.getInstance().getCallListner() && S.CallController.getInstance().getCallListner()._eventListener.onCallEnded(t), null !== n && n.getSessionId() === t.getSessionId()) try {
                                S.CallController.getInstance().endCall()
                            } catch (e) {
                                l.Logger.error("CallError", e)
                            }
                    }
                } catch (e) {
                    l.Logger.error("XMPPHelper: publishCallEvents", e)
                }
            }, c.prototype.publishTypinStatusNotification = function (t, e) {
                try {
                    switch (e) {
                        case h.TYPING_NOTIFICATION.ACTIONS.STARTED:
                            this.messageHandlers.map(function (e) {
                                e._eventListener.onTypingStarted && e._eventListener.onTypingStarted(t)
                            }), I.TypingNotificationController.addIncomingTypingStarted(t);
                            break;
                        case h.TYPING_NOTIFICATION.ACTIONS.ENDED:
                            this.messageHandlers.map(function (e) {
                                e._eventListener.onTypingEnded && e._eventListener.onTypingEnded(t)
                            }), I.TypingNotificationController.removeIncomingTypingStarted(t)
                    }
                } catch (e) {
                    l.Logger.error("XMPPHelper: publishTypingStatusNotification", e)
                }
            }, c.prototype.publishDeliveryReceipt = function (e) {
                var n = this;
                try {
                    E.MessageController.processDeliveryReceipt(e).then(function (t) {
                        n.messageHandlers.map(function (e) {
                            e._eventListener.onMessagesDelivered && e._eventListener.onMessagesDelivered(t)
                        })
                    }, function (e) {
                        l.Logger.error("Error in publish delivery", e)
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: publishDeliveryReceipt", e)
                }
            }, c.prototype.publishReadReceipt = function (e) {
                var n = this;
                try {
                    E.MessageController.processReadReceipt(e).then(function (t) {
                        n.messageHandlers.map(function (e) {
                            e._eventListener.onMessagesRead && e._eventListener.onMessagesRead(t)
                        })
                    }, function (e) {
                        l.Logger.error("Error in publish read", e)
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: publishReadReceipt", e)
                }
            }, c.prototype.markAsRead = function (r, o, s) {
                var i = this;
                try {
                    o == h.MessageConstatnts.RECEIVER_TYPE.USER ? _.getJidFromUid(r).then(function (e) {
                        var t = f.$msg({
                            to: e,
                            from: i.connection.jid,
                            id: i.connection.getUniqueId(),
                            type: h.MessageConstatnts.XMPP_KEYS.TYPE_USER
                        }), n = f.Strophe.xmlElement("read", {
                            type: o,
                            receiverId: r,
                            xmlns: "urn:xmpp:receipts",
                            id: "[" + d.CometChat.getAppId() + "]" + s
                        });
                        t.tree().appendChild(n), i.connection.send(t)
                    }) : _.getGroupJidFromGUID(r).then(function (e) {
                        var t = f.$msg({
                            to: e,
                            from: i.connection.jid,
                            id: i.connection.getUniqueId(),
                            type: h.MessageConstatnts.XMPP_KEYS.TYPE_GROUP
                        }), n = f.Strophe.xmlElement("read", {
                            type: o,
                            receiverId: r,
                            xmlns: f.Strophe.NS.RECEIPTS,
                            id: "[" + d.CometChat.getAppId() + "]" + s
                        });
                        t.tree().appendChild(n), i.connection.send(t)
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: markAsRead", e)
                }
            }, c.prototype.markAsDelivered = function (r, o, s) {
                var i = this;
                try {
                    o == h.MessageConstatnts.RECEIVER_TYPE.USER ? _.getJidFromUid(r).then(function (e) {
                        var t = f.$msg({
                            to: e,
                            from: i.connection.jid,
                            id: i.connection.getUniqueId(),
                            type: h.MessageConstatnts.XMPP_KEYS.TYPE_USER
                        }), n = f.Strophe.xmlElement("delivered", {
                            type: o,
                            receiverId: r,
                            xmlns: "urn:xmpp:receipts",
                            id: "[" + d.CometChat.getAppId() + "]" + s
                        });
                        t.tree().appendChild(n), i.connection.send(t)
                    }) : _.getGroupJidFromGUID(r).then(function (e) {
                        var t = f.$msg({
                            to: e,
                            from: i.connection.jid,
                            id: i.connection.getUniqueId(),
                            type: h.MessageConstatnts.XMPP_KEYS.TYPE_GROUP
                        }), n = f.Strophe.xmlElement("delivered", {
                            type: o,
                            receiverId: r,
                            xmlns: f.Strophe.NS.RECEIPTS,
                            id: "[" + d.CometChat.getAppId() + "]" + s
                        });
                        t.tree().appendChild(n), i.connection.send(t)
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: markAsDelivered", e)
                }
            }, c.prototype.subscribeToTopic = function (t) {
                var n = this;
                try {
                    T.LocalStorage.getInstance().get(h.APP_SETTINGS.APP_SETTINGS).then(function (e) {
                        l.isFalsy(e) ? l.getAppSettings().then(function (e) {
                            n.connection.pubsub.subscribe(n.connection.jid, h.XMPP.PUBSUB_CHANNEL + "." + e[h.APP_SETTINGS.KEYS.CHAT_HOST], t, {}, function () {
                                l.Logger.info("XMPPHelper: subscribeToTopic", "onEvent")
                            }, function () {
                                l.Logger.info("XMPPHelper: subscribeToTopic", "onsubscribe")
                            })
                        }) : n.connection.pubsub.subscribe(n.connection.jid, h.XMPP.PUBSUB_CHANNEL + "." + e[h.APP_SETTINGS.KEYS.CHAT_HOST], t, {}, function () {
                            l.Logger.info("XMPPHelper: subscribeToTopic", "onEvent")
                        }, function () {
                            l.Logger.info("XMPPHelper: subscribeToTopic", "onsubscribe")
                        })
                    })
                } catch (e) {
                    l.Logger.error("XMPPHelper: subscribeToTopic", e)
                }
            }, c.prototype.getRooms = function () {
                var r = this;
                return new Promise(function (n, t) {
                    try {
                        void 0 !== r.connection ? T.LocalStorage.getInstance().get(h.APP_SETTINGS.APP_SETTINGS).then(function (e) {
                            l.isFalsy(e) ? l.getAppSettings().then(function (e) {
                                r.connection.muc.listRooms(d.CometChat.getAppId() + "." + e[h.APP_SETTINGS.KEYS.CHAT_HOST], function (e) {
                                    var t = e.getElementsByTagName("item");
                                    t = Array.prototype.slice.call(t), r.joinedGroups = [], t.map(function (e) {
                                        r.joinedGroups.push(_.getUidFromJid(e.getAttribute("jid")))
                                    }), n(r.joinedGroups)
                                })
                            }) : r.connection.muc.listRooms(d.CometChat.getAppId() + "." + e[h.APP_SETTINGS.KEYS.CHAT_HOST], function (e) {
                                var t = e.getElementsByTagName("item");
                                t = Array.prototype.slice.call(t), r.joinedGroups = [], t.map(function (e) {
                                    r.joinedGroups.push(_.getUidFromJid(e.getAttribute("jid")))
                                }), n(r.joinedGroups)
                            })
                        }, function (e) {
                            t(new O.CometChatException(e))
                        }) : r.addXMPPConnectionEventListener("XMPPConnectionListener", new v({
                            onConnected: function (e) {
                                e == f.Strophe.Status.CONNECTED && r.getRooms().then(function (e) {
                                    n(e), r.removeXMPPConnectionEventListener("XMPPConnectionListener")
                                })
                            }
                        }))
                    } catch (e) {
                        t(new O.CometChatException(e))
                    }
                })
            }, c.prototype.perfomAfterConnection = function (e, t, n, r) {
                var a = this, o = d.CometChat.getInstance();
                this.connection.connect(l.format(h.XMPP.jid_string, d.CometChat.getAppId(), e, r, o.getAuthToken()), t, function (t) {
                    try {
                        if (l.isFalsy(n) || n(t), t == f.Strophe.Status.CONNECTED) {
                            switch (a.connection.sendPresence(f.$pres().c("priority").t("1").up().c("status").t("online")), a.connection.muc.init(a.connection), a.connection.vcard.init(a.connection), a.connection.chatstates.init(a.connection), a.connection.receipts.init(a.connection), a.connection.pubsub.init(a.connection), a.XMPPConnectionHandlers.map(function (e) {
                                try {
                                    e._XMPPeventListener && (l.isFalsy(e._XMPPeventListener.onConnected) || e._XMPPeventListener.onConnected(t))
                                } catch (e) {
                                    l.Logger.error("XMPPHelper: trigerMessageHandler", e)
                                }
                            }), T.LocalStorage.getInstance().get(h.APP_SETTINGS.APP_SETTINGS).then(function (e) {
                                l.isFalsy(e) ? l.getAppSettings().then(function (e) {
                                    a.connection.muc.listRooms(d.CometChat.getAppId() + "." + e[h.APP_SETTINGS.KEYS.CHAT_HOST], function (e) {
                                        var t = e.getElementsByTagName("item");
                                        (t = Array.prototype.slice.call(t)).map(function (e) {
                                            a.connection.muc.join(e.getAttribute("jid"), a.connection.jid)
                                        })
                                    })
                                }) : a.connection.muc.listRooms(d.CometChat.getAppId() + "." + e[h.APP_SETTINGS.KEYS.CHAT_HOST], function (e) {
                                    var t = e.getElementsByTagName("item");
                                    (t = Array.prototype.slice.call(t)).map(function (e) {
                                        a.connection.muc.join(e.getAttribute("jid"), a.connection.jid, null, null, null, null, 0, null)
                                    })
                                })
                            }), d.CometChat.appSettings.getSubscriptionType()) {
                                case y.AppSettings.SUBSCRIPTION_TYPE_ALL_USERS:
                                    a.subscribeToTopic(l.format(h.XMPP.pubsub_global_string, d.CometChat.getAppId()));
                                    break;
                                case y.AppSettings.SUBSCRIPTION_TYPE_FRIENDS:
                                case y.AppSettings.SUBSCRIPTION_TYPE_NONE:
                                    break;
                                case y.AppSettings.SUBSCRIPTION_TYPE_ROLES:
                                    d.CometChat.appSettings.getRoles().map(function (e) {
                                        a.subscribeToTopic(l.format(h.XMPP.pubsub_role_string, d.CometChat.getAppId(), e))
                                    })
                            }
                            a.connection.send(f.$iq({
                                from: f.Strophe.getBareJidFromJid(a.connection.jid),
                                id: "enable1",
                                type: "set"
                            }).c("enable", {xmlns: "urn:xmpp:carbons:2"})), a.connection.addHandler(function (e) {
                                if (!(0 < e.getElementsByTagName("x").length)) {
                                    var n = p.PresenceController.transformPresence(e);
                                    a.getUsersVCard(n.getUid(), function (t) {
                                        l.isFalsy(t.getUid()) || d.CometChat.appSettings.getSubscriptionType() == y.AppSettings.SUBSCRIPTION_TYPE_FRIENDS && a.userHandlers.map(function (e) {
                                            if (e) switch (t.setLastActiveAt(n.getLastActiveAt()), n.getStatus()) {
                                                case h.PresenceConstatnts.STATUS.ONLINE:
                                                    t.setStatus(h.PresenceConstatnts.STATUS.ONLINE), l.isFalsy(e._eventListener.onUserOnline) || e._eventListener.onUserOnline(t);
                                                    break;
                                                default:
                                                    t.setStatus(h.PresenceConstatnts.STATUS.OFFLINE), l.isFalsy(e._eventListener.onUserOffline) || e._eventListener.onUserOffline(t)
                                            }
                                        })
                                    })
                                }
                                return !0
                            }, null, "presence"), a.connection.addHandler(function (e) {
                                0 < e.getElementsByTagName("muc:join").length && a.connection.muc.join(e.getAttribute(h.MessageConstatnts.XMPP_KEYS.FROM), a.connection.jid, null, null, null, null, 0);
                                var t = e.getElementsByTagName("presence");
                                return 0 < (t = Array.prototype.slice.call(t)).length && a.iqHandlers.map(function (e) {
                                    e._callback(p.PresenceController.transformPresences(t))
                                }), !0
                            }, null, "iq"), T.LocalStorage.getInstance().get(h.APP_SETTINGS.APP_SETTINGS).then(function (e) {
                                l.isFalsy(e) ? l.getAppSettings().then(function (e) {
                                    a.connection.addHandler(function (e) {
                                        var t = JSON.parse(unescape(_.parseHTML(e.getElementsByTagName("body")[0])).trim().toString()),
                                            n = R.UsersController.trasformJSONUser(t);
                                        return a.userHandlers.map(function (e) {
                                            if (e) switch (n.getStatus()) {
                                                case h.PresenceConstatnts.STATUS.OFFLINE:
                                                    l.isFalsy(e._eventListener.onUserOffline) || e._eventListener.onUserOffline(n);
                                                    break;
                                                default:
                                                    l.isFalsy(e._eventListener.onUserOnline) || e._eventListener.onUserOnline(n)
                                            }
                                        }), !0
                                    }, null, "message", null, null, h.XMPP.PUBSUB_CHANNEL + "." + e[h.APP_SETTINGS.KEYS.CHAT_HOST], null)
                                }) : a.connection.addHandler(function (e) {
                                    var t = JSON.parse(unescape(_.parseHTML(e.getElementsByTagName("body")[0])).trim().toString()),
                                        n = R.UsersController.trasformJSONUser(t);
                                    return a.userHandlers.map(function (e) {
                                        if (e) switch (n.getStatus()) {
                                            case h.PresenceConstatnts.STATUS.OFFLINE:
                                                l.isFalsy(e._eventListener.onUserOffline) || e._eventListener.onUserOffline(n);
                                                break;
                                            default:
                                                l.isFalsy(e._eventListener.onUserOnline) || e._eventListener.onUserOnline(n)
                                        }
                                    }), !0
                                }, null, "message", null, null, h.XMPP.PUBSUB_CHANNEL + "." + e[h.APP_SETTINGS.KEYS.CHAT_HOST], null)
                            }), a.connection.addHandler(function (s) {
                                var e;
                                try {
                                    try {
                                        if (e = E.MessageController.trasformXMPPMessage(s), l.isFalsy(e)) if (E.MessageController.isDeliveryReceipt(s)) s.getAttribute(h.MessageConstatnts.XMPP_KEYS.TYPE) == h.MessageConstatnts.XMPP_KEYS.TYPE_GROUP && _.getFullJidForGroup(s.getAttribute(h.MessageConstatnts.XMPP_KEYS.FROM)) == c.getInstance().connection.jid || a.publishDeliveryReceipt(s); else {
                                            if (!E.MessageController.isReadRceipt(s)) return !0;
                                            s.getAttribute(h.MessageConstatnts.XMPP_KEYS.TYPE) == h.MessageConstatnts.XMPP_KEYS.TYPE_GROUP && _.getFullJidForGroup(s.getAttribute(h.MessageConstatnts.XMPP_KEYS.FROM)) == c.getInstance().connection.jid || a.publishReadReceipt(s)
                                        } else s.getAttribute(h.MessageConstatnts.XMPP_KEYS.TYPE) == h.MessageConstatnts.XMPP_KEYS.TYPE_GROUP ? _.getFullJidForGroup(s.getAttribute(h.MessageConstatnts.XMPP_KEYS.FROM)) == c.getInstance().connection.jid || E.MessageController.checkIfCabon(s) || a.connection.receipts._processReceipt(s, e.getId()) : E.MessageController.checkIfCabon(s) ? a.trigerMessageHandler(s) : a.connection.receipts._processReceipt(s, e.getId());
                                        E.MessageController.isReadRceipt(s) || E.MessageController.isDeliveryReceipt(s) ? s = e : s.getAttribute(h.MessageConstatnts.XMPP_KEYS.TYPE) == h.MessageConstatnts.XMPP_KEYS.TYPE_GROUP && _.getFullJidForGroup(s.getAttribute(h.MessageConstatnts.XMPP_KEYS.FROM)) == c.getInstance().connection.jid || (s = e)
                                    } catch (e) {
                                        return l.Logger.error("Error in processing incoming message", {
                                            e: e,
                                            message: s
                                        }), !0
                                    }
                                    if (!l.isFalsy(s)) {
                                        try {
                                            A.MessageListnerMaping.getInstance().set("all", s.id)
                                        } catch (e) {
                                            l.Logger.error("Error in storing  incoming message id", {e: e})
                                        }
                                        a.messageHandlers.map(function (o) {
                                            return i(a, void 0, void 0, function () {
                                                var t, n, r;
                                                return u(this, function (e) {
                                                    switch (e.label) {
                                                        case 0:
                                                            return e.trys.push([0, 5, , 6]), o ? s instanceof g.Action ? [3, 4] : [3, 1] : [3, 4];
                                                        case 1:
                                                            return s instanceof C.Call ? [3, 4] : [3, 2];
                                                        case 2:
                                                            return t = s, n = E.MessageController.trasformJSONMessge(t), [4, N.ExtensionController.hookOnMessageReceived(n)];
                                                        case 3:
                                                            switch ((t = e.sent()).getType()) {
                                                                case h.MessageConstatnts.TYPE.TEXT:
                                                                    l.isFalsy(o._eventListener.onTextMessageReceived) || o._eventListener.onTextMessageReceived(t);
                                                                    break;
                                                                case h.MessageConstatnts.TYPE.CUSTOM:
                                                                    l.isFalsy(o._eventListener.onCustomMessageReceived) || o._eventListener.onCustomMessageReceived(t);
                                                                    break;
                                                                default:
                                                                    t.getCategory() == h.MessageCategory.CUSTOM ? l.isFalsy(o._eventListener.onCustomMessageReceived) || o._eventListener.onCustomMessageReceived(s) : l.isFalsy(o._eventListener.onMediaMessageReceived) || o._eventListener.onMediaMessageReceived(s)
                                                            }
                                                            e.label = 4;
                                                        case 4:
                                                            return [3, 6];
                                                        case 5:
                                                            return r = e.sent(), l.Logger.error("Error in processing incoming message", {e: r}), [3, 6];
                                                        case 6:
                                                            return [2]
                                                    }
                                                })
                                            })
                                        }), s instanceof C.Call && a.publishCallEvents(s), s instanceof g.Action && a.publishActionEvents(s)
                                    }
                                } catch (e) {
                                    l.Logger.error("Error in message processing", {error: e})
                                }
                                return !0
                            }, null, "message"), a.connection.addHandler(function (e) {
                                try {
                                    if (0 < e.getElementsByTagName("error").length) return !0;
                                    var t, n = e.getElementsByTagName("composing"),
                                        r = e.getElementsByTagName("paused"), o = e.getAttribute("from"),
                                        s = e.getAttribute("type");
                                    if (e.getElementsByTagName("body")[0] && (t = unescape(_.parseHTML(e.getElementsByTagName("body")[0])).trim().toString()), 0 < n.length || 0 < r.length) switch (s) {
                                        case h.XMPP.CONVERSATION.TYPE.CHAT:
                                            var i = new m.TypingIndicator(_.getUidFromJid(a.connection.jid), h.MessageConstatnts.RECEIVER_TYPE.USER);
                                            a.getUsersVCard(_.getUidFromJid(o), function (e) {
                                                i.setSender(e), t && i.setMetadata(t), 0 < n.length && I.TypingNotificationController.addIncomingTypingStarted(i), 0 < r.length && I.TypingNotificationController.removeIncomingTypingStarted(i), a.messageHandlers.map(function (e) {
                                                    0 < n.length && e._eventListener.onTypingStarted && e._eventListener.onTypingStarted(i), 0 < r.length && e._eventListener.onTypingEnded && e._eventListener.onTypingEnded(i)
                                                })
                                            });
                                            break;
                                        case h.XMPP.CONVERSATION.TYPE.GROUP_CHAT:
                                            if (_.getFullJidForGroup(e.getAttribute(h.MessageConstatnts.XMPP_KEYS.FROM)) == c.getInstance().connection.jid) return !0;
                                            i = new m.TypingIndicator(_.getGUIDFromJID(o), h.MessageConstatnts.RECEIVER_TYPE.GROUP), a.getUsersVCard(_.getUidFromJid(o), function (e) {
                                                i.setSender(e), t && i.setMetadata(t), 0 < n.length && I.TypingNotificationController.addIncomingTypingStarted(i), 0 < r.length && I.TypingNotificationController.removeIncomingTypingStarted(i), a.messageHandlers.map(function (e) {
                                                    0 < n.length && e._eventListener.onTypingStarted && e._eventListener.onTypingStarted(i), 0 < r.length && e._eventListener.onTypingEnded && e._eventListener.onTypingEnded(i)
                                                })
                                            })
                                    }
                                } catch (e) {
                                    l.Logger.error("error in message processing", {error: e})
                                }
                                return !0
                            }, f.Strophe.NS.CHATSTATES, "message")
                        }
                    } catch (e) {
                        l.Logger.error("XMPPHelper: performAfterConnection", e)
                    }
                })
            }, c.XMPP_HOST = h.XMPP.host, c.XMPP_PORT = h.XMPP.port, c.xMPPConnectionHelper = new c, c.XMPP_BIND_URL = "wss://" + c.XMPP_HOST + ":" + c.XMPP_PORT + h.XMPP.ws_url, c.XMPP_BIND_URL_WS = "wss://" + c.XMPP_HOST + ":" + c.XMPP_PORT + h.XMPP.ws_url, c.XMPP_BIND_URL_HTTPS = "https://" + c.XMPP_HOST + ":" + c.XMPP_PORT + h.XMPP.bind_url, c
        }();
        t.XMPPConnectionHelper = c;
        var v = function () {
            for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
            this.onConnected = void 0, l.isFalsy(e[0].onConnected) || (this.onConnected = e[0].onConnected)
        };
        t.XMPPConnectionEventListener = v;
        var M = function (e, t) {
            this._name = e, this._callback = t
        }, P = function (s) {
            function e(e, t, n, r) {
                var o = s.call(this, e, r) || this;
                return o._XMPPeventListener = t, n && (o._cursor = n), o
            }

            return o(e, s), e
        }(t.XMPPListener = M);
        t.XMPPConnectionListener = P
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0, t.SERVER_ERRORS = {
            AUTH_ERR: {
                code: "AUTH_ERR_AUTH_TOKEN_NOT_FOUND",
                message: "The auth token %s% does not exist. Please make sure you are logged in and have a valid auth token or try login again."
            }
        }, t.ERRORS = {
            PARAMETER_MISSING: {
                code: "MISSING_PARAMETERS",
                name: "MISSING/ INVALID PARAMETER"
            }
        }, t.INIT_ERROR = {
            NO_APP_ID: {
                code: t.ERRORS.PARAMETER_MISSING.code,
                name: t.ERRORS.PARAMETER_MISSING.name,
                message: "mandatory parameter appId missing",
                details: {}
            }
        }, t.GROUP_CREATION_ERRORS = {
            EMPTY_PASSWORD: {
                code: "ERR_EMPTY_GROUP_PASS",
                details: void 0,
                message: "The password is required to join a group.",
                name: void 0
            }
        }, t.USERS_REQUEST_ERRORS = {
            EMPTY_USERS_LIST: {
                code: "EMPTY_USERS_LIST",
                name: "EMPTY_USERS_LIST",
                message: "please provide atleat one uid",
                details: {}
            }
        }, t.MESSAGES_REQUEST_ERRORS = {
            REQUEST_IN_PROGRESS_ERROR: {
                code: "REQUEST_IN_PROGRESS",
                name: "REQUEST_IN_PROGRESS",
                message: "request already in progress",
                details: {}
            },
            NOT_ENOUGH_PARAMS: {
                code: "NOT_ENOUGH_PARAMETERS",
                name: "NOT_ENOUGH_PARAMETERS",
                message: "you need to set timstamp or message id to fetch next set of messages",
                details: {}
            }
        }, t.MESSAGE_ERRORS = {
            INVALID_CUSTOM_DATA: {
                code: "-1",
                name: "%s_CUSTOM_DATA",
                message: "",
                details: {}
            }
        }, t.LOGIN_ERROR = {
            NOT_INITIALIZED: {
                code: "-1",
                name: "COMETCHAT_INITIALIZATION_NOT_DONE",
                message: "please initialize the cometchat before using login method",
                details: {}
            },
            UNAUTHORISED: {
                code: 401,
                name: "USER_NOT_AUTHORISED",
                message: "provided user is not authorised",
                details: {}
            },
            XMPP_CONNECTION_FAIL: {
                code: -1,
                name: "WS_CONNECTION_FAIL",
                message: "WS Connection failed. %s",
                details: {}
            },
            XMPP_CONNECTION_FAIL_PORT_ERROR: {
                code: -1,
                name: "WS_CONNECTION_FAIL",
                message: "WS Connection failed. Trying to connect with port: %s",
                details: {}
            },
            XMPP_CONNECTION_FALLBACK_FAIL_PORT_ERROR: {
                code: -1,
                name: "WS_CONNECTION_FALLBACK_FAIL",
                message: "WS Connection fallback failed. Trying to connect with port: %s",
                details: {}
            },
            XMPP_AUTH_FAIL: {code: -1, name: "WS_AUTH_FAIL", message: "WS username/password not correct", details: {}},
            NO_INTERNET: {
                code: -1,
                name: "NO_INTERNET_CONNECTION",
                message: "You do not have internet connection",
                details: {}
            }
        }, t.TYPINGNOTIFICATION_CONSTANTS = {
            TOO_MANY_REQUEST: {
                code: "TOO_MANY_REQUEST",
                name: "TOO MANY REQUEST",
                message: "too many request, wait for `%s` seconds before sending next request",
                details: {}
            }
        }
    }, function (e, t, n) {
        var r;
        window, r = function () {
            return function (n) {
                var r = {};

                function o(e) {
                    if (r[e]) return r[e].exports;
                    var t = r[e] = {i: e, l: !1, exports: {}};
                    return n[e].call(t.exports, t, t.exports, o), t.l = !0, t.exports
                }

                return o.m = n, o.c = r, o.d = function (e, t, n) {
                    o.o(e, t) || Object.defineProperty(e, t, {enumerable: !0, get: n})
                }, o.r = function (e) {
                    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {value: "Module"}), Object.defineProperty(e, "__esModule", {value: !0})
                }, o.t = function (t, e) {
                    if (1 & e && (t = o(t)), 8 & e) return t;
                    if (4 & e && "object" == typeof t && t && t.__esModule) return t;
                    var n = Object.create(null);
                    if (o.r(n), Object.defineProperty(n, "default", {
                        enumerable: !0,
                        value: t
                    }), 2 & e && "string" != typeof t) for (var r in t) o.d(n, r, function (e) {
                        return t[e]
                    }.bind(null, r));
                    return n
                }, o.n = function (e) {
                    var t = e && e.__esModule ? function () {
                        return e.default
                    } : function () {
                        return e
                    };
                    return o.d(t, "a", t), t
                }, o.o = function (e, t) {
                    return Object.prototype.hasOwnProperty.call(e, t)
                }, o.p = "", o(o.s = "./src/strophe.js")
            }({
                "./src/bosh.js": function (e, t, n) {
                    "use strict";
                    n.r(t);
                    var r = n("./src/core.js"), d = r.default.Strophe, o = r.default.$build;
                    d.Request = function (e, t, n, r) {
                        this.id = ++d._requestId, this.xmlData = e, this.data = d.serialize(e), this.origFunc = t, this.func = t, this.rid = n, this.date = NaN, this.sends = r || 0, this.abort = !1, this.dead = null, this.age = function () {
                            return this.date ? (new Date - this.date) / 1e3 : 0
                        }, this.timeDead = function () {
                            return this.dead ? (new Date - this.dead) / 1e3 : 0
                        }, this.xhr = this._newXHR()
                    }, d.Request.prototype = {
                        getResponse: function () {
                            var e = null;
                            if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {
                                if ("parsererror" === (e = this.xhr.responseXML.documentElement).tagName) throw d.error("invalid response received"), d.error("responseText: " + this.xhr.responseText), d.error("responseXML: " + d.serialize(this.xhr.responseXML)), new Error("parsererror")
                            } else if (this.xhr.responseText) {
                                if (d.debug("Got responseText but no responseXML; attempting to parse it with DOMParser..."), !(e = (new DOMParser).parseFromString(this.xhr.responseText, "application/xml").documentElement)) throw new Error("Parsing produced null node");
                                if (e.querySelector("parsererror")) {
                                    d.error("invalid response received: " + e.querySelector("parsererror").textContent), d.error("responseText: " + this.xhr.responseText);
                                    var t = new Error;
                                    throw t.name = d.ErrorCondition.BAD_FORMAT, t
                                }
                            }
                            return e
                        }, _newXHR: function () {
                            var e = null;
                            return window.XMLHttpRequest ? (e = new XMLHttpRequest).overrideMimeType && e.overrideMimeType("text/xml; charset=utf-8") : window.ActiveXObject && (e = new ActiveXObject("Microsoft.XMLHTTP")), e.onreadystatechange = this.func.bind(null, this), e
                        }
                    }, d.Bosh = function (e) {
                        this._conn = e, this.rid = Math.floor(4294967295 * Math.random()), this.sid = null, this.hold = 1, this.wait = 60, this.window = 5, this.errors = 0, this.inactivity = null, this.lastResponseHeaders = null, this._requests = []
                    }, d.Bosh.prototype = {
                        strip: null, _buildBody: function () {
                            var e = o("body", {rid: this.rid++, xmlns: d.NS.HTTPBIND});
                            return null !== this.sid && e.attrs({sid: this.sid}), this._conn.options.keepalive && this._conn._sessionCachingSupported() && this._cacheSession(), e
                        }, _reset: function () {
                            this.rid = Math.floor(4294967295 * Math.random()), this.sid = null, this.errors = 0, this._conn._sessionCachingSupported() && window.sessionStorage.removeItem("strophe-bosh-session"), this._conn.nextValidRid(this.rid)
                        }, _connect: function (e, t, n) {
                            this.wait = e || this.wait, this.hold = t || this.hold, this.errors = 0;
                            var r = this._buildBody().attrs({
                                to: this._conn.domain,
                                "xml:lang": "en",
                                wait: this.wait,
                                hold: this.hold,
                                content: "text/xml; charset=utf-8",
                                ver: "1.6",
                                "xmpp:version": "1.0",
                                "xmlns:xmpp": d.NS.BOSH
                            });
                            n && r.attrs({route: n});
                            var o = this._conn._connect_cb;
                            this._requests.push(new d.Request(r.tree(), this._onRequestStateChange.bind(this, o.bind(this._conn)), r.tree().getAttribute("rid"))), this._throttledRequestHandler()
                        }, _attach: function (e, t, n, r, o, s, i) {
                            this._conn.jid = e, this.sid = t, this.rid = n, this._conn.connect_callback = r, this._conn.domain = d.getDomainFromJid(this._conn.jid), this._conn.authenticated = !0, this._conn.connected = !0, this.wait = o || this.wait, this.hold = s || this.hold, this.window = i || this.window, this._conn._changeConnectStatus(d.Status.ATTACHED, null)
                        }, _restore: function (e, t, n, r, o) {
                            var s = JSON.parse(window.sessionStorage.getItem("strophe-bosh-session"));
                            if (!(null != s && s.rid && s.sid && s.jid && (null == e || d.getBareJidFromJid(s.jid) === d.getBareJidFromJid(e) || null === d.getNodeFromJid(e) && d.getDomainFromJid(s.jid) === e))) {
                                var i = new Error("_restore: no restoreable session.");
                                throw i.name = "StropheSessionError", i
                            }
                            this._conn.restored = !0, this._attach(s.jid, s.sid, s.rid, t, n, r, o)
                        }, _cacheSession: function () {
                            this._conn.authenticated ? this._conn.jid && this.rid && this.sid && window.sessionStorage.setItem("strophe-bosh-session", JSON.stringify({
                                jid: this._conn.jid,
                                rid: this.rid,
                                sid: this.sid
                            })) : window.sessionStorage.removeItem("strophe-bosh-session")
                        }, _connect_cb: function (e) {
                            var t = e.getAttribute("type");
                            if (null !== t && "terminate" === t) {
                                var n = e.getAttribute("condition");
                                d.error("BOSH-Connection failed: " + n);
                                var r = e.getElementsByTagName("conflict");
                                return null !== n ? ("remote-stream-error" === n && 0 < r.length && (n = "conflict"), this._conn._changeConnectStatus(d.Status.CONNFAIL, n)) : this._conn._changeConnectStatus(d.Status.CONNFAIL, "unknown"), this._conn._doDisconnect(n), d.Status.CONNFAIL
                            }
                            this.sid || (this.sid = e.getAttribute("sid"));
                            var o = e.getAttribute("requests");
                            o && (this.window = parseInt(o, 10));
                            var s = e.getAttribute("hold");
                            s && (this.hold = parseInt(s, 10));
                            var i = e.getAttribute("wait");
                            i && (this.wait = parseInt(i, 10));
                            var a = e.getAttribute("inactivity");
                            a && (this.inactivity = parseInt(a, 10))
                        }, _disconnect: function (e) {
                            this._sendTerminate(e)
                        }, _doDisconnect: function () {
                            this.sid = null, this.rid = Math.floor(4294967295 * Math.random()), this._conn._sessionCachingSupported() && window.sessionStorage.removeItem("strophe-bosh-session"), this._conn.nextValidRid(this.rid)
                        }, _emptyQueue: function () {
                            return 0 === this._requests.length
                        }, _callProtocolErrorHandlers: function (e) {
                            var t = this._getRequestStatus(e), n = this._conn.protocolErrorHandlers.HTTP[t];
                            n && n.call(this, t)
                        }, _hitError: function (e) {
                            this.errors++, d.warn("request errored, status: " + e + ", number of errors: " + this.errors), 4 < this.errors && this._conn._onDisconnectTimeout()
                        }, _no_auth_received: function (e) {
                            d.warn("Server did not yet offer a supported authentication mechanism. Sending a blank poll request."), e = e ? e.bind(this._conn) : this._conn._connect_cb.bind(this._conn);
                            var t = this._buildBody();
                            this._requests.push(new d.Request(t.tree(), this._onRequestStateChange.bind(this, e), t.tree().getAttribute("rid"))), this._throttledRequestHandler()
                        }, _onDisconnectTimeout: function () {
                            this._abortAllRequests()
                        }, _abortAllRequests: function () {
                            for (; 0 < this._requests.length;) {
                                var e = this._requests.pop();
                                e.abort = !0, e.xhr.abort(), e.xhr.onreadystatechange = function () {
                                }
                            }
                        }, _onIdle: function () {
                            var e = this._conn._data;
                            if (this._conn.authenticated && 0 === this._requests.length && 0 === e.length && !this._conn.disconnecting && (d.info("no requests during idle cycle, sending blank request"), e.push(null)), !this._conn.paused) {
                                if (this._requests.length < 2 && 0 < e.length) {
                                    for (var t = this._buildBody(), n = 0; n < e.length; n++) null !== e[n] && ("restart" === e[n] ? t.attrs({
                                        to: this._conn.domain,
                                        "xml:lang": "en",
                                        "xmpp:restart": "true",
                                        "xmlns:xmpp": d.NS.BOSH
                                    }) : t.cnode(e[n]).up());
                                    delete this._conn._data, this._conn._data = [], this._requests.push(new d.Request(t.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), t.tree().getAttribute("rid"))), this._throttledRequestHandler()
                                }
                                if (0 < this._requests.length) {
                                    var r = this._requests[0].age();
                                    null !== this._requests[0].dead && this._requests[0].timeDead() > Math.floor(d.SECONDARY_TIMEOUT * this.wait) && this._throttledRequestHandler(), r > Math.floor(d.TIMEOUT * this.wait) && (d.warn("Request " + this._requests[0].id + " timed out, over " + Math.floor(d.TIMEOUT * this.wait) + " seconds since last activity"), this._throttledRequestHandler())
                                }
                            }
                        }, _getRequestStatus: function (e, t) {
                            var n;
                            if (4 === e.xhr.readyState) try {
                                n = e.xhr.status
                            } catch (e) {
                                d.error("Caught an error while retrieving a request's status, reqStatus: " + n)
                            }
                            return void 0 === n && (n = "number" == typeof t ? t : 0), n
                        }, _onRequestStateChange: function (e, t) {
                            if (d.debug("request id " + t.id + "." + t.sends + " state changed to " + t.xhr.readyState), t.abort) t.abort = !1; else if (4 === t.xhr.readyState) {
                                var n = this._getRequestStatus(t);
                                if (this.lastResponseHeaders = t.xhr.getAllResponseHeaders(), this.disconnecting && 400 <= n) return this._hitError(n), void this._callProtocolErrorHandlers(t);
                                var r = 0 < n && n < 500, o = t.sends > this._conn.maxRetries;
                                if ((r || o) && (this._removeRequest(t), d.debug("request id " + t.id + " should now be removed")), 200 === n) {
                                    var s = this._requests[0] === t;
                                    (this._requests[1] === t || s && 0 < this._requests.length && this._requests[0].age() > Math.floor(d.SECONDARY_TIMEOUT * this.wait)) && this._restartRequest(0), this._conn.nextValidRid(Number(t.rid) + 1), d.debug("request id " + t.id + "." + t.sends + " got 200"), e(t), this.errors = 0
                                } else 0 === n || 400 <= n && n < 600 || 12e3 <= n ? (d.error("request id " + t.id + "." + t.sends + " error " + n + " happened"), this._hitError(n), this._callProtocolErrorHandlers(t), 400 <= n && n < 500 && (this._conn._changeConnectStatus(d.Status.DISCONNECTING, null), this._conn._doDisconnect())) : d.error("request id " + t.id + "." + t.sends + " error " + n + " happened");
                                r || o ? o && !this._conn.connected && this._conn._changeConnectStatus(d.Status.CONNFAIL, "giving-up") : this._throttledRequestHandler()
                            }
                        }, _processRequest: function (e) {
                            var n = this, r = this._requests[e], t = this._getRequestStatus(r, -1);
                            if (r.sends > this._conn.maxRetries) this._conn._onDisconnectTimeout(); else {
                                var o = r.age(), s = !isNaN(o) && o > Math.floor(d.TIMEOUT * this.wait),
                                    i = null !== r.dead && r.timeDead() > Math.floor(d.SECONDARY_TIMEOUT * this.wait),
                                    a = 4 === r.xhr.readyState && (t < 1 || 500 <= t);
                                if ((s || i || a) && (i && d.error("Request ".concat(this._requests[e].id, " timed out (secondary), restarting")), r.abort = !0, r.xhr.abort(), r.xhr.onreadystatechange = function () {
                                }, this._requests[e] = new d.Request(r.xmlData, r.origFunc, r.rid, r.sends), r = this._requests[e]), 0 === r.xhr.readyState) {
                                    d.debug("request id " + r.id + "." + r.sends + " posting");
                                    try {
                                        var c = this._conn.options.contentType || "text/xml; charset=utf-8";
                                        r.xhr.open("POST", this._conn.service, !this._conn.options.sync), void 0 !== r.xhr.setRequestHeader && r.xhr.setRequestHeader("Content-Type", c), this._conn.options.withCredentials && (r.xhr.withCredentials = !0)
                                    } catch (e) {
                                        return d.error("XHR open failed: " + e.toString()), this._conn.connected || this._conn._changeConnectStatus(d.Status.CONNFAIL, "bad-service"), void this._conn.disconnect()
                                    }
                                    var u = function () {
                                        if (r.date = new Date, n._conn.options.customHeaders) {
                                            var e = n._conn.options.customHeaders;
                                            for (var t in e) Object.prototype.hasOwnProperty.call(e, t) && r.xhr.setRequestHeader(t, e[t])
                                        }
                                        r.xhr.send(r.data)
                                    };
                                    if (1 < r.sends) {
                                        var l = 1e3 * Math.min(Math.floor(d.TIMEOUT * this.wait), Math.pow(r.sends, 3));
                                        setTimeout(function () {
                                            u()
                                        }, l)
                                    } else u();
                                    r.sends++, this._conn.xmlOutput !== d.Connection.prototype.xmlOutput && (r.xmlData.nodeName === this.strip && r.xmlData.childNodes.length ? this._conn.xmlOutput(r.xmlData.childNodes[0]) : this._conn.xmlOutput(r.xmlData)), this._conn.rawOutput !== d.Connection.prototype.rawOutput && this._conn.rawOutput(r.data)
                                } else d.debug("_processRequest: " + (0 === e ? "first" : "second") + " request has readyState of " + r.xhr.readyState)
                            }
                        }, _removeRequest: function (e) {
                            d.debug("removing request");
                            for (var t = this._requests.length - 1; 0 <= t; t--) e === this._requests[t] && this._requests.splice(t, 1);
                            e.xhr.onreadystatechange = function () {
                            }, this._throttledRequestHandler()
                        }, _restartRequest: function (e) {
                            var t = this._requests[e];
                            null === t.dead && (t.dead = new Date), this._processRequest(e)
                        }, _reqToData: function (e) {
                            try {
                                return e.getResponse()
                            } catch (e) {
                                if ("parsererror" !== e.message) throw e;
                                this._conn.disconnect("strophe-parsererror")
                            }
                        }, _sendTerminate: function (e) {
                            d.info("_sendTerminate was called");
                            var t = this._buildBody().attrs({type: "terminate"});
                            e && t.cnode(e.tree());
                            var n = new d.Request(t.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), t.tree().getAttribute("rid"));
                            this._requests.push(n), this._throttledRequestHandler()
                        }, _send: function () {
                            var e = this;
                            clearTimeout(this._conn._idleTimeout), this._throttledRequestHandler(), this._conn._idleTimeout = setTimeout(function () {
                                return e._conn._onIdle()
                            }, 100)
                        }, _sendRestart: function () {
                            this._throttledRequestHandler(), clearTimeout(this._conn._idleTimeout)
                        }, _throttledRequestHandler: function () {
                            this._requests ? d.debug("_throttledRequestHandler called with " + this._requests.length + " requests") : d.debug("_throttledRequestHandler called with undefined requests"), this._requests && 0 !== this._requests.length && (0 < this._requests.length && this._processRequest(0), 1 < this._requests.length && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window && this._processRequest(1))
                        }
                    }
                }, "./src/core.js": function (e, t, n) {
                    "use strict";
                    n.r(t);
                    var p = n("./src/md5.js"), S = n("./src/sha1.js"), T = n("./src/utils.js");

                    function s(e) {
                        return function (e) {
                            if (Array.isArray(e)) {
                                for (var t = 0, n = new Array(e.length); t < e.length; t++) n[t] = e[t];
                                return n
                            }
                        }(e) || function (e) {
                            if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e)
                        }(e) || function () {
                            throw new TypeError("Invalid attempt to spread non-iterable instance")
                        }()
                    }

                    function f(e) {
                        return (f = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
                            return typeof e
                        } : function (e) {
                            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
                        })(e)
                    }

                    function i(e, t) {
                        return new g.Builder(e, t)
                    }

                    function o(e) {
                        return new g.Builder("iq", e)
                    }

                    function r(e) {
                        return new g.Builder("presence", e)
                    }

                    var g = {
                        VERSION: "1.3.0",
                        NS: {
                            HTTPBIND: "http://jabber.org/protocol/httpbind",
                            BOSH: "urn:xmpp:xbosh",
                            CLIENT: "jabber:client",
                            AUTH: "jabber:iq:auth",
                            ROSTER: "jabber:iq:roster",
                            PROFILE: "jabber:iq:profile",
                            DISCO_INFO: "http://jabber.org/protocol/disco#info",
                            DISCO_ITEMS: "http://jabber.org/protocol/disco#items",
                            MUC: "http://jabber.org/protocol/muc",
                            SASL: "urn:ietf:params:xml:ns:xmpp-sasl",
                            STREAM: "http://etherx.jabber.org/streams",
                            FRAMING: "urn:ietf:params:xml:ns:xmpp-framing",
                            BIND: "urn:ietf:params:xml:ns:xmpp-bind",
                            SESSION: "urn:ietf:params:xml:ns:xmpp-session",
                            VERSION: "jabber:iq:version",
                            STANZAS: "urn:ietf:params:xml:ns:xmpp-stanzas",
                            XHTML_IM: "http://jabber.org/protocol/xhtml-im",
                            XHTML: "http://www.w3.org/1999/xhtml"
                        },
                        XHTML: {
                            tags: ["a", "blockquote", "br", "cite", "em", "img", "li", "ol", "p", "span", "strong", "ul", "body"],
                            attributes: {
                                a: ["href"],
                                blockquote: ["style"],
                                br: [],
                                cite: ["style"],
                                em: [],
                                img: ["src", "alt", "style", "height", "width"],
                                li: ["style"],
                                ol: ["style"],
                                p: ["style"],
                                span: ["style"],
                                strong: [],
                                ul: ["style"],
                                body: []
                            },
                            css: ["background-color", "color", "font-family", "font-size", "font-style", "font-weight", "margin-left", "margin-right", "text-align", "text-decoration"],
                            validTag: function (e) {
                                for (var t = 0; t < g.XHTML.tags.length; t++) if (e === g.XHTML.tags[t]) return !0;
                                return !1
                            },
                            validAttribute: function (e, t) {
                                if (void 0 !== g.XHTML.attributes[e] && 0 < g.XHTML.attributes[e].length) for (var n = 0; n < g.XHTML.attributes[e].length; n++) if (t === g.XHTML.attributes[e][n]) return !0;
                                return !1
                            },
                            validCSS: function (e) {
                                for (var t = 0; t < g.XHTML.css.length; t++) if (e === g.XHTML.css[t]) return !0;
                                return !1
                            }
                        },
                        Status: {
                            ERROR: 0,
                            CONNECTING: 1,
                            CONNFAIL: 2,
                            AUTHENTICATING: 3,
                            AUTHFAIL: 4,
                            CONNECTED: 5,
                            DISCONNECTED: 6,
                            DISCONNECTING: 7,
                            ATTACHED: 8,
                            REDIRECT: 9,
                            CONNTIMEOUT: 10
                        },
                        ErrorCondition: {
                            BAD_FORMAT: "bad-format",
                            CONFLICT: "conflict",
                            MISSING_JID_NODE: "x-strophe-bad-non-anon-jid",
                            NO_AUTH_MECH: "no-auth-mech",
                            UNKNOWN_REASON: "unknown"
                        },
                        LogLevel: {DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3, FATAL: 4},
                        ElementType: {NORMAL: 1, TEXT: 3, CDATA: 4, FRAGMENT: 11},
                        TIMEOUT: 1.1,
                        SECONDARY_TIMEOUT: .1,
                        addNamespace: function (e, t) {
                            g.NS[e] = t
                        },
                        forEachChild: function (e, t, n) {
                            for (var r = 0; r < e.childNodes.length; r++) {
                                var o = e.childNodes[r];
                                o.nodeType !== g.ElementType.NORMAL || t && !this.isTagEqual(o, t) || n(o)
                            }
                        },
                        isTagEqual: function (e, t) {
                            return e.tagName === t
                        },
                        _xmlGenerator: null,
                        _makeGenerator: function () {
                            var e;
                            return void 0 === document.implementation.createDocument || document.implementation.createDocument && document.documentMode && document.documentMode < 10 ? (e = this._getIEXmlDom()).appendChild(e.createElement("strophe")) : e = document.implementation.createDocument("jabber:client", "strophe", null), e
                        },
                        xmlGenerator: function () {
                            return g._xmlGenerator || (g._xmlGenerator = g._makeGenerator()), g._xmlGenerator
                        },
                        _getIEXmlDom: function () {
                            for (var t = null, e = ["Msxml2.DOMDocument.6.0", "Msxml2.DOMDocument.5.0", "Msxml2.DOMDocument.4.0", "MSXML2.DOMDocument.3.0", "MSXML2.DOMDocument", "MSXML.DOMDocument", "Microsoft.XMLDOM"], n = 0; n < e.length && null === t; n++) try {
                                t = new ActiveXObject(e[n])
                            } catch (e) {
                                t = null
                            }
                            return t
                        },
                        xmlElement: function (e) {
                            if (!e) return null;
                            for (var t = g.xmlGenerator().createElement(e), n = 1; n < arguments.length; n++) {
                                var r = arguments[n];
                                if (r) if ("string" == typeof r || "number" == typeof r) t.appendChild(g.xmlTextNode(r)); else if ("object" === f(r) && "function" == typeof r.sort) for (var o = 0; o < r.length; o++) {
                                    var s = r[o];
                                    "object" === f(s) && "function" == typeof s.sort && void 0 !== s[1] && null !== s[1] && t.setAttribute(s[0], s[1])
                                } else if ("object" === f(r)) for (var i in r) Object.prototype.hasOwnProperty.call(r, i) && void 0 !== r[i] && null !== r[i] && t.setAttribute(i, r[i])
                            }
                            return t
                        },
                        xmlescape: function (e) {
                            return e = (e = (e = (e = (e = e.replace(/\&/g, "&amp;")).replace(/</g, "&lt;")).replace(/>/g, "&gt;")).replace(/'/g, "&apos;")).replace(/"/g, "&quot;")
                        },
                        xmlunescape: function (e) {
                            return e = (e = (e = (e = (e = e.replace(/\&amp;/g, "&")).replace(/&lt;/g, "<")).replace(/&gt;/g, ">")).replace(/&apos;/g, "'")).replace(/&quot;/g, '"')
                        },
                        xmlTextNode: function (e) {
                            return g.xmlGenerator().createTextNode(e)
                        },
                        xmlHtmlNode: function (e) {
                            var t;
                            DOMParser ? t = (new DOMParser).parseFromString(e, "text/xml") : ((t = new ActiveXObject("Microsoft.XMLDOM")).async = "false", t.loadXML(e));
                            return t
                        },
                        getText: function (e) {
                            if (!e) return null;
                            var t = "";
                            0 === e.childNodes.length && e.nodeType === g.ElementType.TEXT && (t += e.nodeValue);
                            for (var n = 0; n < e.childNodes.length; n++) e.childNodes[n].nodeType === g.ElementType.TEXT && (t += e.childNodes[n].nodeValue);
                            return g.xmlescape(t)
                        },
                        copyElement: function (e) {
                            var t;
                            if (e.nodeType === g.ElementType.NORMAL) {
                                t = g.xmlElement(e.tagName);
                                for (var n = 0; n < e.attributes.length; n++) t.setAttribute(e.attributes[n].nodeName, e.attributes[n].value);
                                for (var r = 0; r < e.childNodes.length; r++) t.appendChild(g.copyElement(e.childNodes[r]))
                            } else e.nodeType === g.ElementType.TEXT && (t = g.xmlGenerator().createTextNode(e.nodeValue));
                            return t
                        },
                        createHtml: function (e) {
                            var t;
                            if (e.nodeType === g.ElementType.NORMAL) {
                                var n = e.nodeName.toLowerCase();
                                if (g.XHTML.validTag(n)) try {
                                    t = g.xmlElement(n);
                                    for (var r = 0; r < g.XHTML.attributes[n].length; r++) {
                                        var o = g.XHTML.attributes[n][r], s = e.getAttribute(o);
                                        if (null != s && "" !== s && !1 !== s && 0 !== s) if ("style" === o && "object" === f(s) && void 0 !== s.cssText && (s = s.cssText), "style" === o) {
                                            for (var i = [], a = s.split(";"), c = 0; c < a.length; c++) {
                                                var u = a[c].split(":"),
                                                    l = u[0].replace(/^\s*/, "").replace(/\s*$/, "").toLowerCase();
                                                if (g.XHTML.validCSS(l)) {
                                                    var d = u[1].replace(/^\s*/, "").replace(/\s*$/, "");
                                                    i.push(l + ": " + d)
                                                }
                                            }
                                            0 < i.length && (s = i.join("; "), t.setAttribute(o, s))
                                        } else t.setAttribute(o, s)
                                    }
                                    for (var E = 0; E < e.childNodes.length; E++) t.appendChild(g.createHtml(e.childNodes[E]))
                                } catch (e) {
                                    t = g.xmlTextNode("")
                                } else {
                                    t = g.xmlGenerator().createDocumentFragment();
                                    for (var h = 0; h < e.childNodes.length; h++) t.appendChild(g.createHtml(e.childNodes[h]))
                                }
                            } else if (e.nodeType === g.ElementType.FRAGMENT) {
                                t = g.xmlGenerator().createDocumentFragment();
                                for (var p = 0; p < e.childNodes.length; p++) t.appendChild(g.createHtml(e.childNodes[p]))
                            } else e.nodeType === g.ElementType.TEXT && (t = g.xmlTextNode(e.nodeValue));
                            return t
                        },
                        escapeNode: function (e) {
                            return "string" != typeof e ? e : e.replace(/^\s+|\s+$/g, "").replace(/\\/g, "\\5c").replace(/ /g, "\\20").replace(/\"/g, "\\22").replace(/\&/g, "\\26").replace(/\'/g, "\\27").replace(/\//g, "\\2f").replace(/:/g, "\\3a").replace(/</g, "\\3c").replace(/>/g, "\\3e").replace(/@/g, "\\40")
                        },
                        unescapeNode: function (e) {
                            return "string" != typeof e ? e : e.replace(/\\20/g, " ").replace(/\\22/g, '"').replace(/\\26/g, "&").replace(/\\27/g, "'").replace(/\\2f/g, "/").replace(/\\3a/g, ":").replace(/\\3c/g, "<").replace(/\\3e/g, ">").replace(/\\40/g, "@").replace(/\\5c/g, "\\")
                        },
                        getNodeFromJid: function (e) {
                            return e.indexOf("@") < 0 ? null : e.split("@")[0]
                        },
                        getDomainFromJid: function (e) {
                            var t = g.getBareJidFromJid(e);
                            if (t.indexOf("@") < 0) return t;
                            var n = t.split("@");
                            return n.splice(0, 1), n.join("@")
                        },
                        getResourceFromJid: function (e) {
                            var t = e.split("/");
                            return t.length < 2 ? null : (t.splice(0, 1), t.join("/"))
                        },
                        getBareJidFromJid: function (e) {
                            return e ? e.split("/")[0] : null
                        },
                        _handleError: function (e) {
                            void 0 !== e.stack && g.fatal(e.stack), e.sourceURL ? g.fatal("error: " + this.handler + " " + e.sourceURL + ":" + e.line + " - " + e.name + ": " + e.message) : e.fileName ? g.fatal("error: " + this.handler + " " + e.fileName + ":" + e.lineNumber + " - " + e.name + ": " + e.message) : g.fatal("error: " + e.message)
                        },
                        log: function (e, t) {
                            e === this.LogLevel.FATAL && "object" === f(window.console) && "function" == typeof window.console.error && window.console.error(t)
                        },
                        debug: function (e) {
                            this.log(this.LogLevel.DEBUG, e)
                        },
                        info: function (e) {
                            this.log(this.LogLevel.INFO, e)
                        },
                        warn: function (e) {
                            this.log(this.LogLevel.WARN, e)
                        },
                        error: function (e) {
                            this.log(this.LogLevel.ERROR, e)
                        },
                        fatal: function (e) {
                            this.log(this.LogLevel.FATAL, e)
                        },
                        serialize: function (n) {
                            if (!n) return null;
                            "function" == typeof n.tree && (n = n.tree());
                            var e = s(Array(n.attributes.length).keys()).map(function (e) {
                                return n.attributes[e].nodeName
                            });
                            e.sort();
                            var t = e.reduce(function (e, t) {
                                return "".concat(e, " ").concat(t, '="').concat(g.xmlescape(n.attributes.getNamedItem(t).value), '"')
                            }, "<".concat(n.nodeName));
                            if (0 < n.childNodes.length) {
                                t += ">";
                                for (var r = 0; r < n.childNodes.length; r++) {
                                    var o = n.childNodes[r];
                                    switch (o.nodeType) {
                                        case g.ElementType.NORMAL:
                                            t += g.serialize(o);
                                            break;
                                        case g.ElementType.TEXT:
                                            t += g.xmlescape(o.nodeValue);
                                            break;
                                        case g.ElementType.CDATA:
                                            t += "<![CDATA[" + o.nodeValue + "]]>"
                                    }
                                }
                                t += "</" + n.nodeName + ">"
                            } else t += "/>";
                            return t
                        },
                        _requestId: 0,
                        _connectionPlugins: {},
                        addConnectionPlugin: function (e, t) {
                            g._connectionPlugins[e] = t
                        },
                        Builder: function (e, t) {
                            "presence" !== e && "message" !== e && "iq" !== e || (t && !t.xmlns ? t.xmlns = g.NS.CLIENT : t || (t = {xmlns: g.NS.CLIENT})), this.nodeTree = g.xmlElement(e, t), this.node = this.nodeTree
                        }
                    };
                    g.Builder.prototype = {
                        tree: function () {
                            return this.nodeTree
                        }, toString: function () {
                            return g.serialize(this.nodeTree)
                        }, up: function () {
                            return this.node = this.node.parentNode, this
                        }, root: function () {
                            return this.node = this.nodeTree, this
                        }, attrs: function (e) {
                            for (var t in e) Object.prototype.hasOwnProperty.call(e, t) && (void 0 === e[t] ? this.node.removeAttribute(t) : this.node.setAttribute(t, e[t]));
                            return this
                        }, c: function (e, t, n) {
                            var r = g.xmlElement(e, t, n);
                            return this.node.appendChild(r), "string" != typeof n && "number" != typeof n && (this.node = r), this
                        }, cnode: function (e) {
                            var t, n = g.xmlGenerator();
                            try {
                                t = void 0 !== n.importNode
                            } catch (e) {
                                t = !1
                            }
                            var r = t ? n.importNode(e, !0) : g.copyElement(e);
                            return this.node.appendChild(r), this.node = r, this
                        }, t: function (e) {
                            var t = g.xmlTextNode(e);
                            return this.node.appendChild(t), this
                        }, h: function (e) {
                            var t = document.createElement("body");
                            t.innerHTML = e;
                            for (var n = g.createHtml(t); 0 < n.childNodes.length;) this.node.appendChild(n.childNodes[0]);
                            return this
                        }
                    }, g.Handler = function (e, t, n, r, o, s, i) {
                        this.handler = e, this.ns = t, this.name = n, this.type = r, this.id = o, this.options = i || {
                            matchBareFromJid: !1,
                            ignoreNamespaceFragment: !1
                        }, this.options.matchBare && (g.warn('The "matchBare" option is deprecated, use "matchBareFromJid" instead.'), this.options.matchBareFromJid = this.options.matchBare, delete this.options.matchBare), this.options.matchBareFromJid ? this.from = s ? g.getBareJidFromJid(s) : null : this.from = s, this.user = !0
                    }, g.Handler.prototype = {
                        getNamespace: function (e) {
                            var t = e.getAttribute("xmlns");
                            return t && this.options.ignoreNamespaceFragment && (t = t.split("#")[0]), t
                        }, namespaceMatch: function (e) {
                            var t = this, n = !1;
                            return !this.ns || (g.forEachChild(e, null, function (e) {
                                t.getNamespace(e) === t.ns && (n = !0)
                            }), n || this.getNamespace(e) === this.ns)
                        }, isMatch: function (e) {
                            var t = e.getAttribute("from");
                            this.options.matchBareFromJid && (t = g.getBareJidFromJid(t));
                            var n = e.getAttribute("type");
                            return !(!this.namespaceMatch(e) || this.name && !g.isTagEqual(e, this.name) || this.type && (Array.isArray(this.type) ? -1 === this.type.indexOf(n) : n !== this.type) || this.id && e.getAttribute("id") !== this.id || this.from && t !== this.from)
                        }, run: function (e) {
                            var t = null;
                            try {
                                t = this.handler(e)
                            } catch (e) {
                                throw g._handleError(e), e
                            }
                            return t
                        }, toString: function () {
                            return "{Handler: " + this.handler + "(" + this.name + "," + this.id + "," + this.ns + ")}"
                        }
                    }, g.TimedHandler = function (e, t) {
                        this.period = e, this.handler = t, this.lastCalled = (new Date).getTime(), this.user = !0
                    }, g.TimedHandler.prototype = {
                        run: function () {
                            return this.lastCalled = (new Date).getTime(), this.handler()
                        }, reset: function () {
                            this.lastCalled = (new Date).getTime()
                        }, toString: function () {
                            return "{TimedHandler: " + this.handler + "(" + this.period + ")}"
                        }
                    }, g.Connection = function (e, t) {
                        var n = this;
                        this.service = e, this.options = t || {};
                        var r = this.options.protocol || "";
                        for (var o in 0 === e.indexOf("ws:") || 0 === e.indexOf("wss:") || 0 === r.indexOf("ws") ? this._proto = new g.Websocket(this) : this._proto = new g.Bosh(this), this.jid = "", this.domain = null, this.features = null, this._sasl_data = {}, this.do_session = !1, this.do_bind = !1, this.timedHandlers = [], this.handlers = [], this.removeTimeds = [], this.removeHandlers = [], this.addTimeds = [], this.addHandlers = [], this.protocolErrorHandlers = {
                            HTTP: {},
                            websocket: {}
                        }, this._idleTimeout = null, this._disconnectTimeout = null, this.authenticated = !1, this.connected = !1, this.disconnecting = !1, this.do_authentication = !0, this.paused = !1, this.restored = !1, this._data = [], this._uniqueId = 0, this._sasl_success_handler = null, this._sasl_failure_handler = null, this._sasl_challenge_handler = null, this.maxRetries = 5, this._idleTimeout = setTimeout(function () {
                            return n._onIdle()
                        }, 100), T.default.addCookies(this.options.cookies), this.registerSASLMechanisms(this.options.mechanisms), g._connectionPlugins) if (Object.prototype.hasOwnProperty.call(g._connectionPlugins, o)) {
                            var s = function () {
                            };
                            s.prototype = g._connectionPlugins[o], this[o] = new s, this[o].init(this)
                        }
                    }, g.Connection.prototype = {
                        reset: function () {
                            this._proto._reset(), this.do_session = !1, this.do_bind = !1, this.timedHandlers = [], this.handlers = [], this.removeTimeds = [], this.removeHandlers = [], this.addTimeds = [], this.addHandlers = [], this.authenticated = !1, this.connected = !1, this.disconnecting = !1, this.restored = !1, this._data = [], this._requests = [], this._uniqueId = 0
                        }, pause: function () {
                            this.paused = !0
                        }, resume: function () {
                            this.paused = !1
                        }, getUniqueId: function (e) {
                            var t = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (e) {
                                var t = 16 * Math.random() | 0;
                                return ("x" === e ? t : 3 & t | 8).toString(16)
                            });
                            return "string" == typeof e || "number" == typeof e ? t + ":" + e : t + ""
                        }, addProtocolErrorHandler: function (e, t, n) {
                            this.protocolErrorHandlers[e][t] = n
                        }, connect: function (e, t, n, r, o, s, i) {
                            this.jid = e, this.authzid = g.getBareJidFromJid(this.jid), this.authcid = i || g.getNodeFromJid(this.jid), this.pass = t, this.servtype = "xmpp", this.connect_callback = n, this.disconnecting = !1, this.connected = !1, this.authenticated = !1, this.restored = !1, this.domain = g.getDomainFromJid(this.jid), this._changeConnectStatus(g.Status.CONNECTING, null), this._proto._connect(r, o, s)
                        }, attach: function (e, t, n, r, o, s, i) {
                            if (!(this._proto instanceof g.Bosh)) {
                                var a = new Error('The "attach" method can only be used with a BOSH connection.');
                                throw a.name = "StropheSessionError", a
                            }
                            this._proto._attach(e, t, n, r, o, s, i)
                        }, restore: function (e, t, n, r, o) {
                            if (!this._sessionCachingSupported()) {
                                var s = new Error('The "restore" method can only be used with a BOSH connection.');
                                throw s.name = "StropheSessionError", s
                            }
                            this._proto._restore(e, t, n, r, o)
                        }, _sessionCachingSupported: function () {
                            if (this._proto instanceof g.Bosh) {
                                if (!JSON) return !1;
                                try {
                                    sessionStorage.setItem("_strophe_", "_strophe_"), sessionStorage.removeItem("_strophe_")
                                } catch (e) {
                                    return !1
                                }
                                return !0
                            }
                            return !1
                        }, xmlInput: function (e) {
                        }, xmlOutput: function (e) {
                        }, rawInput: function (e) {
                        }, rawOutput: function (e) {
                        }, nextValidRid: function (e) {
                        }, send: function (e) {
                            if (null !== e) {
                                if ("function" == typeof e.sort) for (var t = 0; t < e.length; t++) this._queueData(e[t]); else "function" == typeof e.tree ? this._queueData(e.tree()) : this._queueData(e);
                                this._proto._send()
                            }
                        }, flush: function () {
                            clearTimeout(this._idleTimeout), this._onIdle()
                        }, sendPresence: function (e, t, n, r) {
                            var o = this, s = null;
                            "function" == typeof e.tree && (e = e.tree());
                            var i = e.getAttribute("id");
                            if (i || (i = this.getUniqueId("sendPresence"), e.setAttribute("id", i)), "function" == typeof t || "function" == typeof n) {
                                var a = this.addHandler(function (e) {
                                    s && o.deleteTimedHandler(s), "error" === e.getAttribute("type") ? n && n(e) : t && t(e)
                                }, null, "presence", null, i);
                                r && (s = this.addTimedHandler(r, function () {
                                    return o.deleteHandler(a), n && n(null), !1
                                }))
                            }
                            return this.send(e), i
                        }, sendIQ: function (e, r, o, t) {
                            var s = this, i = null;
                            "function" == typeof e.tree && (e = e.tree());
                            var n = e.getAttribute("id");
                            if (n || (n = this.getUniqueId("sendIQ"), e.setAttribute("id", n)), "function" == typeof r || "function" == typeof o) {
                                var a = this.addHandler(function (e) {
                                    i && s.deleteTimedHandler(i);
                                    var t = e.getAttribute("type");
                                    if ("result" === t) r && r(e); else {
                                        if ("error" !== t) {
                                            var n = new Error("Got bad IQ type of ".concat(t));
                                            throw n.name = "StropheError", n
                                        }
                                        o && o(e)
                                    }
                                }, null, "iq", ["error", "result"], n);
                                t && (i = this.addTimedHandler(t, function () {
                                    return s.deleteHandler(a), o && o(null), !1
                                }))
                            }
                            return this.send(e), n
                        }, _queueData: function (e) {
                            if (null === e || !e.tagName || !e.childNodes) {
                                var t = new Error("Cannot queue non-DOMElement.");
                                throw t.name = "StropheError", t
                            }
                            this._data.push(e)
                        }, _sendRestart: function () {
                            var e = this;
                            this._data.push("restart"), this._proto._sendRestart(), this._idleTimeout = setTimeout(function () {
                                return e._onIdle()
                            }, 100)
                        }, addTimedHandler: function (e, t) {
                            var n = new g.TimedHandler(e, t);
                            return this.addTimeds.push(n), n
                        }, deleteTimedHandler: function (e) {
                            this.removeTimeds.push(e)
                        }, addHandler: function (e, t, n, r, o, s, i) {
                            var a = new g.Handler(e, t, n, r, o, s, i);
                            return this.addHandlers.push(a), a
                        }, deleteHandler: function (e) {
                            this.removeHandlers.push(e);
                            var t = this.addHandlers.indexOf(e);
                            0 <= t && this.addHandlers.splice(t, 1)
                        }, registerSASLMechanisms: function (e) {
                            this.mechanisms = {}, (e = e || [g.SASLAnonymous, g.SASLExternal, g.SASLMD5, g.SASLOAuthBearer, g.SASLXOAuth2, g.SASLPlain, g.SASLSHA1]).forEach(this.registerSASLMechanism.bind(this))
                        }, registerSASLMechanism: function (e) {
                            this.mechanisms[e.prototype.name] = e
                        }, disconnect: function (e) {
                            if (this._changeConnectStatus(g.Status.DISCONNECTING, e), g.info("Disconnect was called because: " + e), this.connected) {
                                var t = !1;
                                this.disconnecting = !0, this.authenticated && (t = r({
                                    xmlns: g.NS.CLIENT,
                                    type: "unavailable"
                                })), this._disconnectTimeout = this._addSysTimedHandler(3e3, this._onDisconnectTimeout.bind(this)), this._proto._disconnect(t)
                            } else g.info("Disconnect was called before Strophe connected to the server"), this._proto._abortAllRequests(), this._doDisconnect()
                        }, _changeConnectStatus: function (e, t, n) {
                            for (var r in g._connectionPlugins) if (Object.prototype.hasOwnProperty.call(g._connectionPlugins, r)) {
                                var o = this[r];
                                if (o.statusChanged) try {
                                    o.statusChanged(e, t)
                                } catch (e) {
                                    g.error("".concat(r, " plugin caused an exception changing status: ").concat(e))
                                }
                            }
                            if (this.connect_callback) try {
                                this.connect_callback(e, t, n)
                            } catch (e) {
                                g._handleError(e), g.error("User connection callback caused an exception: ".concat(e))
                            }
                        }, _doDisconnect: function (e) {
                            "number" == typeof this._idleTimeout && clearTimeout(this._idleTimeout), null !== this._disconnectTimeout && (this.deleteTimedHandler(this._disconnectTimeout), this._disconnectTimeout = null), g.info("_doDisconnect was called"), this._proto._doDisconnect(), this.authenticated = !1, this.disconnecting = !1, this.restored = !1, this.handlers = [], this.timedHandlers = [], this.removeTimeds = [], this.removeHandlers = [], this.addTimeds = [], this.addHandlers = [], this._changeConnectStatus(g.Status.DISCONNECTED, e), this.connected = !1
                        }, _dataRecv: function (e, t) {
                            var o = this;
                            g.info("_dataRecv called");
                            var n = this._proto._reqToData(e);
                            if (null !== n) {
                                for (this.xmlInput !== g.Connection.prototype.xmlInput && (n.nodeName === this._proto.strip && n.childNodes.length ? this.xmlInput(n.childNodes[0]) : this.xmlInput(n)), this.rawInput !== g.Connection.prototype.rawInput && (t ? this.rawInput(t) : this.rawInput(g.serialize(n))); 0 < this.removeHandlers.length;) {
                                    var r = this.removeHandlers.pop(), s = this.handlers.indexOf(r);
                                    0 <= s && this.handlers.splice(s, 1)
                                }
                                for (; 0 < this.addHandlers.length;) this.handlers.push(this.addHandlers.pop());
                                if (this.disconnecting && this._proto._emptyQueue()) this._doDisconnect(); else {
                                    var i = n.getAttribute("type");
                                    if (null !== i && "terminate" === i) {
                                        if (this.disconnecting) return;
                                        var a = n.getAttribute("condition"), c = n.getElementsByTagName("conflict");
                                        return null !== a ? ("remote-stream-error" === a && 0 < c.length && (a = "conflict"), this._changeConnectStatus(g.Status.CONNFAIL, a)) : this._changeConnectStatus(g.Status.CONNFAIL, g.ErrorCondition.UNKOWN_REASON), void this._doDisconnect(a)
                                    }
                                    g.forEachChild(n, null, function (e) {
                                        var t = o.handlers;
                                        o.handlers = [];
                                        for (var n = 0; n < t.length; n++) {
                                            var r = t[n];
                                            try {
                                                !r.isMatch(e) || !o.authenticated && r.user ? o.handlers.push(r) : r.run(e) && o.handlers.push(r)
                                            } catch (e) {
                                                g.warn("Removing Strophe handlers due to uncaught exception: " + e.message)
                                            }
                                        }
                                    })
                                }
                            }
                        }, mechanisms: {}, _connect_cb: function (e, t, n) {
                            var r;
                            g.info("_connect_cb was called"), this.connected = !0;
                            try {
                                r = this._proto._reqToData(e)
                            } catch (e) {
                                if (e.name !== g.ErrorCondition.BAD_FORMAT) throw e;
                                this._changeConnectStatus(g.Status.CONNFAIL, g.ErrorCondition.BAD_FORMAT), this._doDisconnect(g.ErrorCondition.BAD_FORMAT)
                            }
                            if (r && (this.xmlInput !== g.Connection.prototype.xmlInput && (r.nodeName === this._proto.strip && r.childNodes.length ? this.xmlInput(r.childNodes[0]) : this.xmlInput(r)), this.rawInput !== g.Connection.prototype.rawInput && (n ? this.rawInput(n) : this.rawInput(g.serialize(r))), this._proto._connect_cb(r) !== g.Status.CONNFAIL)) if (r.getElementsByTagNameNS ? 0 < r.getElementsByTagNameNS(g.NS.STREAM, "features").length : 0 < r.getElementsByTagName("stream:features").length || 0 < r.getElementsByTagName("features").length) {
                                var o = [], s = r.getElementsByTagName("mechanism");
                                if (0 < s.length) for (var i = 0; i < s.length; i++) {
                                    var a = g.getText(s[i]);
                                    this.mechanisms[a] && o.push(this.mechanisms[a])
                                }
                                0 !== o.length || 0 !== r.getElementsByTagName("auth").length ? !1 !== this.do_authentication && this.authenticate(o) : this._proto._no_auth_received(t)
                            } else this._proto._no_auth_received(t)
                        }, sortMechanismsByPriority: function (e) {
                            for (var t = 0; t < e.length - 1; ++t) {
                                for (var n = t, r = t + 1; r < e.length; ++r) e[r].prototype.priority > e[n].prototype.priority && (n = r);
                                if (n !== t) {
                                    var o = e[t];
                                    e[t] = e[n], e[n] = o
                                }
                            }
                            return e
                        }, _attemptSASLAuth: function (e) {
                            e = this.sortMechanismsByPriority(e || []);
                            for (var t = !1, n = 0; n < e.length; ++n) if (e[n].prototype.test(this)) {
                                this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, "success", null, null), this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, "failure", null, null), this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, "challenge", null, null), this._sasl_mechanism = new e[n], this._sasl_mechanism.onStart(this);
                                var r = i("auth", {xmlns: g.NS.SASL, mechanism: this._sasl_mechanism.name});
                                if (this._sasl_mechanism.isClientFirst) {
                                    var o = this._sasl_mechanism.onChallenge(this, null);
                                    r.t(btoa(o))
                                }
                                this.send(r.tree()), t = !0;
                                break
                            }
                            return t
                        }, _attemptLegacyAuth: function () {
                            null === g.getNodeFromJid(this.jid) ? (this._changeConnectStatus(g.Status.CONNFAIL, g.ErrorCondition.MISSING_JID_NODE), this.disconnect(g.ErrorCondition.MISSING_JID_NODE)) : (this._changeConnectStatus(g.Status.AUTHENTICATING, null), this._addSysHandler(this._auth1_cb.bind(this), null, null, null, "_auth_1"), this.send(o({
                                type: "get",
                                to: this.domain,
                                id: "_auth_1"
                            }).c("query", {xmlns: g.NS.AUTH}).c("username", {}).t(g.getNodeFromJid(this.jid)).tree()))
                        }, authenticate: function (e) {
                            this._attemptSASLAuth(e) || this._attemptLegacyAuth()
                        }, _sasl_challenge_cb: function (e) {
                            var t = atob(g.getText(e)), n = this._sasl_mechanism.onChallenge(this, t),
                                r = i("response", {xmlns: g.NS.SASL});
                            return "" !== n && r.t(btoa(n)), this.send(r.tree()), !0
                        }, _auth1_cb: function (e) {
                            var t = o({
                                type: "set",
                                id: "_auth_2"
                            }).c("query", {xmlns: g.NS.AUTH}).c("username", {}).t(g.getNodeFromJid(this.jid)).up().c("password").t(this.pass);
                            return g.getResourceFromJid(this.jid) || (this.jid = g.getBareJidFromJid(this.jid) + "/strophe"), t.up().c("resource", {}).t(g.getResourceFromJid(this.jid)), this._addSysHandler(this._auth2_cb.bind(this), null, null, null, "_auth_2"), this.send(t.tree()), !1
                        }, _sasl_success_cb: function (e) {
                            var n = this;
                            if (this._sasl_data["server-signature"]) {
                                var t, r = atob(g.getText(e)).match(/([a-z]+)=([^,]+)(,|$)/);
                                if ("v" === r[1] && (t = r[2]), t !== this._sasl_data["server-signature"]) return this.deleteHandler(this._sasl_failure_handler), this._sasl_failure_handler = null, this._sasl_challenge_handler && (this.deleteHandler(this._sasl_challenge_handler), this._sasl_challenge_handler = null), this._sasl_data = {}, this._sasl_failure_cb(null)
                            }
                            g.info("SASL authentication succeeded."), this._sasl_mechanism && this._sasl_mechanism.onSuccess(), this.deleteHandler(this._sasl_failure_handler), this._sasl_failure_handler = null, this._sasl_challenge_handler && (this.deleteHandler(this._sasl_challenge_handler), this._sasl_challenge_handler = null);
                            var o = [], s = function (e, t) {
                                for (; e.length;) n.deleteHandler(e.pop());
                                return n._sasl_auth1_cb(t), !1
                            };
                            return o.push(this._addSysHandler(function (e) {
                                return s(o, e)
                            }, null, "stream:features", null, null)), o.push(this._addSysHandler(function (e) {
                                return s(o, e)
                            }, g.NS.STREAM, "features", null, null)), this._sendRestart(), !1
                        }, _sasl_auth1_cb: function (e) {
                            this.features = e;
                            for (var t = 0; t < e.childNodes.length; t++) {
                                var n = e.childNodes[t];
                                "bind" === n.nodeName && (this.do_bind = !0), "session" === n.nodeName && (this.do_session = !0)
                            }
                            if (!this.do_bind) return this._changeConnectStatus(g.Status.AUTHFAIL, null), !1;
                            this._addSysHandler(this._sasl_bind_cb.bind(this), null, null, null, "_bind_auth_2");
                            var r = g.getResourceFromJid(this.jid);
                            return r ? this.send(o({
                                type: "set",
                                id: "_bind_auth_2"
                            }).c("bind", {xmlns: g.NS.BIND}).c("resource", {}).t(r).tree()) : this.send(o({
                                type: "set",
                                id: "_bind_auth_2"
                            }).c("bind", {xmlns: g.NS.BIND}).tree()), !1
                        }, _sasl_bind_cb: function (e) {
                            var t;
                            if ("error" === e.getAttribute("type")) return g.info("SASL binding failed."), 0 < e.getElementsByTagName("conflict").length && (t = g.ErrorCondition.CONFLICT), this._changeConnectStatus(g.Status.AUTHFAIL, t, e), !1;
                            var n = e.getElementsByTagName("bind");
                            if (!(0 < n.length)) return g.info("SASL binding failed."), this._changeConnectStatus(g.Status.AUTHFAIL, null, e), !1;
                            var r = n[0].getElementsByTagName("jid");
                            0 < r.length && (this.jid = g.getText(r[0]), this.do_session ? (this._addSysHandler(this._sasl_session_cb.bind(this), null, null, null, "_session_auth_2"), this.send(o({
                                type: "set",
                                id: "_session_auth_2"
                            }).c("session", {xmlns: g.NS.SESSION}).tree())) : (this.authenticated = !0, this._changeConnectStatus(g.Status.CONNECTED, null)))
                        }, _sasl_session_cb: function (e) {
                            if ("result" === e.getAttribute("type")) this.authenticated = !0, this._changeConnectStatus(g.Status.CONNECTED, null); else if ("error" === e.getAttribute("type")) return g.info("Session creation failed."), this._changeConnectStatus(g.Status.AUTHFAIL, null, e), !1;
                            return !1
                        }, _sasl_failure_cb: function (e) {
                            return this._sasl_success_handler && (this.deleteHandler(this._sasl_success_handler), this._sasl_success_handler = null), this._sasl_challenge_handler && (this.deleteHandler(this._sasl_challenge_handler), this._sasl_challenge_handler = null), this._sasl_mechanism && this._sasl_mechanism.onFailure(), this._changeConnectStatus(g.Status.AUTHFAIL, null, e), !1
                        }, _auth2_cb: function (e) {
                            return "result" === e.getAttribute("type") ? (this.authenticated = !0, this._changeConnectStatus(g.Status.CONNECTED, null)) : "error" === e.getAttribute("type") && (this._changeConnectStatus(g.Status.AUTHFAIL, null, e), this.disconnect("authentication failed")), !1
                        }, _addSysTimedHandler: function (e, t) {
                            var n = new g.TimedHandler(e, t);
                            return n.user = !1, this.addTimeds.push(n), n
                        }, _addSysHandler: function (e, t, n, r, o) {
                            var s = new g.Handler(e, t, n, r, o);
                            return s.user = !1, this.addHandlers.push(s), s
                        }, _onDisconnectTimeout: function () {
                            return g.info("_onDisconnectTimeout was called"), this._changeConnectStatus(g.Status.CONNTIMEOUT, null), this._proto._onDisconnectTimeout(), this._doDisconnect(), !1
                        }, _onIdle: function () {
                            for (var e = this; 0 < this.addTimeds.length;) this.timedHandlers.push(this.addTimeds.pop());
                            for (; 0 < this.removeTimeds.length;) {
                                var t = this.removeTimeds.pop(), n = this.timedHandlers.indexOf(t);
                                0 <= n && this.timedHandlers.splice(n, 1)
                            }
                            for (var r = (new Date).getTime(), o = [], s = 0; s < this.timedHandlers.length; s++) {
                                var i = this.timedHandlers[s];
                                if (this.authenticated || !i.user) i.lastCalled + i.period - r <= 0 ? i.run() && o.push(i) : o.push(i)
                            }
                            this.timedHandlers = o, clearTimeout(this._idleTimeout), this._proto._onIdle(), this.connected && (this._idleTimeout = setTimeout(function () {
                                return e._onIdle()
                            }, 100))
                        }
                    }, g.SASLMechanism = function (e, t, n) {
                        this.name = e, this.isClientFirst = t, this.priority = n
                    }, g.SASLMechanism.prototype = {
                        test: function (e) {
                            return !0
                        }, onStart: function (e) {
                            this._connection = e
                        }, onChallenge: function (e, t) {
                            throw new Error("You should implement challenge handling!")
                        }, onFailure: function () {
                            this._connection = null
                        }, onSuccess: function () {
                            this._connection = null
                        }
                    }, g.SASLAnonymous = function () {
                    }, g.SASLAnonymous.prototype = new g.SASLMechanism("ANONYMOUS", !1, 20), g.SASLAnonymous.prototype.test = function (e) {
                        return null === e.authcid
                    }, g.SASLPlain = function () {
                    }, g.SASLPlain.prototype = new g.SASLMechanism("PLAIN", !0, 50), g.SASLPlain.prototype.test = function (e) {
                        return null !== e.authcid
                    }, g.SASLPlain.prototype.onChallenge = function (e) {
                        var t = e.authzid;
                        return t += "\0", t += e.authcid, t += "\0", t += e.pass, T.default.utf16to8(t)
                    }, g.SASLSHA1 = function () {
                    }, g.SASLSHA1.prototype = new g.SASLMechanism("SCRAM-SHA-1", !0, 70), g.SASLSHA1.prototype.test = function (e) {
                        return null !== e.authcid
                    }, g.SASLSHA1.prototype.onChallenge = function (e, t, n) {
                        var r = n || p.default.hexdigest(1234567890 * Math.random()),
                            o = "n=" + T.default.utf16to8(e.authcid);
                        return o += ",r=", o += r, e._sasl_data.cnonce = r, o = "n,," + (e._sasl_data["client-first-message-bare"] = o), this.onChallenge = function (e, t) {
                            for (var n, r, o, s, i, a, c, u, l = "c=biws,", d = "".concat(e._sasl_data["client-first-message-bare"], ",").concat(t, ","), E = e._sasl_data.cnonce, h = /([a-z]+)=([^,]+)(,|$)/; t.match(h);) {
                                var p = t.match(h);
                                switch (t = t.replace(p[0], ""), p[1]) {
                                    case"r":
                                        n = p[2];
                                        break;
                                    case"s":
                                        r = p[2];
                                        break;
                                    case"i":
                                        o = p[2]
                                }
                            }
                            if (n.substr(0, E.length) !== E) return e._sasl_data = {}, e._sasl_failure_cb();
                            d += l += "r=" + n, r = atob(r), r += "\0\0\0";
                            var f = T.default.utf16to8(e.pass);
                            for (s = a = S.default.core_hmac_sha1(f, r), c = 1; c < o; c++) {
                                for (i = S.default.core_hmac_sha1(f, S.default.binb2str(a)), u = 0; u < 5; u++) s[u] ^= i[u];
                                a = i
                            }
                            s = S.default.binb2str(s);
                            var g = S.default.core_hmac_sha1(s, "Client Key"),
                                _ = S.default.str_hmac_sha1(s, "Server Key"),
                                C = S.default.core_hmac_sha1(S.default.str_sha1(S.default.binb2str(g)), d);
                            for (e._sasl_data["server-signature"] = S.default.b64_hmac_sha1(_, d), u = 0; u < 5; u++) g[u] ^= C[u];
                            return l += ",p=" + btoa(S.default.binb2str(g))
                        }, o
                    }, g.SASLMD5 = function () {
                    }, g.SASLMD5.prototype = new g.SASLMechanism("DIGEST-MD5", !1, 60), g.SASLMD5.prototype.test = function (e) {
                        return null !== e.authcid
                    }, g.SASLMD5.prototype._quote = function (e) {
                        return '"' + e.replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"'
                    }, g.SASLMD5.prototype.onChallenge = function (e, t, n) {
                        for (var r = /([a-z]+)=("[^"]+"|[^,"]+)(?:,|$)/, o = n || p.default.hexdigest("" + 1234567890 * Math.random()), s = "", i = null, a = ""; t.match(r);) {
                            var c = t.match(r);
                            switch (t = t.replace(c[0], ""), c[2] = c[2].replace(/^"(.+)"$/, "$1"), c[1]) {
                                case"realm":
                                    s = c[2];
                                    break;
                                case"nonce":
                                    a = c[2];
                                    break;
                                case"qop":
                                    c[2];
                                    break;
                                case"host":
                                    i = c[2]
                            }
                        }
                        var u = e.servtype + "/" + e.domain;
                        null !== i && (u = u + "/" + i);
                        var l = T.default.utf16to8(e.authcid + ":" + s + ":" + this._connection.pass),
                            d = p.default.hash(l) + ":" + a + ":" + o, E = "AUTHENTICATE:" + u, h = "";
                        return h += "charset=utf-8,", h += "username=" + this._quote(T.default.utf16to8(e.authcid)) + ",", h += "realm=" + this._quote(s) + ",", h += "nonce=" + this._quote(a) + ",", h += "nc=00000001,", h += "cnonce=" + this._quote(o) + ",", h += "digest-uri=" + this._quote(u) + ",", h += "response=" + p.default.hexdigest(p.default.hexdigest(d) + ":" + a + ":00000001:" + o + ":auth:" + p.default.hexdigest(E)) + ",", h += "qop=auth", this.onChallenge = function () {
                            return ""
                        }, h
                    }, g.SASLOAuthBearer = function () {
                    }, g.SASLOAuthBearer.prototype = new g.SASLMechanism("OAUTHBEARER", !0, 40), g.SASLOAuthBearer.prototype.test = function (e) {
                        return null !== e.pass
                    }, g.SASLOAuthBearer.prototype.onChallenge = function (e) {
                        var t = "n,";
                        return null !== e.authcid && (t = t + "a=" + e.authzid), t += ",", t += "", t += "auth=Bearer ", t += e.pass, t += "", t += "", T.default.utf16to8(t)
                    }, g.SASLExternal = function () {
                    }, g.SASLExternal.prototype = new g.SASLMechanism("EXTERNAL", !0, 10), g.SASLExternal.prototype.onChallenge = function (e) {
                        return e.authcid === e.authzid ? "" : e.authzid
                    }, g.SASLXOAuth2 = function () {
                    }, g.SASLXOAuth2.prototype = new g.SASLMechanism("X-OAUTH2", !0, 30), g.SASLXOAuth2.prototype.test = function (e) {
                        return null !== e.pass
                    }, g.SASLXOAuth2.prototype.onChallenge = function (e) {
                        var t = "\0";
                        return null !== e.authcid && (t += e.authzid), t += "\0", t += e.pass, T.default.utf16to8(t)
                    }, t.default = {
                        Strophe: g,
                        $build: i,
                        $iq: o,
                        $msg: function (e) {
                            return new g.Builder("message", e)
                        },
                        $pres: r,
                        SHA1: S.default,
                        MD5: p.default,
                        b64_hmac_sha1: S.default.b64_hmac_sha1,
                        b64_sha1: S.default.b64_sha1,
                        str_hmac_sha1: S.default.str_hmac_sha1,
                        str_sha1: S.default.str_sha1
                    }
                }, "./src/md5.js": function (e, t, n) {
                    "use strict";
                    n.r(t), n.d(t, "default", function () {
                        return s
                    });
                    var d = function (e, t) {
                        var n = (65535 & e) + (65535 & t);
                        return (e >> 16) + (t >> 16) + (n >> 16) << 16 | 65535 & n
                    }, r = function (e) {
                        for (var t = [], n = 0; n < 8 * e.length; n += 8) t[n >> 5] |= (255 & e.charCodeAt(n / 8)) << n % 32;
                        return t
                    }, a = function (e, t, n, r, o, s) {
                        return d((i = d(d(t, e), d(r, s))) << (a = o) | i >>> 32 - a, n);
                        var i, a
                    }, E = function (e, t, n, r, o, s, i) {
                        return a(t & n | ~t & r, e, t, o, s, i)
                    }, h = function (e, t, n, r, o, s, i) {
                        return a(t & r | n & ~r, e, t, o, s, i)
                    }, p = function (e, t, n, r, o, s, i) {
                        return a(t ^ n ^ r, e, t, o, s, i)
                    }, f = function (e, t, n, r, o, s, i) {
                        return a(n ^ (t | ~r), e, t, o, s, i)
                    }, o = function (e, t) {
                        e[t >> 5] |= 128 << t % 32, e[14 + (t + 64 >>> 9 << 4)] = t;
                        for (var n, r, o, s, i = 1732584193, a = -271733879, c = -1732584194, u = 271733878, l = 0; l < e.length; l += 16) i = E(n = i, r = a, o = c, s = u, e[l + 0], 7, -680876936), u = E(u, i, a, c, e[l + 1], 12, -389564586), c = E(c, u, i, a, e[l + 2], 17, 606105819), a = E(a, c, u, i, e[l + 3], 22, -1044525330), i = E(i, a, c, u, e[l + 4], 7, -176418897), u = E(u, i, a, c, e[l + 5], 12, 1200080426), c = E(c, u, i, a, e[l + 6], 17, -1473231341), a = E(a, c, u, i, e[l + 7], 22, -45705983), i = E(i, a, c, u, e[l + 8], 7, 1770035416), u = E(u, i, a, c, e[l + 9], 12, -1958414417), c = E(c, u, i, a, e[l + 10], 17, -42063), a = E(a, c, u, i, e[l + 11], 22, -1990404162), i = E(i, a, c, u, e[l + 12], 7, 1804603682), u = E(u, i, a, c, e[l + 13], 12, -40341101), c = E(c, u, i, a, e[l + 14], 17, -1502002290), a = E(a, c, u, i, e[l + 15], 22, 1236535329), i = h(i, a, c, u, e[l + 1], 5, -165796510), u = h(u, i, a, c, e[l + 6], 9, -1069501632), c = h(c, u, i, a, e[l + 11], 14, 643717713), a = h(a, c, u, i, e[l + 0], 20, -373897302), i = h(i, a, c, u, e[l + 5], 5, -701558691), u = h(u, i, a, c, e[l + 10], 9, 38016083), c = h(c, u, i, a, e[l + 15], 14, -660478335), a = h(a, c, u, i, e[l + 4], 20, -405537848), i = h(i, a, c, u, e[l + 9], 5, 568446438), u = h(u, i, a, c, e[l + 14], 9, -1019803690), c = h(c, u, i, a, e[l + 3], 14, -187363961), a = h(a, c, u, i, e[l + 8], 20, 1163531501), i = h(i, a, c, u, e[l + 13], 5, -1444681467), u = h(u, i, a, c, e[l + 2], 9, -51403784), c = h(c, u, i, a, e[l + 7], 14, 1735328473), a = h(a, c, u, i, e[l + 12], 20, -1926607734), i = p(i, a, c, u, e[l + 5], 4, -378558), u = p(u, i, a, c, e[l + 8], 11, -2022574463), c = p(c, u, i, a, e[l + 11], 16, 1839030562), a = p(a, c, u, i, e[l + 14], 23, -35309556), i = p(i, a, c, u, e[l + 1], 4, -1530992060), u = p(u, i, a, c, e[l + 4], 11, 1272893353), c = p(c, u, i, a, e[l + 7], 16, -155497632), a = p(a, c, u, i, e[l + 10], 23, -1094730640), i = p(i, a, c, u, e[l + 13], 4, 681279174), u = p(u, i, a, c, e[l + 0], 11, -358537222), c = p(c, u, i, a, e[l + 3], 16, -722521979), a = p(a, c, u, i, e[l + 6], 23, 76029189), i = p(i, a, c, u, e[l + 9], 4, -640364487), u = p(u, i, a, c, e[l + 12], 11, -421815835), c = p(c, u, i, a, e[l + 15], 16, 530742520), a = p(a, c, u, i, e[l + 2], 23, -995338651), i = f(i, a, c, u, e[l + 0], 6, -198630844), u = f(u, i, a, c, e[l + 7], 10, 1126891415), c = f(c, u, i, a, e[l + 14], 15, -1416354905), a = f(a, c, u, i, e[l + 5], 21, -57434055), i = f(i, a, c, u, e[l + 12], 6, 1700485571), u = f(u, i, a, c, e[l + 3], 10, -1894986606), c = f(c, u, i, a, e[l + 10], 15, -1051523), a = f(a, c, u, i, e[l + 1], 21, -2054922799), i = f(i, a, c, u, e[l + 8], 6, 1873313359), u = f(u, i, a, c, e[l + 15], 10, -30611744), c = f(c, u, i, a, e[l + 6], 15, -1560198380), a = f(a, c, u, i, e[l + 13], 21, 1309151649), i = f(i, a, c, u, e[l + 4], 6, -145523070), u = f(u, i, a, c, e[l + 11], 10, -1120210379), c = f(c, u, i, a, e[l + 2], 15, 718787259), a = f(a, c, u, i, e[l + 9], 21, -343485551), i = d(i, n), a = d(a, r), c = d(c, o), u = d(u, s);
                        return [i, a, c, u]
                    }, s = {
                        hexdigest: function (e) {
                            return function (e) {
                                for (var t = "0123456789abcdef", n = "", r = 0; r < 4 * e.length; r++) n += t.charAt(e[r >> 2] >> r % 4 * 8 + 4 & 15) + t.charAt(e[r >> 2] >> r % 4 * 8 & 15);
                                return n
                            }(o(r(e), 8 * e.length))
                        }, hash: function (e) {
                            return function (e) {
                                for (var t = "", n = 0; n < 32 * e.length; n += 8) t += String.fromCharCode(e[n >> 5] >>> n % 32 & 255);
                                return t
                            }(o(r(e), 8 * e.length))
                        }
                    }
                }, "./src/sha1.js": function (e, t, n) {
                    "use strict";

                    function a(e, t) {
                        e[t >> 5] |= 128 << 24 - t % 32, e[15 + (t + 64 >> 9 << 4)] = t;
                        var n, r, o, s, i, a, c, u, l, d = new Array(80), E = 1732584193, h = -271733879,
                            p = -1732584194, f = 271733878, g = -1009589776;
                        for (n = 0; n < e.length; n += 16) {
                            for (s = E, i = h, a = p, c = f, u = g, r = 0; r < 80; r++) d[r] = r < 16 ? e[n + r] : S(d[r - 3] ^ d[r - 8] ^ d[r - 14] ^ d[r - 16], 1), o = C(C(S(E, 5), _(r, h, p, f)), C(C(g, d[r]), (l = r) < 20 ? 1518500249 : l < 40 ? 1859775393 : l < 60 ? -1894007588 : -899497514)), g = f, f = p, p = S(h, 30), h = E, E = o;
                            E = C(E, s), h = C(h, i), p = C(p, a), f = C(f, c), g = C(g, u)
                        }
                        return [E, h, p, f, g]
                    }

                    function _(e, t, n, r) {
                        return e < 20 ? t & n | ~t & r : e < 40 ? t ^ n ^ r : e < 60 ? t & n | t & r | n & r : t ^ n ^ r
                    }

                    function r(e, t) {
                        var n = c(e);
                        16 < n.length && (n = a(n, 8 * e.length));
                        for (var r = new Array(16), o = new Array(16), s = 0; s < 16; s++) r[s] = 909522486 ^ n[s], o[s] = 1549556828 ^ n[s];
                        var i = a(r.concat(c(t)), 512 + 8 * t.length);
                        return a(o.concat(i), 672)
                    }

                    function C(e, t) {
                        var n = (65535 & e) + (65535 & t);
                        return (e >> 16) + (t >> 16) + (n >> 16) << 16 | 65535 & n
                    }

                    function S(e, t) {
                        return e << t | e >>> 32 - t
                    }

                    function c(e) {
                        for (var t = [], n = 0; n < 8 * e.length; n += 8) t[n >> 5] |= (255 & e.charCodeAt(n / 8)) << 24 - n % 32;
                        return t
                    }

                    function o(e) {
                        for (var t, n, r = "", o = 0; o < 4 * e.length; o += 3) for (t = (e[o >> 2] >> 8 * (3 - o % 4) & 255) << 16 | (e[o + 1 >> 2] >> 8 * (3 - (o + 1) % 4) & 255) << 8 | e[o + 2 >> 2] >> 8 * (3 - (o + 2) % 4) & 255, n = 0; n < 4; n++) 8 * o + 6 * n > 32 * e.length ? r += "=" : r += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(t >> 6 * (3 - n) & 63);
                        return r
                    }

                    function s(e) {
                        for (var t = "", n = 0; n < 32 * e.length; n += 8) t += String.fromCharCode(e[n >> 5] >>> 24 - n % 32 & 255);
                        return t
                    }

                    n.r(t), n.d(t, "default", function () {
                        return i
                    });
                    var i = {
                        b64_hmac_sha1: function (e, t) {
                            return o(r(e, t))
                        }, b64_sha1: function (e) {
                            return o(a(c(e), 8 * e.length))
                        }, binb2str: s, core_hmac_sha1: r, str_hmac_sha1: function (e, t) {
                            return s(r(e, t))
                        }, str_sha1: function (e) {
                            return s(a(c(e), 8 * e.length))
                        }
                    }
                }, "./src/strophe.js": function (e, t, n) {
                    "use strict";
                    n.r(t);
                    n("./src/bosh.js"), n("./src/websocket.js");
                    var r = n("./src/core.js");
                    n.d(t, "default", function () {
                        return r.default
                    })
                }, "./src/utils.js": function (e, t, n) {
                    "use strict";

                    function c(e) {
                        return (c = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
                            return typeof e
                        } : function (e) {
                            return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
                        })(e)
                    }

                    n.r(t), n.d(t, "default", function () {
                        return r
                    });
                    var r = {
                        utf16to8: function (e) {
                            var t, n, r = "", o = e.length;
                            for (t = 0; t < o; t++) 0 <= (n = e.charCodeAt(t)) && n <= 127 ? r += e.charAt(t) : (2047 < n ? (r += String.fromCharCode(224 | n >> 12 & 15), r += String.fromCharCode(128 | n >> 6 & 63)) : r += String.fromCharCode(192 | n >> 6 & 31), r += String.fromCharCode(128 | n >> 0 & 63));
                            return r
                        }, addCookies: function (e) {
                            for (var t in e = e || {}) if (Object.prototype.hasOwnProperty.call(e, t)) {
                                var n = "", r = "", o = "", s = e[t], i = "object" === c(s),
                                    a = escape(unescape(i ? s.value : s));
                                i && (n = s.expires ? ";expires=" + s.expires : "", r = s.domain ? ";domain=" + s.domain : "", o = s.path ? ";path=" + s.path : ""), document.cookie = t + "=" + a + n + r + o
                            }
                        }
                    }
                }, "./src/websocket.js": function (e, t, n) {
                    "use strict";
                    n.r(t);
                    var r = n("./src/core.js"), u = r.default.Strophe, o = r.default.$build;
                    u.Websocket = function (e) {
                        this._conn = e, this.strip = "wrapper";
                        var t = e.service;
                        if (0 !== t.indexOf("ws:") && 0 !== t.indexOf("wss:")) {
                            var n = "";
                            "ws" === e.options.protocol && "https:" !== window.location.protocol ? n += "ws" : n += "wss", n += "://" + window.location.host, 0 !== t.indexOf("/") ? n += window.location.pathname + t : n += t, e.service = n
                        }
                    }, u.Websocket.prototype = {
                        _buildStream: function () {
                            return o("open", {xmlns: u.NS.FRAMING, to: this._conn.domain, version: "1.0"})
                        }, _check_streamerror: function (e, t) {
                            var n;
                            if (0 === (n = e.getElementsByTagNameNS ? e.getElementsByTagNameNS(u.NS.STREAM, "error") : e.getElementsByTagName("stream:error")).length) return !1;
                            for (var r = n[0], o = "", s = "", i = 0; i < r.childNodes.length; i++) {
                                var a = r.childNodes[i];
                                if ("urn:ietf:params:xml:ns:xmpp-streams" !== a.getAttribute("xmlns")) break;
                                "text" === a.nodeName ? s = a.textContent : o = a.nodeName
                            }
                            var c = "WebSocket stream error: ";
                            return c += o || "unknown", s && (c += " - " + s), u.error(c), this._conn._changeConnectStatus(t, o), this._conn._doDisconnect(), !0
                        }, _reset: function () {
                        }, _connect: function () {
                            this._closeSocket(), this.socket = new WebSocket(this._conn.service, "xmpp"), this.socket.onopen = this._onOpen.bind(this), this.socket.onerror = this._onError.bind(this), this.socket.onclose = this._onClose.bind(this), this.socket.onmessage = this._connect_cb_wrapper.bind(this)
                        }, _connect_cb: function (e) {
                            if (this._check_streamerror(e, u.Status.CONNFAIL)) return u.Status.CONNFAIL
                        }, _handleStreamStart: function (e) {
                            var t = !1, n = e.getAttribute("xmlns");
                            "string" != typeof n ? t = "Missing xmlns in <open />" : n !== u.NS.FRAMING && (t = "Wrong xmlns in <open />: " + n);
                            var r = e.getAttribute("version");
                            return "string" != typeof r ? t = "Missing version in <open />" : "1.0" !== r && (t = "Wrong version in <open />: " + r), !t || (this._conn._changeConnectStatus(u.Status.CONNFAIL, t), this._conn._doDisconnect(), !1)
                        }, _connect_cb_wrapper: function (e) {
                            if (0 === e.data.indexOf("<open ") || 0 === e.data.indexOf("<?xml")) {
                                var t = e.data.replace(/^(<\?.*?\?>\s*)*/, "");
                                if ("" === t) return;
                                var n = (new DOMParser).parseFromString(t, "text/xml").documentElement;
                                this._conn.xmlInput(n), this._conn.rawInput(e.data), this._handleStreamStart(n) && this._connect_cb(n)
                            } else if (0 === e.data.indexOf("<close ")) {
                                var r = (new DOMParser).parseFromString(e.data, "text/xml").documentElement;
                                this._conn.xmlInput(r), this._conn.rawInput(e.data);
                                var o = r.getAttribute("see-other-uri");
                                if (o) {
                                    var s = this._conn.service;
                                    (0 <= s.indexOf("wss:") && 0 <= o.indexOf("wss:") || 0 <= s.indexOf("ws:")) && (this._conn._changeConnectStatus(u.Status.REDIRECT, "Received see-other-uri, resetting connection"), this._conn.reset(), this._conn.service = o, this._connect())
                                } else this._conn._changeConnectStatus(u.Status.CONNFAIL, "Received closing stream"), this._conn._doDisconnect()
                            } else {
                                var i = this._streamWrap(e.data),
                                    a = (new DOMParser).parseFromString(i, "text/xml").documentElement;
                                this.socket.onmessage = this._onMessage.bind(this), this._conn._connect_cb(a, null, e.data)
                            }
                        }, _disconnect: function (e) {
                            if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {
                                e && this._conn.send(e);
                                var t = o("close", {xmlns: u.NS.FRAMING});
                                this._conn.xmlOutput(t.tree());
                                var n = u.serialize(t);
                                this._conn.rawOutput(n);
                                try {
                                    this.socket.send(n)
                                } catch (e) {
                                    u.info("Couldn't send <close /> tag.")
                                }
                            }
                            this._conn._doDisconnect()
                        }, _doDisconnect: function () {
                            u.info("WebSockets _doDisconnect was called"), this._closeSocket()
                        }, _streamWrap: function (e) {
                            return "<wrapper>" + e + "</wrapper>"
                        }, _closeSocket: function () {
                            if (this.socket) try {
                                this.socket.onerror = null, this.socket.close()
                            } catch (e) {
                                u.debug(e.message)
                            }
                            this.socket = null
                        }, _emptyQueue: function () {
                            return !0
                        }, _onClose: function (e) {
                            this._conn.connected && !this._conn.disconnecting ? (u.error("Websocket closed unexpectedly"), this._conn._doDisconnect()) : e && 1006 === e.code && !this._conn.connected && this.socket ? (u.error("Websocket closed unexcectedly"), this._conn._changeConnectStatus(u.Status.CONNFAIL, "The WebSocket connection could not be established or was disconnected."), this._conn._doDisconnect()) : u.info("Websocket closed")
                        }, _no_auth_received: function (e) {
                            u.error("Server did not offer a supported authentication mechanism"), this._changeConnectStatus(u.Status.CONNFAIL, u.ErrorCondition.NO_AUTH_MECH), e && e.call(this._conn), this._conn._doDisconnect()
                        }, _onDisconnectTimeout: function () {
                        }, _abortAllRequests: function () {
                        }, _onError: function (e) {
                            u.error("Websocket error " + e), this._conn._changeConnectStatus(u.Status.CONNFAIL, "The WebSocket connection could not be established or was disconnected."), this._disconnect()
                        }, _onIdle: function () {
                            var e = this._conn._data;
                            if (0 < e.length && !this._conn.paused) {
                                for (var t = 0; t < e.length; t++) if (null !== e[t]) {
                                    var n = void 0;
                                    n = "restart" === e[t] ? this._buildStream().tree() : e[t];
                                    var r = u.serialize(n);
                                    this._conn.xmlOutput(n), this._conn.rawOutput(r), this.socket.send(r)
                                }
                                this._conn._data = []
                            }
                        }, _onMessage: function (e) {
                            var t, n = '<close xmlns="urn:ietf:params:xml:ns:xmpp-framing" />';
                            if (e.data === n) return this._conn.rawInput(n), this._conn.xmlInput(e), void (this._conn.disconnecting || this._conn._doDisconnect());
                            if (0 === e.data.search("<open ")) {
                                if (t = (new DOMParser).parseFromString(e.data, "text/xml").documentElement, !this._handleStreamStart(t)) return
                            } else {
                                var r = this._streamWrap(e.data);
                                t = (new DOMParser).parseFromString(r, "text/xml").documentElement
                            }
                            return this._check_streamerror(t, u.Status.ERROR) ? void 0 : this._conn.disconnecting && "presence" === t.firstChild.nodeName && "unavailable" === t.firstChild.getAttribute("type") ? (this._conn.xmlInput(t), void this._conn.rawInput(u.serialize(t))) : void this._conn._dataRecv(t, e.data)
                        }, _onOpen: function () {
                            u.info("Websocket open");
                            var e = this._buildStream();
                            this._conn.xmlOutput(e.tree());
                            var t = u.serialize(e);
                            this._conn.rawOutput(t), this.socket.send(t)
                        }, _reqToData: function (e) {
                            return e
                        }, _send: function () {
                            this._conn.flush()
                        }, _sendRestart: function () {
                            clearTimeout(this._conn._idleTimeout), this._conn._onIdle.bind(this._conn)()
                        }
                    }
                }
            }).default
        }, e.exports = r()
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(6), o = n(0), s = n(1), i = function () {
            function e() {
            }

            return e.trasformJSONGroup = function (e) {
                var t;
                try {
                    t = new r.Group(e[o.GroupConstants.KEYS.GUID], e[o.GroupConstants.KEYS.NAME], e[o.GroupConstants.KEYS.NAME]), Object.assign(t, e), e = t
                } catch (e) {
                    s.Logger.error("GroupsController:transformJSONGroup", e)
                }
                return e
            }, e
        }();
        t.GroupsController = i
    }, function (e, t, n) {
        "use strict";
        var r, s = this && this.__extends || (r = function (e, t) {
            return (r = Object.setPrototypeOf || {__proto__: []} instanceof Array && function (e, t) {
                e.__proto__ = t
            } || function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n])
            })(e, t)
        }, function (e, t) {
            function n() {
                this.constructor = e
            }

            r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
        }), i = this && this.__assign || function () {
            return (i = Object.assign || function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++) for (var o in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e
            }).apply(this, arguments)
        };
        t.__esModule = !0;
        var o = n(12), a = n(0), c = n(5), u = n(6), l = n(1), d = function (o) {
            function e(e, t, n) {
                var r = o.call(this, e, "text", n, a.MessageCategory.MESSAGE) || this;
                return r.type = "text", r.data = {text: t}, r.text = t, r
            }

            return s(e, o), e.prototype.getSender = function () {
                try {
                    return this.getSenderFromData()
                } catch (e) {
                    return this.sender
                }
            }, e.prototype.getReceiver = function () {
                try {
                    return this.getReceiverFromData()
                } catch (e) {
                    return this.receiver
                }
            }, e.prototype.getMetadata = function () {
                return this.data.metadata && (this.metadata = this.data.metadata), this.metadata
            }, e.prototype.setMetadata = function (e) {
                this.metadata = e, this.data = i({}, this.data, {metadata: e})
            }, e.prototype.getData = function () {
                return this.data
            }, e.prototype.setData = function (e) {
                this.data = e
            }, e.prototype.getText = function () {
                return this.text
            }, e.prototype.setText = function (e) {
                this.text = e, this.data.text = e
            }, e.prototype.setProcessedText = function (e) {
                this.processedText = e
            }, e.prototype.getProcessedText = function () {
                return this.processedText
            }, e.prototype.getSenderFromData = function () {
                try {
                    var e = this.getData();
                    if (e[a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITIES][a.MessageConstatnts.KEYS.SENDER][a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITITY]) return new c.User(e[a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITIES][a.MessageConstatnts.KEYS.SENDER][a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITITY])
                } catch (e) {
                    l.Logger.error("TextMessageModel: getSenderFromData", e)
                }
            }, e.prototype.getReceiverFromData = function () {
                try {
                    var e = this.getData(),
                        t = e[a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITIES][a.MessageConstatnts.KEYS.RECEIVER][a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITITY];
                    if (e[a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITIES][a.MessageConstatnts.KEYS.RECEIVER][a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITYTYPE] == [a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITY_TYPE.USER]) return new c.User(t);
                    var n = new u.Group(t[a.GroupConstants.KEYS.GUID], t[a.GroupConstants.KEYS.NAME], t[a.MessageConstatnts.KEYS.TYPE]);
                    return Object.assign(n, t)
                } catch (e) {
                    l.Logger.error("TextMessageModel: getReceiverFromData", e)
                }
            }, e.TYPE = a.MessageConstatnts.TYPE.TEXT, e.RECEIVER_TYPE = a.MessageConstatnts.RECEIVER_TYPE, e.CATEGORY = a.MessageConstatnts.CATEGORY.MESSAGE, e
        }(o.BaseMessage);
        t.TextMessage = d
    }, function (e, t, n) {
        "use strict";
        var r, o = this && this.__extends || (r = function (e, t) {
            return (r = Object.setPrototypeOf || {__proto__: []} instanceof Array && function (e, t) {
                e.__proto__ = t
            } || function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n])
            })(e, t)
        }, function (e, t) {
            function n() {
                this.constructor = e
            }

            r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
        }), i = this && this.__assign || function () {
            return (i = Object.assign || function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++) for (var o in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e
            }).apply(this, arguments)
        };
        t.__esModule = !0;
        var s = n(12), a = n(0), c = n(5), u = n(6), l = n(1), d = function (s) {
            function e(e, t, n, r) {
                var o = s.call(this, e, n, r, a.MessageCategory.MESSAGE) || this;
                return o.data = {url: "object" != typeof t ? t : void 0}, o.file = t, o
            }

            return o(e, s), e.prototype.setCaption = function (e) {
                this.caption = e, this.data[a.MessageConstatnts.KEYS.TEXT] = e
            }, e.prototype.getCaption = function () {
                return this.data[a.MessageConstatnts.KEYS.TEXT]
            }, e.prototype.getSender = function () {
                try {
                    return this.getSenderFromData()
                } catch (e) {
                    return this.sender
                }
            }, e.prototype.getReceiver = function () {
                try {
                    return this.getReceiverFromData()
                } catch (e) {
                    return this.receiver
                }
            }, e.prototype.getMetadata = function () {
                return this.data.metadata && (this.metadata = this.data.metadata), this.metadata
            }, e.prototype.setMetadata = function (e) {
                this.metadata = e, this.data = i({}, this.data, {metadata: e})
            }, e.prototype.getData = function () {
                return this.data
            }, e.prototype.setData = function (e) {
                this.data = e
            }, e.prototype.getAttachment = function () {
                return this.attachment
            }, e.prototype.setAttachment = function (e) {
                this.attachment = e
            }, e.prototype.getURL = function () {
                try {
                    var e = this.getData();
                    if (e[a.MessageConstatnts.KEYS.URL]) return e[a.MessageConstatnts.KEYS.URL]
                } catch (e) {
                    l.Logger.error("MediaMessageModel: getURL", e)
                }
            }, e.prototype.getSenderFromData = function () {
                try {
                    var e = this.getData();
                    if (e[a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITIES][a.MessageConstatnts.KEYS.SENDER][a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITITY]) return new c.User(e[a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITIES][a.MessageConstatnts.KEYS.SENDER][a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITITY])
                } catch (e) {
                    l.Logger.error("MediaMessageModel: getSenderFromData", e)
                }
            }, e.prototype.getReceiverFromData = function () {
                try {
                    var e = this.getData(),
                        t = e[a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITIES][a.MessageConstatnts.KEYS.RECEIVER][a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITITY];
                    if (e[a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITIES][a.MessageConstatnts.KEYS.RECEIVER][a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITYTYPE] == [a.ResponseConstants.RESPONSE_KEYS.KEY_ENTITY_TYPE.USER]) return new c.User(t);
                    var n = new u.Group(t[a.GroupConstants.KEYS.GUID], t[a.GroupConstants.KEYS.NAME], t[a.MessageConstatnts.KEYS.TYPE]);
                    return Object.assign(n, t)
                } catch (e) {
                    l.Logger.error("MediaMessageModel: getReceiverFromData", e)
                }
            }, e.TYPE = a.MessageConstatnts.TYPE, e.RECEIVER_TYPE = a.MessageConstatnts.RECEIVER_TYPE, e.CATEGORY = a.MessageConstatnts.CATEGORY, e
        }(s.BaseMessage);
        t.MediaMessage = d
    }, function (e, t, n) {
        "use strict";
        var r, o = this && this.__extends || (r = function (e, t) {
            return (r = Object.setPrototypeOf || {__proto__: []} instanceof Array && function (e, t) {
                e.__proto__ = t
            } || function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n])
            })(e, t)
        }, function (e, t) {
            function n() {
                this.constructor = e
            }

            r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
        }), s = this && this.__assign || function () {
            return (s = Object.assign || function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++) for (var o in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e
            }).apply(this, arguments)
        };
        t.__esModule = !0;
        var i = n(12), c = n(0), u = n(5), l = n(1), d = n(6), a = function (a) {
            function e() {
                for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                var n = this;
                if (3 == e.length) {
                    var r = e[0], o = e[1], s = e[2];
                    n = a.call(this, r, c.MessageConstatnts.TYPE.CUSTOM, o, c.MessageCategory.MESSAGE) || this, ("object" != typeof s || Array.isArray(s)) && (s = {}), n.customData = s, l.isFalsy(n.data) && (n.data = {}), n.data[c.MessageConstatnts.KEYS.CUSTOM_DATA] = s
                }
                if (4 == e.length) {
                    r = e[0], o = e[1];
                    var i = e[2];
                    s = e[3];
                    n = a.call(this, r, i, o, c.MessageCategory.CUSTOM) || this, ("object" != typeof s || Array.isArray(s)) && (s = {}), n.customData = s, l.isFalsy(n.data) && (n.data = {}), n.data[c.MessageConstatnts.KEYS.CUSTOM_DATA] = s
                }
                return n
            }

            return o(e, a), e.prototype.getCustomData = function () {
                return this.customData
            }, e.prototype.setCustomData = function (e) {
                this.customData = e, this.data[c.MessageConstatnts.KEYS.CUSTOM_DATA] = e
            }, e.prototype.getSender = function () {
                try {
                    return this.getSenderFromData()
                } catch (e) {
                    return this.sender
                }
            }, e.prototype.getReceiver = function () {
                try {
                    return this.getReceiverFromData()
                } catch (e) {
                    return this.receiver
                }
            }, e.prototype.getSubType = function () {
                return this.subType
            }, e.prototype.setSubType = function (e) {
                this.subType = e, this.data = s({}, this.data, {subType: e})
            }, e.prototype.getMetadata = function () {
                return this.metadata
            }, e.prototype.setMetadata = function (e) {
                this.metadata = e, this.data = s({}, this.data, {metadata: e})
            }, e.prototype.getData = function () {
                return this.data
            }, e.prototype.getSenderFromData = function () {
                try {
                    var e = this.getData();
                    if (e[c.ResponseConstants.RESPONSE_KEYS.KEY_ENTITIES][c.MessageConstatnts.KEYS.SENDER][c.ResponseConstants.RESPONSE_KEYS.KEY_ENTITITY]) return new u.User(e[c.ResponseConstants.RESPONSE_KEYS.KEY_ENTITIES][c.MessageConstatnts.KEYS.SENDER][c.ResponseConstants.RESPONSE_KEYS.KEY_ENTITITY])
                } catch (e) {
                    l.Logger.error("CustomMessageModel: getSenderFromData", e)
                }
            }, e.prototype.getReceiverFromData = function () {
                try {
                    var e = this.getData(),
                        t = e[c.ResponseConstants.RESPONSE_KEYS.KEY_ENTITIES][c.MessageConstatnts.KEYS.RECEIVER][c.ResponseConstants.RESPONSE_KEYS.KEY_ENTITITY];
                    if (e[c.ResponseConstants.RESPONSE_KEYS.KEY_ENTITIES][c.MessageConstatnts.KEYS.RECEIVER][c.ResponseConstants.RESPONSE_KEYS.KEY_ENTITYTYPE] == [c.ResponseConstants.RESPONSE_KEYS.KEY_ENTITY_TYPE.USER]) return new u.User(t);
                    var n = new d.Group(t[c.GroupConstants.KEYS.GUID], t[c.GroupConstants.KEYS.NAME], t[c.MessageConstatnts.KEYS.TYPE]);
                    return Object.assign(n, t)
                } catch (e) {
                    l.Logger.error("CustomMessageModel: getReceiverFromData", e)
                }
            }, e
        }(i.BaseMessage);
        t.CustomMessage = a
    }, function (e, t, n) {
        "use strict";
        var r, i = this && this.__extends || (r = function (e, t) {
            return (r = Object.setPrototypeOf || {__proto__: []} instanceof Array && function (e, t) {
                e.__proto__ = t
            } || function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n])
            })(e, t)
        }, function (e, t) {
            function n() {
                this.constructor = e
            }

            r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
        });
        t.__esModule = !0;
        var o = n(1), s = function () {
            for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
            this.onAction = void 0, this.onTextMessageReceived = void 0, this.onMediaMessageReceived = void 0, this.onCustomMessageReceived = void 0, this.onCall = void 0, this.onTypingStarted = void 0, this.onTypingEnded = void 0, this.onMessagesDelivered = void 0, this.onMessagesRead = void 0, this.onMessageEdited = void 0, this.onMessageDeleted = void 0, o.isFalsy(e[0].onAction) || (this.onAction = e[0].onAction), o.isFalsy(e[0].onTextMessageReceived) || (this.onTextMessageReceived = e[0].onTextMessageReceived), o.isFalsy(e[0].onMediaMessageReceived) || (this.onMediaMessageReceived = e[0].onMediaMessageReceived), o.isFalsy(e[0].onCall) || (this.onCall = e[0].onCall), o.isFalsy(e[0].onTypingStarted) || (this.onTypingStarted = e[0].onTypingStarted), o.isFalsy(e[0].onTypingEnded) || (this.onTypingEnded = e[0].onTypingEnded), o.isFalsy(e[0].onMessagesDelivered) || (this.onMessagesDelivered = e[0].onMessagesDelivered), o.isFalsy(e[0].onMessagesRead) || (this.onMessagesRead = e[0].onMessagesRead), o.isFalsy(e[0].onCustomMessageReceived) || (this.onCustomMessageReceived = e[0].onCustomMessageReceived), o.isFalsy(e[0].onMessageEdited) || (this.onMessageEdited = e[0].onMessageEdited), o.isFalsy(e[0].onMessageDeleted) || (this.onMessageDeleted = e[0].onMessageDeleted)
        };
        t.MessageEventListener = s;
        var a = function () {
            for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
            this.onIncomingCallReceived = void 0, this.onOutgoingCallAccepted = void 0, this.onOutgoingCallRejected = void 0, this.onIncomingCallCancelled = void 0, o.isFalsy(e[0].onIncomingCallReceived) || (this.onIncomingCallReceived = e[0].onIncomingCallReceived), o.isFalsy(e[0].onOutgoingCallAccepted) || (this.onOutgoingCallAccepted = e[0].onOutgoingCallAccepted), o.isFalsy(e[0].onOutgoingCallRejected) || (this.onOutgoingCallRejected = e[0].onOutgoingCallRejected), o.isFalsy(e[0].onIncomingCallCancelled) || (this.onIncomingCallCancelled = e[0].onIncomingCallCancelled)
        };
        t.CallEventListener = a;
        var c = function () {
            for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
            o.isFalsy(e[0].onUserOnline) || (this.onUserOnline = e[0].onUserOnline), o.isFalsy(e[0].onUserOffline) || (this.onUserOffline = e[0].onUserOffline)
        };
        t.UserEventListener = c;
        var u = function () {
            for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
            o.isFalsy(e[0].onGroupMemberJoined) || (this.onUserJoined = e[0].onGroupMemberJoined), o.isFalsy(e[0].onGroupMemberLeft) || (this.onUserLeft = e[0].onGroupMemberLeft), o.isFalsy(e[0].onGroupMemberKicked) || (this.onUserKicked = e[0].onGroupMemberKicked), o.isFalsy(e[0].onGroupMemberBanned) || (this.onUserBanned = e[0].onGroupMemberBanned), o.isFalsy(e[0].onGroupMemberUnbanned) || (this.onUserUnbanned = e[0].onGroupMemberUnbanned), o.isFalsy(e[0].onGroupMemberScopeChanged) || (this.onMemberScopeChanged = e[0].onGroupMemberScopeChanged), o.isFalsy(e[0].onMemberAddedToGroup) || (this.onMemberAddedToGroup = e[0].onMemberAddedToGroup)
        };
        t.GroupEventListener = u;
        var l = function () {
            for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
            o.isFalsy(e[0].onYouLeft) || (this.onYouLeft = e[0].onYouLeft), o.isFalsy(e[0].onYouJoined) || (this.onYouJoined = e[0].onYouJoined), o.isFalsy(e[0].onUserJoined) || (this.onUserJoined = e[0].onUserJoined), o.isFalsy(e[0].onUserLeft) || (this.onUserLeft = e[0].onUserLeft), o.isFalsy(e[0].onCallEnded) || (this.onCallEnded = e[0].onCallEnded), o.isFalsy(e[0].onError) || (this.onError = e[0].onError)
        };
        t.UserCallEventListener = l;
        var d = function (e, t) {
            this._name = e, this._callback = t
        }, E = function (s) {
            function e(e, t, n, r) {
                var o = s.call(this, e, r) || this;
                return o._eventListener = t, n && (o._cursor = n), o
            }

            return i(e, s), e
        }(t.Listener = d);
        t.MessageListener = E;
        var h = function (s) {
            function e(e, t, n, r) {
                var o = s.call(this, e, r) || this;
                return o._eventListener = t, n && (o._cursor = n), o
            }

            return i(e, s), e
        }(d);
        t.UserListener = h;
        var p = function (s) {
            function e(e, t, n, r) {
                var o = s.call(this, e, r) || this;
                return o._eventListener = t, n && (o._cursor = n), o
            }

            return i(e, s), e
        }(d);
        t.GroupListener = p;
        var f = function (o) {
            function e(e, t, n) {
                var r = o.call(this, "callListner", n) || this;
                return r._eventListener = e, r
            }

            return i(e, o), e
        }(d);
        t.UserCallListener = f;
        var g = function (s) {
            function e(e, t, n, r) {
                var o = s.call(this, e, r) || this;
                return o._eventListener = t, o
            }

            return i(e, s), e
        }(d);
        t.CallListener = g
    }, function (e, t, n) {
        "use strict";
        var a = this && this.__assign || function () {
            return (a = Object.assign || function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++) for (var o in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e
            }).apply(this, arguments)
        };
        t.__esModule = !0;
        var r = n(3), c = n(1), u = n(0), o = n(11), s = function () {
            function e(e) {
                this.store = u.constants.DEFAULT_STORE, c.isFalsy(e) || (this.store = e), this.messagesStore = o.createInstance({name: c.format(u.LOCAL_STORE.STORE_STRING, r.CometChat.getAppId(), u.LOCAL_STORE.MESSAGES_STORE)}), this.messagesStore.setDriver([o.LOCALSTORAGE, o.INDEXEDDB, o.WEBSQL])
            }

            return e.getInstance = function () {
                return null == e.MessagesStore && (e.MessagesStore = new e), e.MessagesStore
            }, e.prototype.set = function (e, t) {
                return this.messagesStore.setItem(e, t)
            }, e.prototype.remove = function (e) {
                this.messagesStore.removeItem(e)
            }, e.prototype.get = function (e) {
                return this.messagesStore.getItem(e)
            }, e.prototype.clearStore = function () {
                return this.messagesStore.clear()
            }, e.prototype.getAllMessages = function () {
                var n = this, r = {};
                return new Promise(function (e, t) {
                    n.messagesStore.iterate(function (e, t, n) {
                        t != u.constants.MSG_VER_POST && t != u.constants.MSG_VER_POST && (r = a({}, r, e))
                    }).then(function () {
                        e(r)
                    })
                })
            }, e.prototype.clear = function (e) {
            }, e.prototype.selectStore = function (e) {
                this.store = e
            }, e.prototype.storeMessages = function (e) {
                var n = this;
                if (r.CometChat.user.getUid()) {
                    var o = r.CometChat.user.getUid(), s = {}, i = 0;
                    return this.get(u.constants.MSG_VER_POST).then(function (r) {
                        e.map(function (e) {
                            var t;
                            if (!c.isFalsy(e)) {
                                0 == i && (i = parseInt(e.getId().toString())), i > e.getId() && (i = parseInt(e.getId().toString())), r < e.getId() && (r = parseInt(e.getId().toString()));
                                var n = void 0;
                                n = e.getSender() instanceof Object ? e.getSender().getUid() : e.getSender(), e.getReceiverType() == u.MessageConstatnts.RECEIVER_TYPE.GROUP && (n = e.getReceiver()), e.getSender() instanceof Object ? e.getSender().getUid() == o && (n = e.getReceiver()) : e.getSender() == o && (n = e.getReceiver()), s[n] || (s[n] = {}), s[n] = a({}, s[n], ((t = {})[e.getId()] = e, t))
                            }
                        }), n.get(u.constants.MSG_VER_PRE).then(function (e) {
                            (0 < i && i < e || null == e) && n.set(u.constants.MSG_VER_PRE, i)
                        }) && 0 < r && n.set(u.constants.MSG_VER_POST, r), Object.keys(s).map(function (t) {
                            n.get(t).then(function (e) {
                                null == e && (e = {}), n.set(t, a({}, s[t], e))
                            })
                        })
                    }), !0
                }
            }, e
        }();
        t.MessagesStore = s
    }, function (e, t, n) {
        "use strict";
        var r, o = this && this.__extends || (r = function (e, t) {
            return (r = Object.setPrototypeOf || {__proto__: []} instanceof Array && function (e, t) {
                e.__proto__ = t
            } || function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n])
            })(e, t)
        }, function (e, t) {
            function n() {
                this.constructor = e
            }

            r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
        }), s = this && this.__assign || function () {
            return (s = Object.assign || function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++) for (var o in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e
            }).apply(this, arguments)
        };
        t.__esModule = !0;
        var i = n(12), u = n(6), l = n(5), d = n(0), a = n(1), E = n(7), c = function (e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }

            return o(t, e), t.actionFromJSON = function (e) {
                var t = new this(e[d.MessageConstatnts.KEYS.RECEIVER], e[d.MessageConstatnts.KEYS.TYPE], e[d.MessageConstatnts.KEYS.RECEIVER_TYPE], d.MessageCategory.ACTION),
                    n = e[d.MessageConstatnts.KEYS.DATA];
                if (t.data = n, t.setAction(n[d.MessageConstatnts.KEYS.ACTION]), n[d.ActionConstatnts.ACTION_KEYS.EXTRAS]) {
                    var r = n[d.ActionConstatnts.ACTION_KEYS.EXTRAS];
                    if (r[d.ActionConstatnts.ACTION_KEYS.SCOPE]) {
                        var o = r[d.ActionConstatnts.ACTION_KEYS.SCOPE];
                        o[d.ActionConstatnts.ACTION_KEYS.NEW] && o[d.ActionConstatnts.ACTION_KEYS.OLD] && (t.setOldScope(o[d.ActionConstatnts.ACTION_KEYS.OLD]), t.setNewScope(o[d.ActionConstatnts.ACTION_KEYS.NEW]))
                    }
                }
                n[d.MessageConstatnts.KEYS.METADATA] && t.setMetadata(n[d.MessageConstatnts.KEYS.METADATA]);
                var s = n[d.ActionConstatnts.ACTION_KEYS.ENTITIES];
                if (s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_BY]) if (s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_BY][d.ActionConstatnts.ACTION_KEYS.ENTITY_TYPE] == d.ActionConstatnts.ACTION_ENTITY_TYPE.USER) {
                    var i = new l.User(s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_BY][d.ActionConstatnts.ACTION_KEYS.ENTITY]);
                    Object.assign(i, s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_BY][d.ActionConstatnts.ACTION_KEYS.ENTITY]), t.actionBy = i, t.setSender(i)
                } else {
                    var a = new u.Group("", "", "");
                    Object.assign(a, s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_BY][d.ActionConstatnts.ACTION_KEYS.ENTITY]), t.actionBy = a
                }
                if (s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_FOR]) if (s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_FOR][d.ActionConstatnts.ACTION_KEYS.ENTITY_TYPE] == d.ActionConstatnts.ACTION_ENTITY_TYPE.USER) {
                    i = new l.User(s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_FOR][d.ActionConstatnts.ACTION_KEYS.ENTITY]);
                    Object.assign(i, s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_FOR][d.ActionConstatnts.ACTION_KEYS.ENTITY]), t.actionFor = i
                } else {
                    a = new u.Group("", "", "");
                    Object.assign(a, s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_FOR][d.ActionConstatnts.ACTION_KEYS.ENTITY]), t.actionFor = a
                }
                if (s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_ON]) if (s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_ON][d.ActionConstatnts.ACTION_KEYS.ENTITY_TYPE] == d.ActionConstatnts.ACTION_ENTITY_TYPE.USER) {
                    i = new l.User(s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_ON][d.ActionConstatnts.ACTION_KEYS.ENTITY]);
                    Object.assign(i, s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_ON][d.ActionConstatnts.ACTION_KEYS.ENTITY]), t.actionOn = i
                } else if (s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_ON][d.ActionConstatnts.ACTION_KEYS.ENTITY_TYPE] == d.ActionConstatnts.ACTION_ENTITY_TYPE.GROUP) {
                    a = new u.Group("", "", "");
                    Object.assign(a, s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_ON][d.ActionConstatnts.ACTION_KEYS.ENTITY]), t.actionOn = a
                } else if (s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_ON][d.ActionConstatnts.ACTION_KEYS.ENTITY_TYPE] == d.ActionConstatnts.ACTION_ENTITY_TYPE.MESSAGE) {
                    var c = E.MessageController.trasformJSONMessge(s[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_ON][d.ActionConstatnts.ACTION_KEYS.ENTITY]);
                    t.actionOn = c
                }
                return t.setMessage(t.getActionMessage(t)), t
            }, t.prototype.getOldScope = function () {
                return this.oldScope
            }, t.prototype.getNewScope = function () {
                return this.newScope
            }, t.prototype.setNewScope = function (e) {
                this.newScope = e
            }, t.prototype.setOldScope = function (e) {
                this.oldScope = e
            }, t.prototype.setRawData = function (e) {
                this.rawData = e
            }, t.prototype.getRawData = function () {
                return this.rawData
            }, t.prototype.setMessage = function (e) {
                this.message = e
            }, t.prototype.getMessage = function () {
                return this.message
            }, t.prototype.setAction = function (e) {
                this.action = e
            }, t.prototype.getAction = function () {
                return this.action
            }, t.prototype.getSender = function () {
                try {
                    return this.getSenderFromData()
                } catch (e) {
                    return this.sender
                }
            }, t.prototype.setActionBy = function (e) {
                this.actionBy = e
            }, t.prototype.getActionBy = function () {
                return this.actionBy
            }, t.prototype.setActionOn = function (e) {
                this.actionOn = e
            }, t.prototype.getActionOn = function () {
                return this.actionOn
            }, t.prototype.setActionFor = function (e) {
                this.actionFor = e
            }, t.prototype.getActionFor = function () {
                return this.actionFor
            }, t.prototype.getMetadata = function () {
                return this.data.metadata && (this.metadata = this.data.metadata), this.metadata
            }, t.prototype.setMetadata = function (e) {
                this.metadata = e, this.data = s({}, this.data, {metadata: e})
            }, t.prototype.getActionMessage = function (e) {
                var t = "";
                switch (e.getType()) {
                    case d.ActionConstatnts.ACTION_KEYS.ACTION_TYPE_USER:
                    case d.ActionConstatnts.ACTION_KEYS.ACTION_TYPE_GROUP:
                        switch (e.getAction()) {
                            case d.ActionConstatnts.ACTION_KEYS.ACTION_CREATED:
                            case d.ActionConstatnts.ACTION_KEYS.ACTION_UPDATED:
                            case d.ActionConstatnts.ACTION_KEYS.ACTION_DELETED:
                        }
                        break;
                    case d.ActionConstatnts.ACTION_KEYS.ACTION_TYPE_GROUP_MEMBER:
                        switch (e.getAction()) {
                            case d.ActionConstatnts.ACTION_KEYS.TYPE_MEMBER_JOINED:
                                var n = e.getActionBy();
                                t = a.format(d.ActionConstatnts.ActionMessages.ACTION_GROUP_JOINED_MESSAGE, n.getName());
                                break;
                            case d.ActionConstatnts.ACTION_KEYS.TYPE_MEMBER_LEFT:
                                n = e.getActionBy();
                                t = a.format(d.ActionConstatnts.ActionMessages.ACTION_GROUP_LEFT_MESSAGE, n.getName());
                                break;
                            case d.ActionConstatnts.ACTION_KEYS.TYPE_MEMBER_KICKED:
                                n = e.getActionBy();
                                var r = e.getActionOn();
                                t = a.format(d.ActionConstatnts.ActionMessages.ACTION_MEMBER_KICKED_MESSAGE, n.getName(), r.getName());
                                break;
                            case d.ActionConstatnts.ACTION_KEYS.TYPE_MEMBER_BANNED:
                                n = e.getActionBy(), r = e.getActionOn();
                                t = a.format(d.ActionConstatnts.ActionMessages.ACTION_MEMBER_BANNED_MESSAGE, n.getName(), r.getName());
                                break;
                            case d.ActionConstatnts.ACTION_KEYS.TYPE_MEMBER_UNBANNED:
                                n = e.getActionBy(), r = e.getActionOn();
                                t = a.format(d.ActionConstatnts.ActionMessages.ACTION_MEMBER_UNBANNED_MESSAGE, n.getName(), r.getName());
                                break;
                            case d.ActionConstatnts.ACTION_KEYS.ACTION_SCOPE_CHANGED:
                                n = e.getActionBy(), r = e.getActionOn();
                                var o = e.getNewScope();
                                t = a.format(d.ActionConstatnts.ActionMessages.ACTION_MEMBER_SCOPE_CHANGED, n.getName(), r.getName(), o);
                                break;
                            case d.ActionConstatnts.ACTION_KEYS.TYPE_MEMBER_ADDED:
                                n = e.getActionBy(), r = e.getActionOn();
                                t = a.format(d.ActionConstatnts.ActionMessages.ACTION_MEMBER_ADDED_TO_GROUP, n.getName(), r.getName());
                                break;
                            case d.ActionConstatnts.ACTION_KEYS.TYPE_MESSAGE_EDITED:
                                t = a.format(d.ActionConstatnts.ActionMessages.ACTION_MESSAGE_EDITED_MESSAGE, "");
                                break;
                            case d.ActionConstatnts.ACTION_KEYS.TYPE_MESSAGE_DELETED:
                                t = a.format(d.ActionConstatnts.ActionMessages.ACTION_MESSAGE_DELETED_MESSAGE, "")
                        }
                }
                return t
            }, t.prototype.getSenderFromData = function () {
                var e = this.data[d.ActionConstatnts.ACTION_KEYS.ENTITIES];
                if (e[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_BY] && e[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_BY][d.ActionConstatnts.ACTION_KEYS.ENTITY_TYPE] == d.ActionConstatnts.ACTION_ENTITY_TYPE.USER) {
                    var t = new l.User(e[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_BY][d.ActionConstatnts.ACTION_KEYS.ENTITY]);
                    return Object.assign(t, e[d.ActionConstatnts.ACTION_SUBJECTS.ACTION_BY][d.ActionConstatnts.ACTION_KEYS.ENTITY]), t
                }
            }, t.TYPE = d.MessageConstatnts.TYPE, t.RECEIVER_TYPE = d.MessageConstatnts.RECEIVER_TYPE, t.CATEGORY = d.MessageConstatnts.CATEGORY, t.ACTION_TYPE = d.ActionConstatnts.ACTION_TYPE, t
        }(i.BaseMessage);
        t.Action = c
    }, function (e, t, n) {
        "use strict";
        var r, s = this && this.__extends || (r = function (e, t) {
            return (r = Object.setPrototypeOf || {__proto__: []} instanceof Array && function (e, t) {
                e.__proto__ = t
            } || function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n])
            })(e, t)
        }, function (e, t) {
            function n() {
                this.constructor = e
            }

            r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
        }), i = this && this.__assign || function () {
            return (i = Object.assign || function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++) for (var o in t = arguments[n]) Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e
            }).apply(this, arguments)
        };
        t.__esModule = !0;
        var o = n(12), a = n(6), c = n(0), u = n(1), l = n(5), d = function (o) {
            function e(e, t, n, r) {
                return u.isFalsy(r) ? o.call(this, e, t, n, c.MessageCategory.CALL) || this : o.call(this, e, t, n, r) || this
            }

            return s(e, o), e.prototype.getCallInitiator = function () {
                return this.getCallInitiatedByFromData()
            }, e.prototype.getCallReceiver = function () {
                return this.getCallReceivedByFromData()
            }, e.prototype.setCallInitiator = function (e) {
                this.callInitiator = e
            }, e.prototype.setCallReceiver = function (e) {
                this.callReceiver = e
            }, e.prototype.getData = function () {
                return this.data
            }, e.prototype.setData = function (e) {
                this.data = e
            }, e.prototype.getSessionId = function () {
                return this.sessionId
            }, e.prototype.setSessionId = function (e) {
                this.sessionId = e
            }, e.prototype.getMetadata = function () {
                return this.data.metadata && (this.metadata = this.data.metadata), this.metadata
            }, e.prototype.getSender = function () {
                try {
                    return this.getSenderFromData()
                } catch (e) {
                    return this.sender
                }
            }, e.prototype.setMetadata = function (e) {
                this.metadata = e, this.data = i({}, this.data, {metadata: e})
            }, e.prototype.getAction = function () {
                return this.action
            }, e.prototype.setAction = function (e) {
                this.action = e
            }, e.prototype.getInitiatedAt = function () {
                return this.initiatedAt
            }, e.prototype.setInitiatedAt = function (e) {
                this.initiatedAt = e
            }, e.prototype.getJoinedAt = function () {
                return this.joinedAt
            }, e.prototype.setJoinedAt = function (e) {
                this.joinedAt = e
            }, e.prototype.setRawData = function (e) {
                this.rawData = e
            }, e.prototype.getRawData = function () {
                return this.rawData
            }, e.prototype.setSender = function (e) {
                this.sender = e
            }, e.prototype.setReceiver = function (e) {
                this.receiver = e
            }, e.callFromJSON = function (e) {
                try {
                    var t = new this(e[c.MessageConstatnts.KEYS.RECEIVER], e[c.MessageConstatnts.KEYS.TYPE], e[c.MessageConstatnts.KEYS.RECEIVER_TYPE], c.MessageCategory.CALL),
                        n = e[c.MessageConstatnts.KEYS.DATA];
                    t.setAction(n[c.MessageConstatnts.KEYS.ACTION]), n[c.MessageConstatnts.KEYS.METADATA] && t.setMetadata(n[c.MessageConstatnts.KEYS.METADATA]);
                    var r = n[c.ActionConstatnts.ACTION_KEYS.ENTITIES];
                    if (r[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_BY]) r[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_BY];
                    if (r[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_ON]) {
                        var o = r[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_ON];
                        if (o[c.CallConstants.CALL_KEYS.CALL_ENTITY]) {
                            var s = o[c.CallConstants.CALL_KEYS.CALL_ENTITY];
                            if (s[c.CallConstants.CALL_KEYS.CALL_SESSION_ID] && (t.sessionId = s[c.CallConstants.CALL_KEYS.CALL_SESSION_ID]), s[c.CallConstants.CALL_KEYS.CALL_STATUS] && (t.status = s[c.CallConstants.CALL_KEYS.CALL_STATUS]), s[c.CallConstants.CALL_KEYS.CALL_DATA]) {
                                var i = s[c.CallConstants.CALL_KEYS.CALL_DATA];
                                if (i[c.CallConstants.CALL_KEYS.CALL_METADATA] && (t.metadata = i[c.CallConstants.CALL_KEYS.CALL_METADATA]), i[c.ResponseConstants.RESPONSE_KEYS.KEY_ENTITIES]) i[c.ResponseConstants.RESPONSE_KEYS.KEY_ENTITIES]
                            }
                            s[c.CallConstants.CALL_KEYS.CALL_INITIATED_AT] && (t.initiatedAt = s[c.CallConstants.CALL_KEYS.CALL_INITIATED_AT]), s[c.CallConstants.CALL_KEYS.CALL_JOINED_AT] && (t.joinedAt = s[c.CallConstants.CALL_KEYS.CALL_JOINED_AT]), s[c.CallConstants.CALL_KEYS.CALL_LEFT_AT] && (t.joinedAt = s[c.CallConstants.CALL_KEYS.CALL_LEFT_AT])
                        }
                    }
                    return t
                } catch (e) {
                    u.Logger.error("CallModel: callFromJSON", e)
                }
            }, e.prototype.getSenderFromData = function () {
                try {
                    var e = this.getData();
                    if ((e = e[c.ActionConstatnts.ACTION_KEYS.ENTITIES])[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_BY][c.CallConstants.CALL_KEYS.CALL_ENTITY]) return new l.User(e[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_BY][c.CallConstants.CALL_KEYS.CALL_ENTITY])
                } catch (e) {
                    u.Logger.error("CallModel:getSenderFromData", e)
                }
            }, e.prototype.getCallInitiatedByFromData = function () {
                try {
                    var e = this.getData();
                    if ((e = e[c.ActionConstatnts.ACTION_KEYS.ENTITIES])[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_ON][c.CallConstants.CALL_KEYS.CALL_ENTITY][c.CallConstants.CALL_KEYS.CALL_DATA][c.ActionConstatnts.ACTION_KEYS.ENTITIES][c.CallConstants.CALL_KEYS.CALL_SENDER]) return new l.User(e[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_ON][c.CallConstants.CALL_KEYS.CALL_ENTITY][c.CallConstants.CALL_KEYS.CALL_DATA][c.ActionConstatnts.ACTION_KEYS.ENTITIES][c.CallConstants.CALL_KEYS.CALL_SENDER][c.CallConstants.CALL_KEYS.CALL_ENTITY])
                } catch (e) {
                    u.Logger.error("CallModel:getCallInitiatedByFromData", e)
                }
            }, e.prototype.getCallReceivedByFromData = function () {
                try {
                    var e = this.getData();
                    if ((e = e[c.ActionConstatnts.ACTION_KEYS.ENTITIES])[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_FOR][c.CallConstants.CALL_KEYS.CALL_ENTITY]) {
                        if (e[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_FOR][c.CallConstants.CALL_KEYS.CALL_ENTITY_TYPE] == c.CallConstants.CALL_KEYS.CALL_ENTITY_USER) return new l.User(e[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_FOR][c.CallConstants.CALL_KEYS.CALL_ENTITY]);
                        var t = new a.Group(e[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_FOR][c.CallConstants.CALL_KEYS.CALL_ENTITY][c.GroupConstants.KEYS.GUID], e[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_FOR][c.CallConstants.CALL_KEYS.CALL_ENTITY][c.GroupConstants.KEYS.NAME], e[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_FOR][c.CallConstants.CALL_KEYS.CALL_ENTITY][c.GroupConstants.KEYS.TYPE]);
                        return Object.assign(t, e[c.ActionConstatnts.ACTION_SUBJECTS.ACTION_FOR][c.CallConstants.CALL_KEYS.CALL_ENTITY])
                    }
                } catch (e) {
                    u.Logger.error("CallModel:getCallReceivedByFromData", e)
                }
            }, e.TYPE = c.MessageConstatnts.TYPE, e.RECEIVER_TYPE = c.MessageConstatnts.RECEIVER_TYPE, e.CATEGORY = c.MessageConstatnts.CATEGORY, e.ACTION_TYPE = c.ActionConstatnts.ACTION_TYPE, e
        }(o.BaseMessage);
        t.Call = d
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(1), o = n(0), s = n(11), i = n(3), a = function () {
            function e(e) {
                this.store = o.constants.DEFAULT_STORE, r.isFalsy(e) || (this.store = e), this.settingsStore = s.createInstance({name: r.format(o.LOCAL_STORE.STORE_STRING, i.CometChat.getAppId(), o.LOCAL_STORE.MESSAGE_LISTENERS_LIST)}), this.settingsStore.setDriver([s.LOCALSTORAGE, s.INDEXEDDB, s.WEBSQL])
            }

            return e.getInstance = function () {
                return null == e.settingsStore && (e.settingsStore = new e), e.settingsStore
            }, e.prototype.set = function (e, t) {
                return this.settingsStore.setItem(e, t)
            }, e.prototype.remove = function (e) {
                this.settingsStore.removeItem(e)
            }, e.prototype.get = function (e) {
                return this.settingsStore.getItem(e)
            }, e.prototype.clearStore = function () {
                return this.settingsStore.clear()
            }, e.prototype.clear = function (e) {
            }, e.prototype.selectStore = function (e) {
                this.store = e
            }, e.settingsStore = null, e
        }();
        t.MessageListnerMaping = a
    }, function (e, t, n) {
        "use strict";
        var i = this && this.__awaiter || function (s, i, a, c) {
            return new (a || (a = Promise))(function (e, t) {
                function n(e) {
                    try {
                        o(c.next(e))
                    } catch (e) {
                        t(e)
                    }
                }

                function r(e) {
                    try {
                        o(c.throw(e))
                    } catch (e) {
                        t(e)
                    }
                }

                function o(t) {
                    t.done ? e(t.value) : new a(function (e) {
                        e(t.value)
                    }).then(n, r)
                }

                o((c = c.apply(s, i || [])).next())
            })
        }, a = this && this.__generator || function (n, r) {
            var o, s, i, e, a = {
                label: 0, sent: function () {
                    if (1 & i[0]) throw i[1];
                    return i[1]
                }, trys: [], ops: []
            };
            return e = {
                next: t(0),
                throw: t(1),
                return: t(2)
            }, "function" == typeof Symbol && (e[Symbol.iterator] = function () {
                return this
            }), e;

            function t(t) {
                return function (e) {
                    return function (t) {
                        if (o) throw new TypeError("Generator is already executing.");
                        for (; a;) try {
                            if (o = 1, s && (i = 2 & t[0] ? s.return : t[0] ? s.throw || ((i = s.return) && i.call(s), 0) : s.next) && !(i = i.call(s, t[1])).done) return i;
                            switch (s = 0, i && (t = [2 & t[0], i.value]), t[0]) {
                                case 0:
                                case 1:
                                    i = t;
                                    break;
                                case 4:
                                    return a.label++, {value: t[1], done: !1};
                                case 5:
                                    a.label++, s = t[1], t = [0];
                                    continue;
                                case 7:
                                    t = a.ops.pop(), a.trys.pop();
                                    continue;
                                default:
                                    if (!(i = 0 < (i = a.trys).length && i[i.length - 1]) && (6 === t[0] || 2 === t[0])) {
                                        a = 0;
                                        continue
                                    }
                                    if (3 === t[0] && (!i || t[1] > i[0] && t[1] < i[3])) {
                                        a.label = t[1];
                                        break
                                    }
                                    if (6 === t[0] && a.label < i[1]) {
                                        a.label = i[1], i = t;
                                        break
                                    }
                                    if (i && a.label < i[2]) {
                                        a.label = i[2], a.ops.push(t);
                                        break
                                    }
                                    i[2] && a.ops.pop(), a.trys.pop();
                                    continue
                            }
                            t = r.call(n, a)
                        } catch (e) {
                            t = [6, e], s = 0
                        } finally {
                            o = i = 0
                        }
                        if (5 & t[0]) throw t[1];
                        return {value: t[0] ? t[1] : void 0, done: !0}
                    }([t, e])
                }
            }
        };
        t.__esModule = !0;
        var s = n(32), c = n(1), u = n(7), r = n(0), o = function () {
            function e() {
            }

            return e.executeInSync = function (o, s) {
                var t = this;
                return new Promise(function (r, e) {
                    return i(t, void 0, void 0, function () {
                        var t, n;
                        return a(this, function (e) {
                            switch (e.label) {
                                case 0:
                                    return t = o, s ? (n = setTimeout(function () {
                                        r(o)
                                    }, this.SMALL_TIMEOUT), [4, s(o)]) : [3, 2];
                                case 1:
                                    t = e.sent(), e.label = 2;
                                case 2:
                                    return clearTimeout(n), r(t), [2]
                            }
                        })
                    })
                })
            }, e.hookBeforeMessageSent = function (r) {
                return i(this, void 0, void 0, function () {
                    var t, n;
                    return a(this, function (e) {
                        switch (e.label) {
                            case 0:
                                t = 0, e.label = 1;
                            case 1:
                                return t < s.ExtensionManager.cometChatExtensionList.length ? [4, this.getExtensionList()] : [3, 7];
                            case 2:
                                if (!e.sent()[s.ExtensionManager.cometChatExtensionList[t].getExtensionId()]) return [3, 6];
                                if (!s.ExtensionManager.cometChatExtensionList[t].beforeMessageSent) return [3, 6];
                                e.label = 3;
                            case 3:
                                return e.trys.push([3, 5, , 6]), [4, this.executeInSync(r, s.ExtensionManager.cometChatExtensionList[t].beforeMessageSent)];
                            case 4:
                                return r = e.sent(), [3, 6];
                            case 5:
                                return n = e.sent(), c.Logger.error("Logging error", n), [3, 6];
                            case 6:
                                return t++, [3, 1];
                            case 7:
                                return [2, r]
                        }
                    })
                })
            }, e.hookAfterMessageSent = function (r) {
                return i(this, void 0, void 0, function () {
                    var t, n;
                    return a(this, function (e) {
                        switch (e.label) {
                            case 0:
                                t = 0, e.label = 1;
                            case 1:
                                return t < s.ExtensionManager.cometChatExtensionList.length ? [4, this.getExtensionList()] : [3, 7];
                            case 2:
                                if (!e.sent()[s.ExtensionManager.cometChatExtensionList[t].getExtensionId()]) return [3, 6];
                                if (!s.ExtensionManager.cometChatExtensionList[t].afterMessageSent) return [3, 6];
                                e.label = 3;
                            case 3:
                                return e.trys.push([3, 5, , 6]), [4, this.executeInSync(r, s.ExtensionManager.cometChatExtensionList[t].afterMessageSent)];
                            case 4:
                                return r = e.sent(), [3, 6];
                            case 5:
                                return n = e.sent(), c.Logger.error("Logging error", n), [3, 6];
                            case 6:
                                return t++, [3, 1];
                            case 7:
                                return [2, r]
                        }
                    })
                })
            }, e.hookOnInit = function (r, o) {
                return i(this, void 0, void 0, function () {
                    var n = this;
                    return a(this, function (e) {
                        return s.ExtensionManager.cometChatExtensionList.map(function (t) {
                            return i(n, void 0, void 0, function () {
                                return a(this, function (e) {
                                    switch (e.label) {
                                        case 0:
                                            return [4, this.getExtensionList()];
                                        case 1:
                                            return e.sent()[t.getExtensionId()] ? r && o && t.onInit ? [4, t.onInit(r, o)] : [3, 3] : [3, 5];
                                        case 2:
                                            return e.sent(), [3, 5];
                                        case 3:
                                            return r && t.onInit ? [4, t.onInit(r)] : [3, 5];
                                        case 4:
                                            e.sent(), e.label = 5;
                                        case 5:
                                            return [2]
                                    }
                                })
                            })
                        }), [2]
                    })
                })
            }, e.hookOnMessageReceived = function (o) {
                return i(this, void 0, void 0, function () {
                    var t, n, r;
                    return a(this, function (e) {
                        switch (e.label) {
                            case 0:
                                t = u.MessageController.trasformJSONMessge(o), n = 0, e.label = 1;
                            case 1:
                                return n < s.ExtensionManager.cometChatExtensionList.length ? [4, this.getExtensionList()] : [3, 7];
                            case 2:
                                if (!e.sent()[s.ExtensionManager.cometChatExtensionList[n].getExtensionId()]) return [3, 6];
                                if (!s.ExtensionManager.cometChatExtensionList[n].onMessageReceived) return [3, 6];
                                e.label = 3;
                            case 3:
                                return e.trys.push([3, 5, , 6]), [4, this.executeInSync(t, s.ExtensionManager.cometChatExtensionList[n].onMessageReceived)];
                            case 4:
                                return o = e.sent(), [3, 6];
                            case 5:
                                return r = e.sent(), c.Logger.error("Logging error", r), [3, 6];
                            case 6:
                                return n++, [3, 1];
                            case 7:
                                return [2, o]
                        }
                    })
                })
            }, e.hookOnLogin = function (r) {
                return i(this, void 0, void 0, function () {
                    var n = this;
                    return a(this, function (e) {
                        return s.ExtensionManager.cometChatExtensionList.map(function (t) {
                            return i(n, void 0, void 0, function () {
                                return a(this, function (e) {
                                    switch (e.label) {
                                        case 0:
                                            return [4, this.getExtensionList()];
                                        case 1:
                                            return e.sent()[t.getExtensionId()] && (r && t.onLogin) ? [4, t.onLogin(r)] : [3, 3];
                                        case 2:
                                            e.sent(), e.label = 3;
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }), [2]
                    })
                })
            }, e.executeInSyncBulk = function (o, s) {
                var t = this;
                return new Promise(function (r, e) {
                    return i(t, void 0, void 0, function () {
                        var t, n;
                        return a(this, function (e) {
                            switch (e.label) {
                                case 0:
                                    return t = o, s ? (n = setTimeout(function () {
                                        r(o)
                                    }, this.BIG_TIMEOUT), [4, s(o)]) : [3, 2];
                                case 1:
                                    t = e.sent(), e.label = 2;
                                case 2:
                                    return clearTimeout(n), r(t), [2]
                            }
                        })
                    })
                })
            }, e.hookOnMessageListIsFetched = function (r) {
                return i(this, void 0, void 0, function () {
                    var t, n;
                    return a(this, function (e) {
                        switch (e.label) {
                            case 0:
                                t = 0, e.label = 1;
                            case 1:
                                return t < s.ExtensionManager.cometChatExtensionList.length ? [4, this.getExtensionList()] : [3, 7];
                            case 2:
                                if (!e.sent()[s.ExtensionManager.cometChatExtensionList[t].getExtensionId()]) return [3, 6];
                                if (!s.ExtensionManager.cometChatExtensionList[t].onMessageListFetched) return [3, 6];
                                e.label = 3;
                            case 3:
                                return e.trys.push([3, 5, , 6]), [4, this.executeInSyncBulk(r, s.ExtensionManager.cometChatExtensionList[t].onMessageListFetched)];
                            case 4:
                                return r = e.sent(), [3, 6];
                            case 5:
                                return n = e.sent(), c.Logger.error("Logging error", n), [3, 6];
                            case 6:
                                return t++, [3, 1];
                            case 7:
                                return [2, r]
                        }
                    })
                })
            }, e.getExtensionList = function () {
                return i(this, void 0, void 0, function () {
                    var t = this;
                    return a(this, function (e) {
                        switch (e.label) {
                            case 0:
                                return c.isFalsy(this.extentionList) ? [4, c.getAppSettings()] : [3, 2];
                            case 1:
                                e.sent()[r.APP_SETTINGS.KEYS.EXTENSION_LIST].map(function (e) {
                                    t.extentionList[e.id] = e
                                }), e.label = 2;
                            case 2:
                                return [2, this.extentionList]
                        }
                    })
                })
            }, e.SMALL_TIMEOUT = 5e3, e.BIG_TIMEOUT = 2e4, e.extentionList = {}, e
        }();
        t.ExtensionController = o
    }, function (e, t) {
        var n;
        n = function () {
            return this
        }();
        try {
            n = n || new Function("return this")()
        } catch (e) {
            "object" == typeof window && (n = window)
        }
        e.exports = n
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var i = n(1), a = n(0), c = n(9), u = n(3), l = n(2), r = function () {
            function s() {
                this.baseUrl = "https://apiclient-%s.cometchat.io/", this.apiVersion = "v2.0", this.apiBaseUrl = this.baseUrl + this.apiVersion + "/", this.adminApiUrl = "https://api-%s.cometchat.io/", this.adminApiVersion = "v2.0", this.uriEndpoints = {
                    authToken: {
                        endpoint: "users/{{uid}}/auth_tokens",
                        method: "POST",
                        data: {uid: "string|max:100"},
                        isAdminApi: !0
                    },
                    appSettings: {endpoint: "settings", method: "GET"},
                    login: {endpoint: "admin/users/auth", method: "POST", data: {uid: "string|max:100"}},
                    logout: {endpoint: "admin/users/auth/{{authToken}}", method: "DELETE"},
                    getMyDetails: {endpoint: "me", method: "GET"},
                    updateMyDetails: {endpoint: "me", method: "PUT"},
                    users: {endpoint: "users", method: "GET"},
                    user: {endpoint: "users/{{uid}}", method: "GET"},
                    blockUsers: {endpoint: "blockedusers", method: "POST"},
                    blockedUsersList: {endpoint: "blockedusers", method: "GET"},
                    unblockUsers: {endpoint: "blockedusers", method: "DELETE"},
                    userLogout: {endpoint: "me", method: "DELETE"},
                    createUser: {endpoint: "users", method: "POST", isAdminApi: !0},
                    updateUser: {endpoint: "users/{{uid}}", method: "PUT", isAdminApi: !0},
                    sendFriendRequests: {
                        endpoint: "user/friends",
                        method: "POST",
                        data: {uids: "array<string|max:100>"}
                    },
                    getFriends: {endpoint: "user/friends", method: "GET"},
                    unfriend: {
                        endpoint: "user/friends/{{uid}}/{{gid}}",
                        method: "DELETE",
                        data: {uids: "array<string|max:100>"}
                    },
                    acceptFriendRequest: {
                        endpoint: "user/friends/{{uid}}/accept",
                        method: "PUT",
                        data: {uids: "array<string|max:100>"}
                    },
                    rejectFriendRequest: {
                        endpoint: "user/friends/{{uid}}/reject",
                        method: "DELETE",
                        data: {uids: "array<string|max:100>"}
                    },
                    createGroup: {
                        endpoint: "groups",
                        method: "POST",
                        data: {
                            guid: "required|string|max:100",
                            name: "required|string|max:100",
                            type: "enum|public,protected,password",
                            password: "filled|string|max:100"
                        }
                    },
                    getGroups: {endpoint: "groups", method: "GET"},
                    getGroup: {endpoint: "groups/{{guid}}", method: "GET"},
                    updateGroup: {endpoint: "groups/{{guid}}", method: "PUT"},
                    deleteGroup: {endpoint: "groups/{{guid}}", method: "DELETE"},
                    addGroupMembers: {
                        endpoint: "groups/{{guid}}/members",
                        method: "POST",
                        data: {uids: "array<string|max:100>"}
                    },
                    getGroupMembers: {endpoint: "groups/{{guid}}/members", method: "GET"},
                    joinGroup: {endpoint: "groups/{{guid}}/members", method: "POST"},
                    leaveGroup: {endpoint: "groups/{{guid}}/members", method: "DELETE"},
                    kickGroupMembers: {
                        endpoint: "groups/{{guid}}/members/{{uid}}",
                        method: "DELETE",
                        data: {uids: "array<string|max:100>"}
                    },
                    changeScopeOfMember: {
                        endpoint: "groups/{{guid}}/members/{{uid}}",
                        method: "PUT",
                        data: {uids: "array<string|max:100>"}
                    },
                    banGroupMember: {
                        endpoint: "groups/{{guid}}/bannedusers/{{uid}}",
                        method: "POST",
                        data: {uids: "array<string|max:100>"}
                    },
                    unbanGroupMember: {
                        endpoint: "groups/{{guid}}/bannedusers/{{uid}}",
                        method: "DELETE",
                        data: {uids: "array<string|max:100>"}
                    },
                    addMemebersToGroup: {endpoint: "groups/{{guid}}/members", method: "PUT"},
                    getBannedGroupMembers: {endpoint: "groups/{{guid}}/bannedusers", method: "GET"},
                    promotemoteGroupMember: {
                        endpoint: "groups/{{guid}}/promote",
                        method: "PUT",
                        data: {uids: "array<string|max:100>"}
                    },
                    demoteGroupMember: {
                        endpoint: "groups/{{guid}}/demote",
                        method: "DELETE",
                        data: {uids: "array<string|max:100>"}
                    },
                    sendMessage: {
                        endpoint: "messages",
                        method: "POST",
                        data: {
                            sender: "array:string:max:100>",
                            isGroupMember: "filled|boolean|bail",
                            data: "required|json"
                        }
                    },
                    getMessages: {endpoint: "messages", method: "GET"},
                    getMessageDetails: {endpoint: "messages/{{messageId}}", method: "GET"},
                    getUserMessages: {endpoint: "users/{{listId}}/messages", method: "GET"},
                    getGroupMessages: {endpoint: "groups/{{listId}}/messages", method: "GET"},
                    getMessage: {endpoint: "user/messages/{{muid}}", method: "GET"},
                    updateMessage: {endpoint: "messages/{{messageId}}", method: "PUT"},
                    deleteMessage: {endpoint: "messages/{{messageId}}", method: "DELETE"},
                    createCallSession: {endpoint: "calls", method: "POST", data: {}},
                    updateCallSession: {endpoint: "calls/{{sessionid}}", method: "put", data: {}},
                    getConversations: {endpoint: "conversations", method: "GET"}
                }
            }

            return s.prototype.getEndpointData = function (o) {
                return new Promise(function (r, t) {
                    try {
                        c.LocalStorage.getInstance().get(a.APP_SETTINGS.APP_SETTINGS).then(function (e) {
                            if (i.isFalsy(e)) {
                                var t = {};
                                if ((new s).uriEndpoints.hasOwnProperty(o)) if ((t = (new s).uriEndpoints[o]).hasOwnProperty("isAdminApi")) {
                                    var n = i.format((new s).adminApiUrl, u.CometChat.appSettings.getRegion()) + (new s).adminApiVersion + "/" + t.endpoint;
                                    t.endpoint = n
                                } else {
                                    n = i.format((new s).baseUrl, u.CometChat.appSettings.getRegion()) + (new s).apiVersion + "/" + t.endpoint;
                                    t.endpoint = n
                                }
                                r(t)
                            } else {
                                t = {};
                                if ((new s).uriEndpoints.hasOwnProperty(o)) if ((t = (new s).uriEndpoints[o]).hasOwnProperty("isAdminApi")) t.endpoint = "https://" + e[a.APP_SETTINGS.KEYS.ADMIN_API_HOST] + "/" + (new s).adminApiVersion + "/" + t.endpoint; else {
                                    n = "https://" + e[a.APP_SETTINGS.KEYS.CLIENT_API_HOST] + "/" + (new s).apiVersion + "/" + t.endpoint;
                                    t.endpoint = n
                                }
                                r(t)
                            }
                        }, function (e) {
                            var t;
                            (new s).uriEndpoints.hasOwnProperty(o) && ((t = (new s).uriEndpoints[o]).hasOwnProperty(["isAdminApi"]) ? t.endpoint = i.format((new s).adminApiUrl, u.CometChat.appSettings.getRegion()) + (new s).adminApiVersion + "/" + t.endpoint : t.endpoint = i.format((new s).baseUrl, u.CometChat.appSettings.getRegion()) + (new s).apiVersion + "/" + t.endpoint), r(t)
                        })
                    } catch (e) {
                        t(new l.CometChatException(e))
                    }
                })
            }, s
        }();
        t.EndpointFactory = r
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(44), o = n(0), s = n(1), i = function () {
            function e() {
            }

            return e.transformPresence = function (e) {
                return e.getAttribute("type") ? new r.UserPresence(e.getAttribute(o.PresenceConstatnts.XMPP_KEYS.FROM), o.PresenceConstatnts.STATUS.OFFLINE, (new Date).getTime()) : new r.UserPresence(e.getAttribute(o.PresenceConstatnts.XMPP_KEYS.FROM), o.PresenceConstatnts.STATUS.ONLINE, (new Date).getTime())
            }, e.transformPresences = function (e) {
                var t = [];
                return e.map(function (e) {
                    try {
                        t.push(new r.UserPresence(e.getAttribute(o.PresenceConstatnts.XMPP_KEYS.FROM), e.getAttribute(o.PresenceConstatnts.XMPP_KEYS.STATUS), e.getAttribute(o.PresenceConstatnts.XMPP_KEYS.LAST_ACTIVE_AT)))
                    } catch (e) {
                        s.Logger.error("PresenceController:transformPresences", e)
                    }
                }), t
            }, e.transformMUCUserPresence = function (e) {
                return e.getAttribute("type") ? new r.UserPresence(e.getAttribute(o.PresenceConstatnts.XMPP_KEYS.FROM), o.PresenceConstatnts.STATUS.LEFT, (new Date).getTime()) : new r.UserPresence(e.getAttribute(o.PresenceConstatnts.XMPP_KEYS.FROM), o.PresenceConstatnts.STATUS.JOINED, (new Date).getTime())
            }, e.trandformMUCPresence = function (e) {
                0 < e.getElementsByTagName("x").length && this.transformMUCUserPresence(e)
            }, e
        }();
        t.PresenceController = i
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var i = n(0), o = n(13), a = n(1), c = n(3), u = n(28), l = n(2), r = n(20), d = n(9), s = function () {
            function s() {
                this.TAG = "calling Log", this.callListner = void 0, this.CALL_NO_ANSWER_INTERVAL = 45e3, this.view = void 0, this.scrollHight = 0, this.scrollHight = 0
            }

            return s.prototype.getCallListner = function () {
                return this.callListner
            }, s.prototype.setCallListner = function (e) {
                this.callListner = new r.UserCallListener(e)
            }, s.getInstance = function () {
                try {
                    return null != this.callController && null != this.callController || (this.callController = new s), this.callController
                } catch (e) {
                    a.Logger.error("CallController: getInstance", e)
                }
            }, s.prototype.getActiveCall = function () {
                try {
                    return a.isFalsy(this.call) ? null : this.call
                } catch (e) {
                    a.Logger.error("CallController: getActiveCall", e)
                }
            }, s.prototype.initiateCall = function (n) {
                var r = this;
                return new Promise(function (e, t) {
                    try {
                        a.isFalsy(r.call) ? null != n && null != n ? (r.call = n, r.joinCallMuc(n.getSessionId()), r.startCallTimer(), e(n)) : t(new l.CometChatException(i.CALL_ERROR.ERROR_IN_CALLING)) : t(new l.CometChatException(i.CALL_ERROR.CALL_ALREADY_INITIATED))
                    } catch (e) {
                        t(new l.CometChatException(e))
                    }
                })
            }, s.prototype.onCallInitialized = function () {
            }, s.prototype.joinCall = function (e) {
                a.Logger.log(this.TAG, e)
            }, s.prototype.cancelCall = function () {
                a.Logger.log(this.TAG, "calceling the call"), this.stopCallTimer()
            }, s.prototype.rejectCall = function () {
                a.Logger.log(this.TAG, "rejectCall")
            }, s.prototype.sendBusyResponse = function () {
                a.Logger.log(this.TAG, "sendBusyResponse")
            }, s.prototype.endCall = function (e) {
                var t = this;
                try {
                    if (!c.CometChat.isNative) document.getElementsByName("frame").forEach(function (e) {
                        t.view.removeChild(e), t.view = void 0
                    });
                    this.endCallSession()
                } catch (e) {
                    a.Logger.error("CallController: endCall", e)
                }
            }, s.prototype.onCallEnded = function () {
                var t = this;
                try {
                    if (!a.isFalsy(this.call)) if (this.call.getReceiverType() == i.CallConstants.RECEIVER_TYPE_GROUP) a.Logger.info(this.TAG, JSON.stringify(this.call) + "This call ended"); else document.getElementsByName("frame").forEach(function (e) {
                        t.view.removeChild(e), t.view = void 0
                    }), this.endCallSession()
                } catch (e) {
                    a.Logger.error("CallController:onCallEnded", e)
                }
            }, s.prototype.unAnswerCall = function () {
                a.Logger.log(this.TAG, "unAnswerCall")
            }, s.prototype.onCallStarted = function (n) {
                var r = this;
                return new Promise(function (e, t) {
                    try {
                        a.isFalsy(r.call) ? null != n && null != n ? (r.call = n, r.joinCallMuc(n.getSessionId()), e(n)) : t(new l.CometChatException(i.CALL_ERROR.ERROR_IN_CALLING)) : t(new l.CometChatException(i.CALL_ERROR.CALL_ALREADY_INITIATED))
                    } catch (e) {
                        t(new l.CometChatException(e))
                    }
                })
            }, s.prototype.endCallSession = function () {
                try {
                    this.leaveCallMuc(this.call.getSessionId()), this.call = void 0, s.callController = void 0, this.timer && this.stopCallTimer(), this.view = void 0
                } catch (e) {
                    a.Logger.error("CallController:EndCallSession", {e: e})
                }
            }, s.prototype.joinCallMuc = function (t) {
                var r = this;
                a.getAppSettings().then(function (e) {
                    o.XMPPConnectionHelper.getInstance().connection.muc.join(a.format(i.XMPP.muc_jid_string, c.CometChat.getAppId(), t, c.CometChat.getAppId(), "call." + e[i.APP_SETTINGS.KEYS.CHAT_HOST]), o.XMPPConnectionHelper.getInstance().connection.jid, null, function (t) {
                        try {
                            var n = u.PresenceController.transformPresence(t);
                            o.XMPPConnectionHelper.getInstance().getUsersVCard(n.getUid(), function (e) {
                                if (!a.isFalsy(e.getUid())) switch (e.setLastActiveAt(n.getLastActiveAt()), n.getStatus()) {
                                    case i.PresenceConstatnts.STATUS.ONLINE:
                                        e.setStatus(i.PresenceConstatnts.STATUS.ONLINE);
                                        break;
                                    default:
                                        e.setStatus(i.PresenceConstatnts.STATUS.OFFLINE)
                                }
                                switch (u.PresenceController.transformMUCUserPresence(t).getStatus()) {
                                    case i.PresenceConstatnts.STATUS.JOINED:
                                        c.CometChat.user.getUid().toLocaleLowerCase() != e.getUid().toLocaleLowerCase() && r.callListner && (a.isFalsy(r.callListner._eventListener.onUserJoined) || r.callListner._eventListener.onUserJoined(e));
                                        break;
                                    case i.PresenceConstatnts.STATUS.LEFT:
                                        c.CometChat.user.getUid().toLocaleLowerCase() != e.getUid().toLocaleLowerCase() && r.callListner && (a.isFalsy(r.callListner._eventListener.onUserLeft) || r.callListner._eventListener.onUserLeft(e))
                                }
                            })
                        } catch (e) {
                            a.Logger.error("CallController: joinCallMuc", e)
                        }
                        return !0
                    })
                })
            }, s.prototype.leaveCallMuc = function (t) {
                try {
                    a.getAppSettings().then(function (e) {
                        o.XMPPConnectionHelper.getInstance().connection.muc.leave(a.format(i.XMPP.muc_jid_string, c.CometChat.getAppId(), t, c.CometChat.getAppId(), "call." + e[i.APP_SETTINGS.KEYS.CHAT_HOST]), o.XMPPConnectionHelper.getInstance().connection.jid)
                    })
                } catch (e) {
                    a.Logger.error("CallController: leaveCallMuc", e)
                }
            }, s.prototype.startCallTimer = function () {
                var t = this;
                try {
                    this.timer = setTimeout(function () {
                        c.CometChat.sendUnansweredResponse(t.call.getSessionId()).then(function (e) {
                            t.endCallSession()
                        })
                    }, this.CALL_NO_ANSWER_INTERVAL)
                } catch (e) {
                    a.Logger.error("CallController: startCallTimer", e)
                }
            }, s.prototype.stopCallTimer = function () {
                try {
                    clearTimeout(this.timer)
                } catch (e) {
                    a.Logger.error("CallController: stopCallTimer", e)
                }
            }, s.prototype.startCall = function (t, e, n) {
                var r = this;
                try {
                    if (null == this.view) {
                        this.timer && this.stopCallTimer(), a.isFalsy(e) || this.setCallListner(e);
                        var o = document.createElement("iframe");
                        this.getCallUrl(this.call.getType()).then(function (e) {
                            o.src = e + "", o.name = "frame", o.setAttribute("allow", "camera,microphone"), o.setAttribute("width", "100%"), o.setAttribute("height", "100%"), s.callScreen = o, t && (r.view = t), t.appendChild(o), window.addEventListener("message", function (e) {
                                var t;
                                try {
                                    t = JSON.parse(e.data)
                                } catch (e) {
                                    t = void 0
                                }
                                void 0 !== t && "hangup" == t.type && r.call && (a.Logger.info(r.TAG, r.callListner), c.CometChat.endCall(r.call.getSessionId()).then(function (e) {
                                    r.callListner && r.callListner._eventListener.onCallEnded(e), r.endCall(), a.Logger.info(r.TAG, {call: e})
                                }).catch(function (e) {
                                    a.Logger.info(r.TAG, "The Call Was Already Ended")
                                }))
                            })
                        })
                    }
                } catch (e) {
                    a.Logger.error("CallController: startCall", e)
                }
            }, s.prototype.getCallUrl = function (r) {
                var o = this, s = void 0;
                return new Promise(function (t, n) {
                    try {
                        d.LocalStorage.getInstance().get(i.APP_SETTINGS.APP_SETTINGS).then(function (e) {
                            a.isFalsy(e) ? a.getAppSettings().then(function (e) {
                                s = "https://" + e[i.APP_SETTINGS.KEYS.WEBRTC_HOST], s = r == i.CallConstants.CALL_TYPE_AUDIO ? s + "/" + o.call.getSessionId() + "#config.startWithVideoMuted=true&config.startWithAudioMuted=false" : s + "/" + o.call.getSessionId() + "#config.startWithAudioMuted=false&config.startWithAudioMuted=false", t(s)
                            }) : (s = "https://" + e[i.APP_SETTINGS.KEYS.WEBRTC_HOST], s = r == i.CallConstants.CALL_TYPE_AUDIO ? s + "/" + o.call.getSessionId() + "#config.startWithVideoMuted=true&config.startWithAudioMuted=false" : s + "/" + o.call.getSessionId() + "#config.startWithAudioMuted=false&config.startWithAudioMuted=false", t(s))
                        })
                    } catch (e) {
                        n(new l.CometChatException(e))
                    }
                })
            }, s.toggleAudio = function () {
                try {
                    this.callScreen && this.callScreen.contentWindow.postMessage({action: "audio"}, "*")
                } catch (e) {
                    a.Logger.error("CallController: toggleAudio", e)
                }
            }, s.toggleVideo = function () {
                try {
                    this.callScreen && this.callScreen.contentWindow.postMessage({action: "video"}, "*")
                } catch (e) {
                    a.Logger.error("CallController: toggleVideo", e)
                }
            }, s.leave = function () {
                try {
                    this.callScreen && this.callScreen.contentWindow.postMessage({action: "leave"}, "*")
                } catch (e) {
                    a.Logger.error("CallController: leave", e)
                }
            }, s.prototype.destroy = function () {
                try {
                    a.isFalsy(this.call) || (this.call = void 0), a.isFalsy(this.timer) || (this.timer = void 0), a.isFalsy(this.view) || (this.view = void 0)
                } catch (e) {
                    a.Logger.error("CallController: destroy", e)
                }
            }, s.callController = void 0, s
        }();
        t.CallController = s
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = function () {
            function e(e, t, n) {
                this.receiverId = e, this.receiverType = t, this.metadata = n
            }

            return e.prototype.getReceiverType = function () {
                return this.receiverType
            }, e.prototype.setReceiverType = function (e) {
                this.receiverType = e
            }, e.prototype.getReceiverId = function () {
                return this.receiverId
            }, e.prototype.setReceiverId = function (e) {
                this.receiverId = e
            }, e.prototype.getMetadata = function () {
                return this.metadata
            }, e.prototype.setMetadata = function (e) {
                this.metadata = e
            }, e.prototype.getSender = function () {
                return this.sender
            }, e.prototype.setSender = function (e) {
                this.sender = e
            }, e
        }();
        t.TypingIndicator = r
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(1), o = n(0), s = n(13), i = function () {
            function e() {
            }

            return e.addTypingStarted = function (e) {
                this.TYPING_STARTED_MAP[e] = r.getCurrentTime()
            }, e.removeTypingStarted = function (e) {
                delete this.TYPING_STARTED_MAP[e]
            }, e.getTypingStartedMap = function (e) {
                if (e) return this.TYPING_STARTED_MAP[e]
            }, e.addTypingEnded = function (e) {
                this.TYPING_ENDED_MAP[e] = r.getCurrentTime()
            }, e.removeTypingEnded = function (e) {
                delete this.TYPING_ENDED_MAP[e]
            }, e.getTypingEndedMap = function (e) {
                if (e) return this.TYPING_ENDED_MAP[e]
            }, e.addIncomingTypingStarted = function (e) {
                this.INCOMING_TYPING_STARTED_MAP[e.getReceiverId()] = {
                    typingNotification: e,
                    timestamp: r.getCurrentTime()
                }
            }, e.removeIncomingTypingStarted = function (e) {
                delete this.INCOMING_TYPING_STARTED_MAP[e.getReceiverId()]
            }, e.clearTimer = function () {
                var n = this;
                new Promise(function (e, t) {
                    Object.keys(n.TYPING_STARTED_MAP).map(function (e) {
                        r.getCurrentTime() - n.TYPING_STARTED_MAP[e] >= 1e3 * o.DEFAULT_VALUES.DEFAULT_MAX_TYPING_INDICATOR_LIMIT && delete n.TYPING_STARTED_MAP[e]
                    })
                }), new Promise(function (e, t) {
                    Object.keys(n.TYPING_ENDED_MAP).map(function (e) {
                        r.getCurrentTime() - n.TYPING_ENDED_MAP[e] >= 1e3 * o.DEFAULT_VALUES.DEFAULT_MAX_TYPING_INDICATOR_LIMIT && delete n.TYPING_ENDED_MAP[e]
                    })
                }), new Promise(function (e, t) {
                    Object.keys(n.INCOMING_TYPING_STARTED_MAP).map(function (e) {
                        r.getCurrentTime() - n.INCOMING_TYPING_STARTED_MAP[e][o.TYPING_NOTIFICATION.KEYS.TIMESTAMP] >= 1e3 * o.DEFAULT_VALUES.DEFAULT_MAX_TYPING_INDICATOR_LIMIT && (s.XMPPConnectionHelper.getInstance().publishTypinStatusNotification(n.INCOMING_TYPING_STARTED_MAP[e][o.TYPING_NOTIFICATION.KEYS.TYPING_NOTIFICATION], o.TYPING_NOTIFICATION.ACTIONS.ENDED), delete n.INCOMING_TYPING_STARTED_MAP[e])
                    })
                })
            }, e.TYPING_STARTED_MAP = {}, e.TYPING_ENDED_MAP = {}, e.INCOMING_TYPING_STARTED_MAP = {}, e
        }();
        t.TypingNotificationController = i
    }, function (e, t, n) {
        "use strict";
        var r = this && this.__awaiter || function (s, i, a, c) {
            return new (a || (a = Promise))(function (e, t) {
                function n(e) {
                    try {
                        o(c.next(e))
                    } catch (e) {
                        t(e)
                    }
                }

                function r(e) {
                    try {
                        o(c.throw(e))
                    } catch (e) {
                        t(e)
                    }
                }

                function o(t) {
                    t.done ? e(t.value) : new a(function (e) {
                        e(t.value)
                    }).then(n, r)
                }

                o((c = c.apply(s, i || [])).next())
            })
        }, o = this && this.__generator || function (n, r) {
            var o, s, i, e, a = {
                label: 0, sent: function () {
                    if (1 & i[0]) throw i[1];
                    return i[1]
                }, trys: [], ops: []
            };
            return e = {
                next: t(0),
                throw: t(1),
                return: t(2)
            }, "function" == typeof Symbol && (e[Symbol.iterator] = function () {
                return this
            }), e;

            function t(t) {
                return function (e) {
                    return function (t) {
                        if (o) throw new TypeError("Generator is already executing.");
                        for (; a;) try {
                            if (o = 1, s && (i = 2 & t[0] ? s.return : t[0] ? s.throw || ((i = s.return) && i.call(s), 0) : s.next) && !(i = i.call(s, t[1])).done) return i;
                            switch (s = 0, i && (t = [2 & t[0], i.value]), t[0]) {
                                case 0:
                                case 1:
                                    i = t;
                                    break;
                                case 4:
                                    return a.label++, {value: t[1], done: !1};
                                case 5:
                                    a.label++, s = t[1], t = [0];
                                    continue;
                                case 7:
                                    t = a.ops.pop(), a.trys.pop();
                                    continue;
                                default:
                                    if (!(i = 0 < (i = a.trys).length && i[i.length - 1]) && (6 === t[0] || 2 === t[0])) {
                                        a = 0;
                                        continue
                                    }
                                    if (3 === t[0] && (!i || t[1] > i[0] && t[1] < i[3])) {
                                        a.label = t[1];
                                        break
                                    }
                                    if (6 === t[0] && a.label < i[1]) {
                                        a.label = i[1], i = t;
                                        break
                                    }
                                    if (i && a.label < i[2]) {
                                        a.label = i[2], a.ops.push(t);
                                        break
                                    }
                                    i[2] && a.ops.pop(), a.trys.pop();
                                    continue
                            }
                            t = r.call(n, a)
                        } catch (e) {
                            t = [6, e], s = 0
                        } finally {
                            o = i = 0
                        }
                        if (5 & t[0]) throw t[1];
                        return {value: t[0] ? t[1] : void 0, done: !0}
                    }([t, e])
                }
            }
        };
        t.__esModule = !0;
        var s = n(3), i = function () {
            function n() {
            }

            return n.addCometChatExtension = function (t) {
                return r(this, void 0, void 0, function () {
                    return o(this, function (e) {
                        switch (e.label) {
                            case 0:
                                return n.cometChatExtensionList.push(t), s.CometChat.user ? [4, t.onInit(s.CometChat.getAppId(), s.CometChat.user)] : [3, 2];
                            case 1:
                                return e.sent(), [3, 4];
                            case 2:
                                return [4, t.onInit(s.CometChat.getAppId())];
                            case 3:
                                e.sent(), e.label = 4;
                            case 4:
                                return [2]
                        }
                    })
                })
            }, n.cometChatExtensionList = [], n
        }();
        t.ExtensionManager = i
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(0), o = function () {
            function t(e) {
                this.subscriptionType = t.SUBSCRIPTION_TYPE_NONE, this.roles = null, this.region = r.DEFAULT_VALUES.REGION_DEFAULT, this.subscriptionType = e.subscriptionType, this.roles = e.roles, this.region = e.region
            }

            return t.prototype.getSubscriptionType = function () {
                return this.subscriptionType
            }, t.prototype.getRoles = function () {
                return this.roles
            }, t.prototype.getRegion = function () {
                return this.region
            }, t.SUBSCRIPTION_TYPE_NONE = "NONE", t.SUBSCRIPTION_TYPE_ALL_USERS = "ALL_USERS", t.SUBSCRIPTION_TYPE_ROLES = "ROLES", t.SUBSCRIPTION_TYPE_FRIENDS = "FRIENDS", t.REGION_EU = r.DEFAULT_VALUES.REGION_DEFAULT_EU, t.REGION_US = r.DEFAULT_VALUES.REGION_DEFAULT_US, t.REGION_IN = r.DEFAULT_VALUES.REGION_DEFAULT_IN, t.REGION_PRIVATE = r.DEFAULT_VALUES.REGION_DEFAULT_PRIVATE, t
        }();
        t.AppSettings = o;
        var s = function () {
            function e() {
                this.subscriptionType = o.SUBSCRIPTION_TYPE_NONE, this.roles = null, this.region = r.DEFAULT_VALUES.REGION_DEFAULT
            }

            return e.prototype.subscribePresenceForAllUsers = function () {
                return this.subscriptionType = o.SUBSCRIPTION_TYPE_ALL_USERS, this
            }, e.prototype.subscribePresenceForRoles = function (e) {
                return this.subscriptionType = o.SUBSCRIPTION_TYPE_ROLES, this.roles = e, this
            }, e.prototype.subscribePresenceForFriends = function () {
                return this.subscriptionType = o.SUBSCRIPTION_TYPE_FRIENDS, this
            }, e.prototype.setRegion = function (e) {
                return void 0 === e && (e = r.DEFAULT_VALUES.REGION_DEFAULT), this.region = e, this
            }, e.prototype.build = function () {
                return new o(this)
            }, e
        }();
        t.AppSettingsBuilder = s
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(3), o = n(1), s = n(0), i = n(11), a = function () {
            function e(e) {
                this.store = s.constants.DEFAULT_STORE, o.isFalsy(e) || (this.store = e), this.userStore = i.createInstance({name: o.format(s.LOCAL_STORE.STORE_STRING, r.CometChat.getAppId(), s.LOCAL_STORE.USERS_STORE)}), this.userStore.setDriver([i.LOCALSTORAGE, i.INDEXEDDB, i.WEBSQL])
            }

            return e.getInstance = function () {
                return null == e.UserStore && (e.UserStore = new e), e.UserStore
            }, e.prototype.set = function (e, t) {
                return this.userStore.setItem(e, t)
            }, e.prototype.remove = function (e) {
                this.userStore.removeItem(e)
            }, e.prototype.get = function (e) {
                return this.userStore.getItem(e)
            }, e.prototype.clearStore = function () {
                return this.userStore.clear()
            }, e.prototype.clear = function (e) {
            }, e.prototype.selectStore = function (e) {
                this.store = e
            }, e.prototype.storeUsers = function (e) {
                var t = this;
                return e.map(function (e) {
                    t.set(e.getUid(), e)
                }), !0
            }, e.prototype.storeUser = function (e) {
                return this.set(e.getUid(), e), !0
            }, e
        }();
        t.UserStore = a
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(0), o = function () {
            function e(e, t) {
                this.joinedAt = 0, this.isBanned = 0, this.uid = e, t && (this.scope = t)
            }

            return e.prototype.getName = function () {
                return this.name
            }, e.prototype.setName = function (e) {
                this.name = e
            }, e.prototype.getAvatar = function () {
                return this.avatar
            }, e.prototype.setAvatar = function (e) {
                this.avatar = e
            }, e.prototype.getCredits = function () {
                return this.credits
            }, e.prototype.setCredits = function (e) {
                this.credits = e
            }, e.prototype.getLastActiveAt = function () {
                return this.lastActiveAt
            }, e.prototype.setLastActiveAt = function (e) {
                this.lastActiveAt = e
            }, e.prototype.getLink = function () {
                return this.link
            }, e.prototype.setLink = function (e) {
                this.link = e
            }, e.prototype.getMetadata = function () {
                return this.metadata
            }, e.prototype.setMetadata = function (e) {
                this.metadata = e
            }, e.prototype.getRole = function () {
                return this.role
            }, e.prototype.setRole = function (e) {
                this.role = e
            }, e.prototype.getStatus = function () {
                return this.status
            }, e.prototype.setStatus = function (e) {
                this.status = e
            }, e.prototype.getStatusMessage = function () {
                return this.statusMessage
            }, e.prototype.setStatusMessage = function (e) {
                this.statusMessage = e
            }, e.prototype.setGuid = function (e) {
                this.guid = e
            }, e.prototype.setUid = function (e) {
                this.uid = e
            }, e.prototype.setScope = function (e) {
                this.scope = e
            }, e.prototype.setJoinedAt = function (e) {
                this.joinedAt = e
            }, e.prototype.setIsBanned = function (e) {
                this.isBanned = e
            }, e.prototype.setUser = function (e) {
                this.user = e
            }, e.prototype.getGuid = function () {
                return this.guid
            }, e.prototype.getUid = function () {
                return this.uid
            }, e.prototype.getuser = function () {
                return this.user
            }, e.prototype.getScope = function () {
                return this.scope
            }, e.prototype.getJoinedAt = function () {
                return this.joinedAt
            }, e.prototype.getIsBanned = function () {
                return this.isBanned
            }, e.GroupMemberScope = r.GroupMemberScope, e
        }();
        t.GroupMember = o
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var i = n(37), a = n(1), r = function () {
            function e() {
            }

            return e.trasformJSONConversation = function (e, t, n, r, o) {
                var s;
                try {
                    s = new i.Conversation(e, t, n, r, o)
                } catch (e) {
                    a.Logger.error("ConversationController:transformJSONConversation", e)
                }
                return s
            }, e
        }();
        t.ConversationController = r
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var s = n(7), i = n(0), a = n(8), c = n(16), r = function () {
            function e(e, t, n, r, o) {
                this.conversationId = e, this.conversationType = t, void 0 !== n && void 0 !== (this.lastMessage = n).id && (this.lastMessage = s.MessageController.trasformJSONMessge(n)), this.conversationType == i.MessageConstatnts.RECEIVER_TYPE.USER ? this.conversationWith = a.UsersController.trasformJSONUser(r) : this.conversationWith = c.GroupsController.trasformJSONGroup(r), this.unreadMessageCount = o
            }

            return e.prototype.setConversationId = function (e) {
                this.conversationId = e
            }, e.prototype.setConversationType = function (e) {
                this.conversationType = e
            }, e.prototype.setLastMessage = function (e) {
                this.lastMessage = e
            }, e.prototype.setConversationWith = function (e) {
                this.conversationWith = e
            }, e.prototype.setUnreadMessageCount = function (e) {
                this.unreadMessageCount = e
            }, e.prototype.getConversationId = function () {
                return this.conversationId
            }, e.prototype.getConversationType = function () {
                return this.conversationType
            }, e.prototype.getLastMessage = function () {
                return this.lastMessage
            }, e.prototype.getConversationWith = function () {
                return this.conversationWith
            }, e.prototype.getUnreadMessageCount = function () {
                return this.unreadMessageCount
            }, e
        }();
        t.Conversation = r
    }, function (e, t) {
        function s(e, t) {
            for (var n in e) t[n] = e[n]
        }

        function n(e, t) {
            var n = e.prototype;
            if (Object.create) {
                var r = Object.create(t.prototype);
                n.__proto__ = r
            }
            if (!(n instanceof t)) {
                function o() {
                }

                o.prototype = t.prototype, s(n, o = new o), e.prototype = n = o
            }
            n.constructor != e && (n.constructor = e)
        }

        var _ = "http://www.w3.org/1999/xhtml", r = {}, C = r.ELEMENT_NODE = 1, S = r.ATTRIBUTE_NODE = 2,
            T = r.TEXT_NODE = 3, m = r.CDATA_SECTION_NODE = 4, A = r.ENTITY_REFERENCE_NODE = 5, o = r.ENTITY_NODE = 6,
            I = r.PROCESSING_INSTRUCTION_NODE = 7, N = r.COMMENT_NODE = 8, R = r.DOCUMENT_NODE = 9,
            y = r.DOCUMENT_TYPE_NODE = 10, O = r.DOCUMENT_FRAGMENT_NODE = 11, i = r.NOTATION_NODE = 12, a = {}, c = {},
            u = (a.INDEX_SIZE_ERR = (c[1] = "Index size error", 1), a.DOMSTRING_SIZE_ERR = (c[2] = "DOMString size error", 2), a.HIERARCHY_REQUEST_ERR = (c[3] = "Hierarchy request error", 3)),
            l = (a.WRONG_DOCUMENT_ERR = (c[4] = "Wrong document", 4), a.INVALID_CHARACTER_ERR = (c[5] = "Invalid character", 5), a.NO_DATA_ALLOWED_ERR = (c[6] = "No data allowed", 6), a.NO_MODIFICATION_ALLOWED_ERR = (c[7] = "No modification allowed", 7), a.NOT_FOUND_ERR = (c[8] = "Not found", 8)),
            d = (a.NOT_SUPPORTED_ERR = (c[9] = "Not supported", 9), a.INUSE_ATTRIBUTE_ERR = (c[10] = "Attribute in use", 10));
        a.INVALID_STATE_ERR = (c[11] = "Invalid state", 11), a.SYNTAX_ERR = (c[12] = "Syntax error", 12), a.INVALID_MODIFICATION_ERR = (c[13] = "Invalid modification", 13), a.NAMESPACE_ERR = (c[14] = "Invalid namespace", 14), a.INVALID_ACCESS_ERR = (c[15] = "Invalid access", 15);

        function E(e, t) {
            if (t instanceof Error) var n = t; else n = this, Error.call(this, c[e]), this.message = c[e], Error.captureStackTrace && Error.captureStackTrace(this, E);
            return n.code = e, t && (this.message = this.message + ": " + t), n
        }

        function h() {
        }

        function p(e, t) {
            this._node = e, this._refresh = t, f(this)
        }

        function f(e) {
            var t = e._node._inc || e._node.ownerDocument._inc;
            if (e._inc != t) {
                var n = e._refresh(e._node);
                ne(e, "length", n.length), s(n, e), e._inc = t
            }
        }

        function g() {
        }

        function v(e, t) {
            for (var n = e.length; n--;) if (e[n] === t) return n
        }

        function M(e, t, n, r) {
            if (r ? t[v(t, r)] = n : t[t.length++] = n, e) {
                var o = (n.ownerElement = e).ownerDocument;
                o && (r && Y(o, e, r), i = e, a = n, (s = o) && s._inc++, "http://www.w3.org/2000/xmlns/" == a.namespaceURI && (i._nsMap[a.prefix ? a.localName : ""] = a.value))
            }
            var s, i, a
        }

        function P(e, t, n) {
            var r = v(t, n);
            if (!(0 <= r)) throw E(l, new Error(e.tagName + "@" + n));
            for (var o = t.length - 1; r < o;) t[r] = t[++r];
            if (t.length = o, e) {
                var s = e.ownerDocument;
                s && (Y(s, e, n), n.ownerElement = null)
            }
        }

        function L(e) {
            if (this._features = {}, e) for (var t in e) this._features = e[t]
        }

        function U() {
        }

        function D(e) {
            return ("<" == e ? "&lt;" : ">" == e && "&gt;") || "&" == e && "&amp;" || '"' == e && "&quot;" || "&#" + e.charCodeAt() + ";"
        }

        function w(e, t) {
            if (t(e)) return !0;
            if (e = e.firstChild) do {
                if (w(e, t)) return !0
            } while (e = e.nextSibling)
        }

        function b() {
        }

        function Y(e, t, n, r) {
            e && e._inc++, "http://www.w3.org/2000/xmlns/" == n.namespaceURI && delete t._nsMap[n.prefix ? n.localName : ""]
        }

        function x(e, t, n) {
            if (e && e._inc) {
                e._inc++;
                var r = t.childNodes;
                if (n) r[r.length++] = n; else {
                    for (var o = t.firstChild, s = 0; o;) o = (r[s++] = o).nextSibling;
                    r.length = s
                }
            }
        }

        function G(e, t) {
            var n = t.previousSibling, r = t.nextSibling;
            return n ? n.nextSibling = r : e.firstChild = r, r ? r.previousSibling = n : e.lastChild = n, x(e.ownerDocument, e), t
        }

        function B(e, t, n) {
            var r = t.parentNode;
            if (r && r.removeChild(t), t.nodeType === O) {
                var o = t.firstChild;
                if (null == o) return t;
                var s = t.lastChild
            } else o = s = t;
            var i = n ? n.previousSibling : e.lastChild;
            for (o.previousSibling = i, s.nextSibling = n, i ? i.nextSibling = o : e.firstChild = o, null == n ? e.lastChild = s : n.previousSibling = s; o.parentNode = e, o !== s && (o = o.nextSibling);) ;
            return x(e.ownerDocument || e, e), t.nodeType == O && (t.firstChild = t.lastChild = null), t
        }

        function F() {
            this._nsMap = {}
        }

        function K() {
        }

        function H() {
        }

        function k() {
        }

        function J() {
        }

        function V() {
        }

        function j() {
        }

        function X() {
        }

        function q() {
        }

        function W() {
        }

        function $() {
        }

        function Q() {
        }

        function z() {
        }

        function Z(e, t) {
            var n = [], r = 9 == this.nodeType ? this.documentElement : this, o = r.prefix, s = r.namespaceURI;
            if (s && null == o && null == (o = r.lookupPrefix(s))) var i = [{namespace: s, prefix: null}];
            return te(this, n, e, t, i), n.join("")
        }

        function ee(e, t, n) {
            var r = e.prefix || "", o = e.namespaceURI;
            if (!r && !o) return !1;
            if ("xml" === r && "http://www.w3.org/XML/1998/namespace" === o || "http://www.w3.org/2000/xmlns/" == o) return !1;
            for (var s = n.length; s--;) {
                var i = n[s];
                if (i.prefix == r) return i.namespace != o
            }
            return !0
        }

        function te(e, t, n, r, o) {
            if (r) {
                if (!(e = r(e))) return;
                if ("string" == typeof e) return void t.push(e)
            }
            switch (e.nodeType) {
                case C:
                    o || (o = []);
                    o.length;
                    var s = e.attributes, i = s.length, a = e.firstChild, c = e.tagName;
                    n = _ === e.namespaceURI || n, t.push("<", c);
                    for (var u = 0; u < i; u++) {
                        "xmlns" == (l = s.item(u)).prefix ? o.push({
                            prefix: l.localName,
                            namespace: l.value
                        }) : "xmlns" == l.nodeName && o.push({prefix: "", namespace: l.value})
                    }
                    for (u = 0; u < i; u++) {
                        var l;
                        if (ee(l = s.item(u), 0, o)) {
                            var d = l.prefix || "", E = l.namespaceURI, h = d ? " xmlns:" + d : " xmlns";
                            t.push(h, '="', E, '"'), o.push({prefix: d, namespace: E})
                        }
                        te(l, t, n, r, o)
                    }
                    if (ee(e, 0, o)) {
                        d = e.prefix || "", E = e.namespaceURI, h = d ? " xmlns:" + d : " xmlns";
                        t.push(h, '="', E, '"'), o.push({prefix: d, namespace: E})
                    }
                    if (a || n && !/^(?:meta|link|img|br|hr|input)$/i.test(c)) {
                        if (t.push(">"), n && /^script$/i.test(c)) for (; a;) a.data ? t.push(a.data) : te(a, t, n, r, o), a = a.nextSibling; else for (; a;) te(a, t, n, r, o), a = a.nextSibling;
                        t.push("</", c, ">")
                    } else t.push("/>");
                    return;
                case R:
                case O:
                    for (a = e.firstChild; a;) te(a, t, n, r, o), a = a.nextSibling;
                    return;
                case S:
                    return t.push(" ", e.name, '="', e.value.replace(/[<&"]/g, D), '"');
                case T:
                    return t.push(e.data.replace(/[<&]/g, D));
                case m:
                    return t.push("<![CDATA[", e.data, "]]>");
                case N:
                    return t.push("\x3c!--", e.data, "--\x3e");
                case y:
                    var p = e.publicId, f = e.systemId;
                    if (t.push("<!DOCTYPE ", e.name), p) t.push(' PUBLIC "', p), f && "." != f && t.push('" "', f), t.push('">'); else if (f && "." != f) t.push(' SYSTEM "', f, '">'); else {
                        var g = e.internalSubset;
                        g && t.push(" [", g, "]"), t.push(">")
                    }
                    return;
                case I:
                    return t.push("<?", e.target, " ", e.data, "?>");
                case A:
                    return t.push("&", e.nodeName, ";");
                default:
                    t.push("??", e.nodeName)
            }
        }

        function ne(e, t, n) {
            e[t] = n
        }

        E.prototype = Error.prototype, s(a, E), h.prototype = {
            length: 0, item: function (e) {
                return this[e] || null
            }, toString: function (e, t) {
                for (var n = [], r = 0; r < this.length; r++) te(this[r], n, e, t);
                return n.join("")
            }
        }, p.prototype.item = function (e) {
            return f(this), this[e]
        }, n(p, h), g.prototype = {
            length: 0, item: h.prototype.item, getNamedItem: function (e) {
                for (var t = this.length; t--;) {
                    var n = this[t];
                    if (n.nodeName == e) return n
                }
            }, setNamedItem: function (e) {
                var t = e.ownerElement;
                if (t && t != this._ownerElement) throw new E(d);
                var n = this.getNamedItem(e.nodeName);
                return M(this._ownerElement, this, e, n), n
            }, setNamedItemNS: function (e) {
                var t, n = e.ownerElement;
                if (n && n != this._ownerElement) throw new E(d);
                return t = this.getNamedItemNS(e.namespaceURI, e.localName), M(this._ownerElement, this, e, t), t
            }, removeNamedItem: function (e) {
                var t = this.getNamedItem(e);
                return P(this._ownerElement, this, t), t
            }, removeNamedItemNS: function (e, t) {
                var n = this.getNamedItemNS(e, t);
                return P(this._ownerElement, this, n), n
            }, getNamedItemNS: function (e, t) {
                for (var n = this.length; n--;) {
                    var r = this[n];
                    if (r.localName == t && r.namespaceURI == e) return r
                }
                return null
            }
        }, L.prototype = {
            hasFeature: function (e, t) {
                var n = this._features[e.toLowerCase()];
                return !(!n || t && !(t in n))
            }, createDocument: function (e, t, n) {
                var r = new b;
                if (r.implementation = this, r.childNodes = new h, (r.doctype = n) && r.appendChild(n), t) {
                    var o = r.createElementNS(e, t);
                    r.appendChild(o)
                }
                return r
            }, createDocumentType: function (e, t, n) {
                var r = new j;
                return r.name = e, r.nodeName = e, r.publicId = t, r.systemId = n, r
            }
        }, U.prototype = {
            firstChild: null,
            lastChild: null,
            previousSibling: null,
            nextSibling: null,
            attributes: null,
            parentNode: null,
            childNodes: null,
            ownerDocument: null,
            nodeValue: null,
            namespaceURI: null,
            prefix: null,
            localName: null,
            insertBefore: function (e, t) {
                return B(this, e, t)
            },
            replaceChild: function (e, t) {
                this.insertBefore(e, t), t && this.removeChild(t)
            },
            removeChild: function (e) {
                return G(this, e)
            },
            appendChild: function (e) {
                return this.insertBefore(e, null)
            },
            hasChildNodes: function () {
                return null != this.firstChild
            },
            cloneNode: function (e) {
                return function e(t, n, r) {
                    var o = new n.constructor;
                    for (var s in n) {
                        var i = n[s];
                        "object" != typeof i && i != o[s] && (o[s] = i)
                    }
                    n.childNodes && (o.childNodes = new h);
                    o.ownerDocument = t;
                    switch (o.nodeType) {
                        case C:
                            var a = n.attributes, c = o.attributes = new g, u = a.length;
                            c._ownerElement = o;
                            for (var l = 0; l < u; l++) o.setAttributeNode(e(t, a.item(l), !0));
                            break;
                        case S:
                            r = !0
                    }
                    if (r) for (var d = n.firstChild; d;) o.appendChild(e(t, d, r)), d = d.nextSibling;
                    return o
                }(this.ownerDocument || this, this, e)
            },
            normalize: function () {
                for (var e = this.firstChild; e;) {
                    var t = e.nextSibling;
                    t && t.nodeType == T && e.nodeType == T ? (this.removeChild(t), e.appendData(t.data)) : (e.normalize(), e = t)
                }
            },
            isSupported: function (e, t) {
                return this.ownerDocument.implementation.hasFeature(e, t)
            },
            hasAttributes: function () {
                return 0 < this.attributes.length
            },
            lookupPrefix: function (e) {
                for (var t = this; t;) {
                    var n = t._nsMap;
                    if (n) for (var r in n) if (n[r] == e) return r;
                    t = t.nodeType == S ? t.ownerDocument : t.parentNode
                }
                return null
            },
            lookupNamespaceURI: function (e) {
                for (var t = this; t;) {
                    var n = t._nsMap;
                    if (n && e in n) return n[e];
                    t = t.nodeType == S ? t.ownerDocument : t.parentNode
                }
                return null
            },
            isDefaultNamespace: function (e) {
                return null == this.lookupPrefix(e)
            }
        }, s(r, U), s(r, U.prototype), b.prototype = {
            nodeName: "#document",
            nodeType: R,
            doctype: null,
            documentElement: null,
            _inc: 1,
            insertBefore: function (e, t) {
                if (e.nodeType != O) return null == this.documentElement && e.nodeType == C && (this.documentElement = e), B(this, e, t), e.ownerDocument = this, e;
                for (var n = e.firstChild; n;) {
                    var r = n.nextSibling;
                    this.insertBefore(n, t), n = r
                }
                return e
            },
            removeChild: function (e) {
                return this.documentElement == e && (this.documentElement = null), G(this, e)
            },
            importNode: function (e, t) {
                return function e(t, n, r) {
                    var o;
                    switch (n.nodeType) {
                        case C:
                            (o = n.cloneNode(!1)).ownerDocument = t;
                        case O:
                            break;
                        case S:
                            r = !0
                    }
                    o || (o = n.cloneNode(!1));
                    o.ownerDocument = t;
                    o.parentNode = null;
                    if (r) for (var s = n.firstChild; s;) o.appendChild(e(t, s, r)), s = s.nextSibling;
                    return o
                }(this, e, t)
            },
            getElementById: function (t) {
                var n = null;
                return w(this.documentElement, function (e) {
                    if (e.nodeType == C && e.getAttribute("id") == t) return n = e, !0
                }), n
            },
            createElement: function (e) {
                var t = new F;
                return t.ownerDocument = this, t.nodeName = e, t.tagName = e, t.childNodes = new h, (t.attributes = new g)._ownerElement = t
            },
            createDocumentFragment: function () {
                var e = new $;
                return e.ownerDocument = this, e.childNodes = new h, e
            },
            createTextNode: function (e) {
                var t = new k;
                return t.ownerDocument = this, t.appendData(e), t
            },
            createComment: function (e) {
                var t = new J;
                return t.ownerDocument = this, t.appendData(e), t
            },
            createCDATASection: function (e) {
                var t = new V;
                return t.ownerDocument = this, t.appendData(e), t
            },
            createProcessingInstruction: function (e, t) {
                var n = new Q;
                return n.ownerDocument = this, n.tagName = n.target = e, n.nodeValue = n.data = t, n
            },
            createAttribute: function (e) {
                var t = new K;
                return t.ownerDocument = this, t.name = e, t.nodeName = e, t.localName = e, t.specified = !0, t
            },
            createEntityReference: function (e) {
                var t = new W;
                return t.ownerDocument = this, t.nodeName = e, t
            },
            createElementNS: function (e, t) {
                var n = new F, r = t.split(":"), o = n.attributes = new g;
                return n.childNodes = new h, n.ownerDocument = this, n.nodeName = t, n.tagName = t, n.namespaceURI = e, 2 == r.length ? (n.prefix = r[0], n.localName = r[1]) : n.localName = t, o._ownerElement = n
            },
            createAttributeNS: function (e, t) {
                var n = new K, r = t.split(":");
                return n.ownerDocument = this, n.nodeName = t, n.name = t, n.namespaceURI = e, n.specified = !0, 2 == r.length ? (n.prefix = r[0], n.localName = r[1]) : n.localName = t, n
            }
        }, n(b, U), b.prototype.getElementsByTagName = (F.prototype = {
            nodeType: C, hasAttribute: function (e) {
                return null != this.getAttributeNode(e)
            }, getAttribute: function (e) {
                var t = this.getAttributeNode(e);
                return t && t.value || ""
            }, getAttributeNode: function (e) {
                return this.attributes.getNamedItem(e)
            }, setAttribute: function (e, t) {
                var n = this.ownerDocument.createAttribute(e);
                n.value = n.nodeValue = "" + t, this.setAttributeNode(n)
            }, removeAttribute: function (e) {
                var t = this.getAttributeNode(e);
                t && this.removeAttributeNode(t)
            }, appendChild: function (e) {
                return e.nodeType === O ? this.insertBefore(e, null) : function (e, t) {
                    var n = t.parentNode;
                    if (n) {
                        var r = e.lastChild;
                        n.removeChild(t), r = e.lastChild
                    }
                    return r = e.lastChild, t.parentNode = e, t.previousSibling = r, t.nextSibling = null, r ? r.nextSibling = t : e.firstChild = t, e.lastChild = t, x(e.ownerDocument, e, t), t
                }(this, e)
            }, setAttributeNode: function (e) {
                return this.attributes.setNamedItem(e)
            }, setAttributeNodeNS: function (e) {
                return this.attributes.setNamedItemNS(e)
            }, removeAttributeNode: function (e) {
                return this.attributes.removeNamedItem(e.nodeName)
            }, removeAttributeNS: function (e, t) {
                var n = this.getAttributeNodeNS(e, t);
                n && this.removeAttributeNode(n)
            }, hasAttributeNS: function (e, t) {
                return null != this.getAttributeNodeNS(e, t)
            }, getAttributeNS: function (e, t) {
                var n = this.getAttributeNodeNS(e, t);
                return n && n.value || ""
            }, setAttributeNS: function (e, t, n) {
                var r = this.ownerDocument.createAttributeNS(e, t);
                r.value = r.nodeValue = "" + n, this.setAttributeNode(r)
            }, getAttributeNodeNS: function (e, t) {
                return this.attributes.getNamedItemNS(e, t)
            }, getElementsByTagName: function (r) {
                return new p(this, function (t) {
                    var n = [];
                    return w(t, function (e) {
                        e === t || e.nodeType != C || "*" !== r && e.tagName != r || n.push(e)
                    }), n
                })
            }, getElementsByTagNameNS: function (r, o) {
                return new p(this, function (t) {
                    var n = [];
                    return w(t, function (e) {
                        e === t || e.nodeType !== C || "*" !== r && e.namespaceURI !== r || "*" !== o && e.localName != o || n.push(e)
                    }), n
                })
            }
        }).getElementsByTagName, b.prototype.getElementsByTagNameNS = F.prototype.getElementsByTagNameNS, n(F, U), K.prototype.nodeType = S, n(K, U), H.prototype = {
            data: "",
            substringData: function (e, t) {
                return this.data.substring(e, e + t)
            },
            appendData: function (e) {
                e = this.data + e, this.nodeValue = this.data = e, this.length = e.length
            },
            insertData: function (e, t) {
                this.replaceData(e, 0, t)
            },
            appendChild: function (e) {
                throw new Error(c[u])
            },
            deleteData: function (e, t) {
                this.replaceData(e, t, "")
            },
            replaceData: function (e, t, n) {
                n = this.data.substring(0, e) + n + this.data.substring(e + t), this.nodeValue = this.data = n, this.length = n.length
            }
        }, n(H, U), k.prototype = {
            nodeName: "#text", nodeType: T, splitText: function (e) {
                var t = this.data, n = t.substring(e);
                t = t.substring(0, e), this.data = this.nodeValue = t, this.length = t.length;
                var r = this.ownerDocument.createTextNode(n);
                return this.parentNode && this.parentNode.insertBefore(r, this.nextSibling), r
            }
        }, n(k, H), J.prototype = {
            nodeName: "#comment",
            nodeType: N
        }, n(J, H), V.prototype = {
            nodeName: "#cdata-section",
            nodeType: m
        }, n(V, H), j.prototype.nodeType = y, n(j, U), X.prototype.nodeType = i, n(X, U), q.prototype.nodeType = o, n(q, U), W.prototype.nodeType = A, n(W, U), $.prototype.nodeName = "#document-fragment", $.prototype.nodeType = O, n($, U), Q.prototype.nodeType = I, n(Q, U), z.prototype.serializeToString = function (e, t, n) {
            return Z.call(e, t, n)
        }, U.prototype.toString = Z;
        try {
            if (Object.defineProperty) {
                Object.defineProperty(p.prototype, "length", {
                    get: function () {
                        return f(this), this.$$length
                    }
                }), Object.defineProperty(U.prototype, "textContent", {
                    get: function () {
                        return function e(t) {
                            switch (t.nodeType) {
                                case C:
                                case O:
                                    var n = [];
                                    for (t = t.firstChild; t;) 7 !== t.nodeType && 8 !== t.nodeType && n.push(e(t)), t = t.nextSibling;
                                    return n.join("");
                                default:
                                    return t.nodeValue
                            }
                        }(this)
                    }, set: function (e) {
                        switch (this.nodeType) {
                            case C:
                            case O:
                                for (; this.firstChild;) this.removeChild(this.firstChild);
                                (e || String(e)) && this.appendChild(this.ownerDocument.createTextNode(e));
                                break;
                            default:
                                this.data = e, this.value = e, this.nodeValue = e
                        }
                    }
                }), ne = function (e, t, n) {
                    e["$$" + t] = n
                }
            }
        } catch (e) {
        }
        t.DOMImplementation = L, t.XMLSerializer = z
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(3);
        t.init = function (e) {
            return r.CometChat.getInstance(e)
        }, t.CometChat = r.CometChat
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(27), i = n(2);
        t.getEndPoint = function (e, s) {
            void 0 === e && (e = ""), void 0 === s && (s = {});
            var t = new r.EndpointFactory;
            return new Promise(function (r, o) {
                try {
                    t.getEndpointData(e).then(function (e) {
                        var t = e;
                        if (t) {
                            for (var n in s) t.endpoint = t.endpoint.replace("{{" + n + "}}", s[n]);
                            r(t)
                        } else o({error: "Unknown endPoint name."})
                    })
                } catch (e) {
                    o(new i.CometChatException(e))
                }
            })
        }
    }, function (e, p, t) {
        "use strict";
        var n = this && this.__awaiter || function (s, i, a, c) {
            return new (a || (a = Promise))(function (e, t) {
                function n(e) {
                    try {
                        o(c.next(e))
                    } catch (e) {
                        t(e)
                    }
                }

                function r(e) {
                    try {
                        o(c.throw(e))
                    } catch (e) {
                        t(e)
                    }
                }

                function o(t) {
                    t.done ? e(t.value) : new a(function (e) {
                        e(t.value)
                    }).then(n, r)
                }

                o((c = c.apply(s, i || [])).next())
            })
        }, f = this && this.__generator || function (n, r) {
            var o, s, i, e, a = {
                label: 0, sent: function () {
                    if (1 & i[0]) throw i[1];
                    return i[1]
                }, trys: [], ops: []
            };
            return e = {
                next: t(0),
                throw: t(1),
                return: t(2)
            }, "function" == typeof Symbol && (e[Symbol.iterator] = function () {
                return this
            }), e;

            function t(t) {
                return function (e) {
                    return function (t) {
                        if (o) throw new TypeError("Generator is already executing.");
                        for (; a;) try {
                            if (o = 1, s && (i = 2 & t[0] ? s.return : t[0] ? s.throw || ((i = s.return) && i.call(s), 0) : s.next) && !(i = i.call(s, t[1])).done) return i;
                            switch (s = 0, i && (t = [2 & t[0], i.value]), t[0]) {
                                case 0:
                                case 1:
                                    i = t;
                                    break;
                                case 4:
                                    return a.label++, {value: t[1], done: !1};
                                case 5:
                                    a.label++, s = t[1], t = [0];
                                    continue;
                                case 7:
                                    t = a.ops.pop(), a.trys.pop();
                                    continue;
                                default:
                                    if (!(i = 0 < (i = a.trys).length && i[i.length - 1]) && (6 === t[0] || 2 === t[0])) {
                                        a = 0;
                                        continue
                                    }
                                    if (3 === t[0] && (!i || t[1] > i[0] && t[1] < i[3])) {
                                        a.label = t[1];
                                        break
                                    }
                                    if (6 === t[0] && a.label < i[1]) {
                                        a.label = i[1], i = t;
                                        break
                                    }
                                    if (i && a.label < i[2]) {
                                        a.label = i[2], a.ops.push(t);
                                        break
                                    }
                                    i[2] && a.ops.pop(), a.trys.pop();
                                    continue
                            }
                            t = r.call(n, a)
                        } catch (e) {
                            t = [6, e], s = 0
                        } finally {
                            o = i = 0
                        }
                        if (5 & t[0]) throw t[1];
                        return {value: t[0] ? t[1] : void 0, done: !0}
                    }([t, e])
                }
            }
        };
        p.__esModule = !0;
        var r = t(15), g = t(10), _ = t(0), o = t(1);
        p.$iq = r.$iq, p.$build = r.$build, p.$msg = r.$msg, p.$pres = r.$pres, p.Strophe = r.Strophe, p.NS = r.Strophe.NS, p.Status = r.Strophe.Status, window.Strophe = p.Strophe, window.$iq = p.$iq, window.$msg = p.$msg, p.Strophe.addConnectionPlugin("chatstates", {
            init: function (e) {
                this._connection = e, p.Strophe.addNamespace("CHATSTATES", "http://jabber.org/protocol/chatstates")
            }, statusChanged: function (e) {
            }, addActive: function (e) {
                return e.c("active", {xmlns: p.Strophe.NS.CHATSTATES}).up()
            }, _notificationReceived: function (e) {
                var t = e.getElementsByTagName("composing"), n = e.getElementsByTagName("paused");
                e.getAttribute("from");
                return 0 < t.length && JSON.stringify(unescape(g.parseHTML(e.getElementsByTagName("body")[0]))), n.length, !0
            }, sendActive: function (e, t, n) {
                this._sendNotification(e, t, "active", n)
            }, sendComposing: function (e, t, n) {
                this._sendNotification(e, t, "composing", n)
            }, sendPaused: function (e, t, n) {
                this._sendNotification(e, t, "paused", n)
            }, sendInactive: function (e, t) {
                this._sendNotification(e, t, "inactive")
            }, sendGone: function (e, t) {
                this._sendNotification(e, t, "gone")
            }, _sendNotification: function (e, t, n, r) {
                t || (t = "chat"), o.isFalsy(r) ? this._connection.send(p.$msg({
                    to: e,
                    from: this._connection.jid,
                    type: t
                }).c(n, {xmlns: p.Strophe.NS.CHATSTATES})) : this._connection.send(p.$msg({
                    to: e,
                    from: this._connection.jid,
                    type: t
                }).c("body", JSON.stringify(r)).up().c(n, {xmlns: p.Strophe.NS.CHATSTATES}))
            }
        }), p.Strophe.addConnectionPlugin("receipts", {
            _conn: null, _msgQueue: {}, _retries: {}, _resendCount: 10, _resendTime: 9e3, init: function (e) {
                this._conn = e, p.Strophe.addNamespace("RECEIPTS", "urn:xmpp:receipts")
            }, statusChanged: function (e) {
                if (e === p.Strophe.Status.CONNECTED || e === p.Strophe.Status.ATTACHED) {
                    this._conn.addHandler(this._onRequestReceived.bind(this), p.Strophe.NS.RECEIPTS, "message");
                    var t = this;
                    setTimeout(function () {
                        t.resendQueue()
                    }, 5e3)
                }
            }, sendMessage: function (e) {
                var t = this._conn.getUniqaueId();
                e.tree().setAttribute("id", t);
                var n = p.Strophe.xmlElement("request", {xmlns: p.Strophe.NS.RECEIPTS});
                return e.tree().appendChild(n), this._msgQueue[t] = e, this._retries[t] = 0, this._conn.send(e), this.resendMessage(t), t
            }, resendMessage: function (e) {
                var t = this;
                setTimeout(function () {
                    if (t._msgQueue[e]) {
                        if (!t._conn.connected) return void t.resendMessage(e);
                        if (t._retries[e]++, t._retries[e] > t._resendCount) return;
                        t._msgQueue[e].tree().setAttribute("from", t._conn.jid), t._conn.send(t._msgQueue[e]), t.resendMessage(e)
                    }
                }, this._resendTime)
            }, addReceiptHandler: function (t, e, n, r) {
                var o = this;
                this._conn.addHandler(function (e) {
                    return o._processReceipt(e), t(e)
                }, p.Strophe.NS.RECEIPTS, "message", e, null, n, r)
            }, _processReceipt: function (h, e) {
                return void 0 === e && (e = 0), n(this, void 0, void 0, function () {
                    var t, n, r, o, s, i, a, c, u, l, d, E;
                    return f(this, function (e) {
                        t = h.getAttribute(_.DELIVERY_RECEIPTS.ID), n = p.Strophe.getBareJidFromJid(h.getAttribute(_.MessageConstatnts.XMPP_KEYS.FROM)), r = g.getUidFromJid(n), o = _.MessageConstatnts.XMPP_KEYS.TYPE_USER, s = _.MessageConstatnts.RECEIVER_TYPE.USER, i = h.getElementsByTagName("request"), a = h.getElementsByTagName("received");
                        try {
                            c = h.getElementsByTagName("body")[0].innerHTML
                        } catch (e) {
                            u = c = void 0
                        }
                        return void 0 !== c && (u = JSON.parse(c).receiverType), h.getAttribute(_.MessageConstatnts.XMPP_KEYS.TYPE) == _.MessageConstatnts.XMPP_KEYS.TYPE_GROUP || void 0 !== u && u == _.MessageConstatnts.RECEIVER_TYPE.GROUP ? (s = _.MessageConstatnts.RECEIVER_TYPE.GROUP, n = g.getGroupJidFullGroupJid(h.getAttribute(_.MessageConstatnts.XMPP_KEYS.FROM)), o = _.MessageConstatnts.XMPP_KEYS.TYPE_GROUP, 0 < n.trim().length && 0 < i.length && (l = p.$msg({
                            to: n,
                            type: o,
                            from: this._conn.jid,
                            id: this._conn.getUniqueId()
                        }), d = p.Strophe.xmlElement("delivered", {
                            type: s,
                            receiverId: r,
                            xmlns: p.Strophe.NS.RECEIPTS,
                            id: t
                        }), l.tree().appendChild(d), this._conn.send(l))) : 0 < i.length && (l = p.$msg({
                            to: n,
                            type: o,
                            from: this._conn.jid,
                            id: this._conn.getUniqueId()
                        }), d = p.Strophe.xmlElement("delivered", {
                            type: s,
                            receiverId: r,
                            xmlns: p.Strophe.NS.RECEIPTS,
                            id: t
                        }), l.tree().appendChild(d), this._conn.send(l)), 0 < a.length && (E = a[0].getAttribute(_.DELIVERY_RECEIPTS.ID)) && (delete this._msgQueue[E], delete this._retries[E]), [2]
                    })
                })
            }, resendQueue: function () {
                if (this._conn.connected) for (var e in this._msgQueue) this._msgQueue.hasOwnProperty(e) && this._conn.send(this._msgQueue[e]); else {
                    var t = this;
                    setTimeout(function () {
                        t.resendQueue()
                    }, 5e3)
                }
            }, getUnreceivedMsgs: function () {
                var e = [];
                for (var t in this._msgQueue) this._msgQueue.hasOwnProperty(t) && e.push(this._msgQueue[t]);
                return e
            }, clearMessages: function () {
                this._msgQueue = {}
            }
        })
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = function () {
            function e() {
                this.RECEIPT_TYPE = {
                    READ_RECEIPT: "read",
                    DELIVERY_RECEIPT: "delivery"
                }, this.receiptType = this.RECEIPT_TYPE.DELIVERY_RECEIPT
            }

            return e.prototype.getReceiverType = function () {
                return this.receiverType
            }, e.prototype.setReceiverType = function (e) {
                this.receiverType = e
            }, e.prototype.getSender = function () {
                return this.sender
            }, e.prototype.setSender = function (e) {
                this.sender = e
            }, e.prototype.getReceiver = function () {
                return this.receiver
            }, e.prototype.setReceiver = function (e) {
                this.receiver = e
            }, e.prototype.getTimestamp = function () {
                return this.timestamp
            }, e.prototype.setTimestamp = function (e) {
                this.timestamp = e
            }, e.prototype.setReadAt = function (e) {
                this.readAt = e
            }, e.prototype.getReadAt = function () {
                return this.readAt
            }, e.prototype.setDeliveredAt = function (e) {
                this.deliveredAt = e
            }, e.prototype.getDeliveredAt = function () {
                return this.deliveredAt
            }, e.prototype.getMessageId = function () {
                return this.messageId
            }, e.prototype.setMessageId = function (e) {
                this.messageId = e
            }, e.prototype.getReceiptType = function () {
                return this.receiptType
            }, e.prototype.setReceiptType = function (e) {
                void 0 === e && (e = this.RECEIPT_TYPE.DELIVERY_RECEIPT), this.receiptType = e
            }, e
        }();
        t.MessageReceipt = r
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(0), o = function () {
            function t(e) {
                e.hasOwnProperty(r.ATTACHMENTS_CONSTANTS.KEYS.EXTENSION) && (this.fileEextension = e[r.ATTACHMENTS_CONSTANTS.KEYS.EXTENSION]), e.hasOwnProperty(r.ATTACHMENTS_CONSTANTS.KEYS.MIME_TYPE) && (this.fileMimeType = e[r.ATTACHMENTS_CONSTANTS.KEYS.MIME_TYPE]), e.hasOwnProperty(r.ATTACHMENTS_CONSTANTS.KEYS.NAME) && (this.fileName = e[r.ATTACHMENTS_CONSTANTS.KEYS.NAME]), e.hasOwnProperty(r.ATTACHMENTS_CONSTANTS.KEYS.SIZE) && (this.fileSize = e[r.ATTACHMENTS_CONSTANTS.KEYS.SIZE]), e.hasOwnProperty(r.ATTACHMENTS_CONSTANTS.KEYS.URL) && (this.fileUrl = e[r.ATTACHMENTS_CONSTANTS.KEYS.URL])
            }

            return t.prototype.createFileFromJSON = function (e) {
                return new t(e)
            }, t.prototype.toJSON = function (e) {
                return JSON.stringify(e)
            }, t.prototype.getFileExtension = function () {
                return this.fileEextension
            }, t.prototype.setFileExtension = function (e) {
                this.fileEextension = e
            }, t.prototype.getFileMimeType = function () {
                return this.fileMimeType
            }, t.prototype.setFileMimeType = function (e) {
                this.fileMimeType = e
            }, t.prototype.getFileName = function () {
                return this.fileName
            }, t.prototype.setFileName = function (e) {
                this.fileName = e
            }, t.prototype.getFileSize = function () {
                return this.fileSize
            }, t.prototype.setFileSize = function (e) {
                this.fileSize = e
            }, t.prototype.getFileUrl = function () {
                return this.fileUrl
            }, t.prototype.setFileUrl = function (e) {
                this.fileUrl = e
            }, t
        }();
        t.Attachment = o
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var o = n(1), s = n(10), r = function () {
            function e(e, t, n, r) {
                o.isFalsy(e) || (this.jid = e, this.uid = s.getUidFromJid(e), o.isFalsy(r) || (this.priority = r), o.isFalsy(t) || (this.status = t), o.isFalsy(n) || (this.lastActiveAt = n))
            }

            return e.prototype.getUid = function () {
                return this.uid
            }, e.prototype.setUid = function (e) {
                this.uid = e
            }, e.prototype.getJid = function () {
                return this.jid
            }, e.prototype.setJid = function (e) {
                this.jid = e
            }, e.prototype.getPriority = function () {
                return this.priority
            }, e.prototype.setPriority = function (e) {
                this.priority = e
            }, e.prototype.getStatus = function () {
                return this.status
            }, e.prototype.setStatus = function (e) {
                this.status = e
            }, e.prototype.getLastActiveAt = function () {
                return this.lastActiveAt
            }, e.prototype.setLastActiveAt = function (e) {
                this.lastActiveAt = e
            }, e.prototype.getStatusMessage = function () {
                return this.statusMessage
            }, e.prototype.setStatusMessage = function (e) {
                this.statusMessage = e
            }, e
        }();
        t.UserPresence = r
    }, function (e, t, n) {
        !function (E) {
            "use strict";
            var n, u, a = {}.hasOwnProperty, o = function (e, t) {
                return function () {
                    return e.apply(t, arguments)
                }
            };
            E.Strophe.addConnectionPlugin("muc", {
                _connection: null, rooms: {}, roomNames: [], init: function (e) {
                    return this._connection = e, this._muc_handler = null, E.Strophe.addNamespace("MUC_OWNER", E.Strophe.NS.MUC + "#owner"), E.Strophe.addNamespace("MUC_ADMIN", E.Strophe.NS.MUC + "#admin"), E.Strophe.addNamespace("MUC_USER", E.Strophe.NS.MUC + "#user"), E.Strophe.addNamespace("MUC_ROOMCONF", E.Strophe.NS.MUC + "#roomconfig"), E.Strophe.addNamespace("MUC_REGISTER", "jabber:iq:register")
                }, join: function (l, e, t, n, r, o, s, i) {
                    var a, c, d;
                    return c = this.test_append_nick(l, e), a = E.$pres({
                        from: this._connection.jid,
                        to: c
                    }).c("x", {xmlns: E.Strophe.NS.MUC}), null != s && (a = a.c("history", s).up()), null != o && a.cnode(E.Strophe.xmlElement("password", [], o)), null != i && a.up().cnode(i), null == this._muc_handler && (this._muc_handler = this._connection.addHandler((d = this, function (e) {
                        var t, n, r, o, s, i, a, c, u;
                        if (!(t = e.getAttribute("from"))) return !0;
                        if (i = t.split("/")[0], !d.rooms[i]) return !0;
                        if (l = d.rooms[i], n = {}, "message" === e.nodeName) n = l._message_handlers; else if ("presence" === e.nodeName && 0 < (u = e.getElementsByTagName("x")).length) for (r = 0, s = u.length; r < s; r++) if (a = u[r], (c = a.getAttribute("xmlns")) && c.match(E.Strophe.NS.MUC)) {
                            n = l._presence_handlers;
                            break
                        }
                        for (o in n) (0, n[o])(e, l) || delete n[o];
                        return !0
                    }))), this.rooms.hasOwnProperty(l) || (this.rooms[l] = new u(this, l, e, o), n && this.rooms[l].addHandler("presence", n), t && this.rooms[l].addHandler("message", t), r && this.rooms[l].addHandler("roster", r), this.roomNames.push(l)), this._connection.send(a)
                }, leave: function (e, t, n, r) {
                    var o, s, i, a;
                    return o = this.roomNames.indexOf(e), delete this.rooms[e], 0 <= o && (this.roomNames.splice(o, 1), 0 === this.roomNames.length && (this._connection.deleteHandler(this._muc_handler), this._muc_handler = null)), a = this.test_append_nick(e, t), i = this._connection.getUniqueId(), s = E.$pres({
                        type: "unavailable",
                        id: i,
                        from: this._connection.jid,
                        to: a
                    }), null != r && s.c("status", r), null != n && this._connection.addHandler(n, null, "presence", null, i), this._connection.send(s), i
                }, message: function (e, t, n, r, o, s) {
                    var i, a, c;
                    return c = this.test_append_nick(e, t), o = o || (null != t ? "chat" : "groupchat"), s = s || this._connection.getUniqueId(), (i = E.$msg({
                        to: c,
                        from: this._connection.jid,
                        type: o,
                        id: s
                    }).c("body").t(n)).up(), null != r && (i.c("html", {xmlns: E.Strophe.NS.XHTML_IM}).c("body", {xmlns: E.Strophe.NS.XHTML}).h(r), 0 === i.node.childNodes.length ? (a = i.node.parentNode, i.up().up(), i.node.removeChild(a)) : i.up().up()), i.c("x", {xmlns: "jabber:x:event"}).c("composing"), this._connection.send(i), s
                }, groupchat: function (e, t, n, r) {
                    return this.message(e, null, t, n, void 0, r)
                }, invite: function (e, t, n) {
                    var r, o;
                    return o = this._connection.getUniqueId(), r = E.$msg({
                        from: this._connection.jid,
                        to: e,
                        id: o
                    }).c("x", {xmlns: E.Strophe.NS.MUC_USER}).c("invite", {to: t}), null != n && r.c("reason", n), this._connection.send(r), o
                }, multipleInvites: function (e, t, n) {
                    var r, o, s, i, a;
                    for (i = this._connection.getUniqueId(), o = E.$msg({
                        from: this._connection.jid,
                        to: e,
                        id: i
                    }).c("x", {xmlns: E.Strophe.NS.MUC_USER}), r = 0, s = t.length; r < s; r++) a = t[r], o.c("invite", {to: a}), null != n && (o.c("reason", n), o.up()), o.up();
                    return this._connection.send(o), i
                }, directInvite: function (e, t, n, r) {
                    var o, s, i;
                    return i = this._connection.getUniqueId(), o = {
                        xmlns: "jabber:x:conference",
                        jid: e
                    }, null != n && (o.reason = n), null != r && (o.password = r), s = E.$msg({
                        from: this._connection.jid,
                        to: t,
                        id: i
                    }).c("x", o), this._connection.send(s), i
                }, queryOccupants: function (e, t, n) {
                    var r, o;
                    return r = {xmlns: E.Strophe.NS.DISCO_ITEMS}, o = E.$iq({
                        from: this._connection.jid,
                        to: e,
                        type: "get"
                    }).c("query", r), this._connection.sendIQ(o, t, n)
                }, configure: function (e, t, n) {
                    var r, o;
                    return r = E.$iq({
                        to: e,
                        type: "get"
                    }).c("query", {xmlns: E.Strophe.NS.MUC_OWNER}), o = r.tree(), this._connection.sendIQ(o, t, n)
                }, cancelConfigure: function (e) {
                    var t, n;
                    return t = E.$iq({
                        to: e,
                        type: "set"
                    }).c("query", {xmlns: E.Strophe.NS.MUC_OWNER}).c("x", {
                        xmlns: "jabber:x:data",
                        type: "cancel"
                    }), n = t.tree(), this._connection.sendIQ(n)
                }, saveConfiguration: function (e, t, n, r) {
                    var o, s, i, a, c;
                    if (i = E.$iq({
                        to: e,
                        type: "set"
                    }).c("query", {xmlns: E.Strophe.NS.MUC_OWNER}), void 0 !== E.Strophe.x && void 0 !== E.Strophe.x.Form && t instanceof E.Strophe.x.Form) t.type = "submit", i.cnode(t.toXML()); else for (i.c("x", {
                        xmlns: "jabber:x:data",
                        type: "submit"
                    }), s = 0, a = t.length; s < a; s++) o = t[s], i.cnode(o).up();
                    return c = i.tree(), this._connection.sendIQ(c, n, r)
                }, createInstantRoom: function (e, t, n) {
                    var r;
                    return r = E.$iq({
                        to: e,
                        type: "set"
                    }).c("query", {xmlns: E.Strophe.NS.MUC_OWNER}).c("x", {
                        xmlns: "jabber:x:data",
                        type: "submit"
                    }), this._connection.sendIQ(r.tree(), t, n)
                }, createConfiguredRoom: function (e, t, n, r) {
                    var o, s, i;
                    for (o in (s = E.$iq({
                        to: e,
                        type: "set"
                    }).c("query", {xmlns: E.Strophe.NS.MUC_OWNER}).c("x", {
                        xmlns: "jabber:x:data",
                        type: "submit"
                    })).c("field", {var: "FORM_TYPE"}).c("value").t("http://jabber.org/protocol/muc#roomconfig").up().up(), t) a.call(t, o) && (i = t[o], s.c("field", {var: o}).c("value").t(i).up().up());
                    return this._connection.sendIQ(s.tree(), n, r)
                }, setTopic: function (e, t) {
                    var n;
                    return n = E.$msg({
                        to: e,
                        from: this._connection.jid,
                        type: "groupchat"
                    }).c("subject", {xmlns: "jabber:client"}).t(t), this._connection.send(n.tree())
                }, _modifyPrivilege: function (e, t, n, r, o) {
                    var s;
                    return s = E.$iq({
                        to: e,
                        type: "set"
                    }).c("query", {xmlns: E.Strophe.NS.MUC_ADMIN}).cnode(t.node), null != n && s.c("reason", n), this._connection.sendIQ(s.tree(), r, o)
                }, modifyRole: function (e, t, n, r, o, s) {
                    var i;
                    return i = E.$build("item", {nick: t, role: n}), this._modifyPrivilege(e, i, r, o, s)
                }, kick: function (e, t, n, r, o) {
                    return this.modifyRole(e, t, "none", n, r, o)
                }, voice: function (e, t, n, r, o) {
                    return this.modifyRole(e, t, "participant", n, r, o)
                }, mute: function (e, t, n, r, o) {
                    return this.modifyRole(e, t, "visitor", n, r, o)
                }, op: function (e, t, n, r, o) {
                    return this.modifyRole(e, t, "moderator", n, r, o)
                }, deop: function (e, t, n, r, o) {
                    return this.modifyRole(e, t, "participant", n, r, o)
                }, modifyAffiliation: function (e, t, n, r, o, s) {
                    var i;
                    return i = E.$build("item", {jid: t, affiliation: n}), this._modifyPrivilege(e, i, r, o, s)
                }, ban: function (e, t, n, r, o) {
                    return this.modifyAffiliation(e, t, "outcast", n, r, o)
                }, member: function (e, t, n, r, o) {
                    return this.modifyAffiliation(e, t, "member", n, r, o)
                }, revoke: function (e, t, n, r, o) {
                    return this.modifyAffiliation(e, t, "none", n, r, o)
                }, owner: function (e, t, n, r, o) {
                    return this.modifyAffiliation(e, t, "owner", n, r, o)
                }, admin: function (e, t, n, r, o) {
                    return this.modifyAffiliation(e, t, "admin", n, r, o)
                }, changeNick: function (e, t) {
                    var n, r;
                    return r = this.test_append_nick(e, t), n = E.$pres({
                        from: this._connection.jid,
                        to: r,
                        id: this._connection.getUniqueId()
                    }), this._connection.send(n.tree())
                }, setStatus: function (e, t, n, r) {
                    var o, s;
                    return s = this.test_append_nick(e, t), o = E.$pres({
                        from: this._connection.jid,
                        to: s
                    }), null != n && o.c("show", n).up(), null != r && o.c("status", r), this._connection.send(o.tree())
                }, registrationRequest: function (e, a, t) {
                    var n;
                    return n = E.$iq({
                        to: e,
                        from: this._connection.jid,
                        type: "get"
                    }).c("query", {xmlns: E.Strophe.NS.MUC_REGISTER}), this._connection.sendIQ(n, function (e) {
                        var t, n, r, o, s, i;
                        for ((n = e.getElementsByTagName("field")).length, o = {
                            required: [],
                            optional: []
                        }, s = 0, i = n.length; s < i; s++) t = n[s], r = {
                            var: t.getAttribute("var"),
                            label: t.getAttribute("label"),
                            type: t.getAttribute("type")
                        }, 0 < t.getElementsByTagName("required").length ? o.required.push(r) : o.optional.push(r);
                        return a(o)
                    }, t)
                }, submitRegistrationForm: function (e, t, n, r) {
                    var o, s, i;
                    for (s in (o = E.$iq({
                        to: e,
                        type: "set"
                    }).c("query", {xmlns: E.Strophe.NS.MUC_REGISTER})).c("x", {
                        xmlns: "jabber:x:data",
                        type: "submit"
                    }), o.c("field", {var: "FORM_TYPE"}).c("value").t("http://jabber.org/protocol/muc#register").up().up(), t) i = t[s], o.c("field", {var: s}).c("value").t(i).up().up();
                    return this._connection.sendIQ(o, n, r)
                }, listRooms: function (e, t, n) {
                    var r;
                    return r = E.$iq({
                        to: e,
                        from: this._connection.jid,
                        type: "get"
                    }).c("query", {xmlns: E.Strophe.NS.DISCO_ITEMS}), this._connection.sendIQ(r, t, n)
                }, test_append_nick: function (e, t) {
                    var n, r;
                    return r = E.Strophe.escapeNode(E.Strophe.getNodeFromJid(e)), n = E.Strophe.getDomainFromJid(e), r + "@" + n + (null != t ? "/" + t : "")
                }
            }), u = function () {
                function i(e, t, n, r) {
                    this.client = e, this.name = t, this.nick = n, this.password = r, this._roomRosterHandler = o(this._roomRosterHandler, this), this._addOccupant = o(this._addOccupant, this), this.roster = {}, this._message_handlers = {}, this._presence_handlers = {}, this._roster_handlers = {}, this._handler_ids = 0, this.client.muc && (this.client = this.client.muc), this.name = E.Strophe.getBareJidFromJid(this.name), this.addHandler("presence", this._roomRosterHandler)
                }

                return i.prototype.join = function (e, t, n) {
                    return this.client.join(this.name, this.nick, e, t, n, this.password)
                }, i.prototype.leave = function (e, t) {
                    return this.client.leave(this.name, this.nick, e, t), delete this.client.rooms[this.name]
                }, i.prototype.message = function (e, t, n, r) {
                    return this.client.message(this.name, e, t, n, r)
                }, i.prototype.groupchat = function (e, t) {
                    return this.client.groupchat(this.name, e, t)
                }, i.prototype.invite = function (e, t) {
                    return this.client.invite(this.name, e, t)
                }, i.prototype.multipleInvites = function (e, t) {
                    return this.client.invite(this.name, e, t)
                }, i.prototype.directInvite = function (e, t) {
                    return this.client.directInvite(this.name, e, t, this.password)
                }, i.prototype.configure = function (e) {
                    return this.client.configure(this.name, e)
                }, i.prototype.cancelConfigure = function () {
                    return this.client.cancelConfigure(this.name)
                }, i.prototype.saveConfiguration = function (e) {
                    return this.client.saveConfiguration(this.name, e)
                }, i.prototype.queryOccupants = function (e, t) {
                    return this.client.queryOccupants(this.name, e, t)
                }, i.prototype.setTopic = function (e) {
                    return this.client.setTopic(this.name, e)
                }, i.prototype.modifyRole = function (e, t, n, r, o) {
                    return this.client.modifyRole(this.name, e, t, n, r, o)
                }, i.prototype.kick = function (e, t, n, r) {
                    return this.client.kick(this.name, e, t, n, r)
                }, i.prototype.voice = function (e, t, n, r) {
                    return this.client.voice(this.name, e, t, n, r)
                }, i.prototype.mute = function (e, t, n, r) {
                    return this.client.mute(this.name, e, t, n, r)
                }, i.prototype.op = function (e, t, n, r) {
                    return this.client.op(this.name, e, t, n, r)
                }, i.prototype.deop = function (e, t, n, r) {
                    return this.client.deop(this.name, e, t, n, r)
                }, i.prototype.modifyAffiliation = function (e, t, n, r, o) {
                    return this.client.modifyAffiliation(this.name, e, t, n, r, o)
                }, i.prototype.ban = function (e, t, n, r) {
                    return this.client.ban(this.name, e, t, n, r)
                }, i.prototype.member = function (e, t, n, r) {
                    return this.client.member(this.name, e, t, n, r)
                }, i.prototype.revoke = function (e, t, n, r) {
                    return this.client.revoke(this.name, e, t, n, r)
                }, i.prototype.owner = function (e, t, n, r) {
                    return this.client.owner(this.name, e, t, n, r)
                }, i.prototype.admin = function (e, t, n, r) {
                    return this.client.admin(this.name, e, t, n, r)
                }, i.prototype.changeNick = function (e) {
                    return this.nick = e, this.client.changeNick(this.name, nick)
                }, i.prototype.setStatus = function (e, t) {
                    return this.client.setStatus(this.name, this.nick, e, t)
                }, i.prototype.addHandler = function (e, t) {
                    var n;
                    switch (n = this._handler_ids++, e) {
                        case"presence":
                            this._presence_handlers[n] = t;
                            break;
                        case"message":
                            this._message_handlers[n] = t;
                            break;
                        case"roster":
                            this._roster_handlers[n] = t;
                            break;
                        default:
                            return this._handler_ids--, null
                    }
                    return n
                }, i.prototype.removeHandler = function (e) {
                    return delete this._presence_handlers[e], delete this._message_handlers[e], delete this._roster_handlers[e]
                }, i.prototype._addOccupant = function (e) {
                    var t;
                    return t = new n(e, this), this.roster[t.nick] = t
                }, i.prototype._roomRosterHandler = function (e) {
                    var t, n, r, o, s;
                    switch (t = i._parsePresence(e), o = t.nick, r = t.newnick || null, t.type) {
                        case"error":
                            return !0;
                        case"unavailable":
                            r && (t.nick = r, this.roster[o] && this.roster[r] && (this.roster[o].update(this.roster[r]), this.roster[r] = this.roster[o]), this.roster[o] && !this.roster[r] && (this.roster[r] = this.roster[o].update(t))), delete this.roster[o];
                            break;
                        default:
                            this.roster[o] ? this.roster[o].update(t) : this._addOccupant(t)
                    }
                    for (n in s = this._roster_handlers) (0, s[n])(this.roster, this) || delete this._roster_handlers[n];
                    return !0
                }, i._parsePresence = function (e) {
                    var t, n, r, o, s, i, a, c, u, l;
                    for ((r = {}).nick = E.Strophe.getResourceFromJid(e.getAttribute("from")), r.type = e.getAttribute("type"), r.states = [], c = e.childNodes, o = 0, i = c.length; o < i; o++) switch ((t = c[o]).nodeName) {
                        case"error":
                            r.errorcode = t.getAttribute("code"), r.error = null != (u = t.childNodes[0]) ? u.nodeName : void 0;
                            break;
                        case"status":
                            r.status = t.textContent || null;
                            break;
                        case"show":
                            r.show = t.textContent || null;
                            break;
                        case"x":
                            if (t.getAttribute("xmlns") === E.Strophe.NS.MUC_USER) for (l = t.childNodes, s = 0, a = l.length; s < a; s++) switch ((n = l[s]).nodeName) {
                                case"item":
                                    r.affiliation = n.getAttribute("affiliation"), r.role = n.getAttribute("role"), r.jid = n.getAttribute("jid"), r.newnick = n.getAttribute("nick");
                                    break;
                                case"status":
                                    n.getAttribute("code") && r.states.push(n.getAttribute("code"))
                            }
                    }
                    return r
                }, i
            }(), function () {
                function e(e) {
                    this.parse = o(this.parse, this), null != e && this.parse(e)
                }

                e.prototype.parse = function (e) {
                    var t, n, r, o, s, i, a, c, u, l, d, E, h;
                    for (E = e.getElementsByTagName("query")[0].childNodes, this.identities = [], this.features = [], this.x = [], s = 0, u = E.length; s < u; s++) switch (r = E[s], n = r.attributes, r.nodeName) {
                        case"identity":
                            for (i = {}, a = 0, l = n.length; a < l; a++) t = n[a], i[t.name] = t.textContent;
                            this.identities.push(i);
                            break;
                        case"feature":
                            this.features.push(r.getAttribute("var"));
                            break;
                        case"x":
                            if ("FORM_TYPE" === !r.childNodes[0].getAttribute("var") || "hidden" === !r.childNodes[0].getAttribute("type")) break;
                            for (h = r.childNodes, c = 0, d = h.length; c < d; c++) (o = h[c]).attributes.type || this.x.push({
                                var: o.getAttribute("var"),
                                label: o.getAttribute("label") || "",
                                value: o.firstChild.textContent || ""
                            })
                    }
                    return {identities: this.identities, features: this.features, x: this.x}
                }
            }(), n = function () {
                function e(e, t) {
                    this.room = t, this.update = o(this.update, this), this.admin = o(this.admin, this), this.owner = o(this.owner, this), this.revoke = o(this.revoke, this), this.member = o(this.member, this), this.ban = o(this.ban, this), this.modifyAffiliation = o(this.modifyAffiliation, this), this.deop = o(this.deop, this), this.op = o(this.op, this), this.mute = o(this.mute, this), this.voice = o(this.voice, this), this.kick = o(this.kick, this), this.modifyRole = o(this.modifyRole, this), this.update(e)
                }

                return e.prototype.modifyRole = function (e, t, n, r) {
                    return this.room.modifyRole(this.nick, e, t, n, r)
                }, e.prototype.kick = function (e, t, n) {
                    return this.room.kick(this.nick, e, t, n)
                }, e.prototype.voice = function (e, t, n) {
                    return this.room.voice(this.nick, e, t, n)
                }, e.prototype.mute = function (e, t, n) {
                    return this.room.mute(this.nick, e, t, n)
                }, e.prototype.op = function (e, t, n) {
                    return this.room.op(this.nick, e, t, n)
                }, e.prototype.deop = function (e, t, n) {
                    return this.room.deop(this.nick, e, t, n)
                }, e.prototype.modifyAffiliation = function (e, t, n, r) {
                    return this.room.modifyAffiliation(this.jid, e, t, n, r)
                }, e.prototype.ban = function (e, t, n) {
                    return this.room.ban(this.jid, e, t, n)
                }, e.prototype.member = function (e, t, n) {
                    return this.room.member(this.jid, e, t, n)
                }, e.prototype.revoke = function (e, t, n) {
                    return this.room.revoke(this.jid, e, t, n)
                }, e.prototype.owner = function (e, t, n) {
                    return this.room.owner(this.jid, e, t, n)
                }, e.prototype.admin = function (e, t, n) {
                    return this.room.admin(this.jid, e, t, n)
                }, e.prototype.update = function (e) {
                    return this.nick = e.nick || null, this.affiliation = e.affiliation || null, this.role = e.role || null, this.jid = e.jid || null, this.status = e.status || null, this.show = e.show || null, this
                }, e
            }()
        }(n(15))
    }, function (e, t, n) {
        var r, o;
        r = [n(15)], void 0 === (o = function (e) {
            var o, s, i;
            return o = e.Strophe, e.$build, s = e.$iq, e.$msg, e.$pres, i = function (e, t, n) {
                var r = s(t ? {type: e, to: t} : {type: e});
                return r.c("vCard", {xmlns: o.NS.VCARD}), n && r.cnode(n), r
            }, o.addConnectionPlugin("vcard", {
                _connection: null, init: function (e) {
                    return this._connection = e, o.addNamespace("VCARD", "vcard-temp")
                }, get: function (e, t, n) {
                    var r = i("get", t);
                    return this._connection.sendIQ(r, e, n)
                }, set: function (e, t, n, r) {
                    var o = i("set", n, t);
                    return this._connection.sendIQ(o, e, r)
                }
            }), e
        }.apply(t, r)) || (e.exports = o)
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(5), o = n(0), s = n(10), i = function () {
            function e() {
            }

            return e.transformVCard = function (e) {
                var t = {};
                return t[o.UserConstants.NAME] = unescape(s.parseHTML(e.getElementsByTagName(o.UserConstants.NAME)[0])), t[o.UserConstants.UID] = unescape(s.parseHTML(e.getElementsByTagName(o.UserConstants.UID)[0])), t[o.UserConstants.AVATAR] = unescape(s.parseHTML(e.getElementsByTagName(o.UserConstants.AVATAR)[0])), t[o.UserConstants.LINK] = unescape(s.parseHTML(e.getElementsByTagName(o.UserConstants.LINK)[0])), t[o.UserConstants.STATUS] = unescape(s.parseHTML(e.getElementsByTagName(o.UserConstants.STATUS)[0])), t[o.UserConstants.LAST_ACTIVE_AT] = unescape(s.parseHTML(e.getElementsByTagName(o.UserConstants.LAST_ACTIVE_AT)[0])), t[o.UserConstants.ROLE] = unescape(s.parseHTML(e.getElementsByTagName(o.UserConstants.ROLE)[0])), t[o.UserConstants.USER_NAME] = unescape(s.parseHTML(e.getElementsByTagName(o.UserConstants.USER_NAME)[0])), new r.User(t)
            }, e
        }();
        t.VCardController = i
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(3), o = n(1), s = n(0), i = n(11), a = n(2), c = function () {
            function e(e) {
                this.store = s.constants.DEFAULT_STORE, o.isFalsy(e) || (this.store = e), this.keyStore = i.createInstance({name: o.format(s.LOCAL_STORE.STORE_STRING, r.CometChat.getAppId(), s.LOCAL_STORE.KEYS_STORE)}), this.keyStore.setDriver([i.LOCALSTORAGE, i.INDEXEDDB, i.WEBSQL])
            }

            return e.getInstance = function () {
                return null == e.KeyStore && (e.KeyStore = new e), e.KeyStore
            }, e.prototype.set = function (e, t) {
                return this.keyStore.setItem(e, t)
            }, e.prototype.remove = function (e) {
                this.keyStore.removeItem(e)
            }, e.prototype.get = function (e) {
                var r = this;
                return new Promise(function (n, t) {
                    try {
                        r.keyStore.getItem(e).then(function (t) {
                            try {
                                n(JSON.parse(t))
                            } catch (e) {
                                n(t)
                            }
                        }, function (e) {
                            t(e)
                        })
                    } catch (e) {
                        t(new a.CometChatException(e))
                    }
                })
            }, e.prototype.clearStore = function () {
                return this.keyStore.clear()
            }, e
        }();
        t.KeyStore = c
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var o = n(4), r = n(1), s = n(2), i = n(16), a = n(0), c = function () {
            function e(e) {
                this.cursor = -1, this.total = -1, this.next_page = 1, this.last_page = -1, this.current_page = 1, this.total_pages = -1, this.hasJoined = 0, this.pagination = {
                    total: 0,
                    count: 0,
                    per_page: 0,
                    current_page: 0,
                    total_pages: 0,
                    links: []
                }, r.isFalsy(e) || (r.isFalsy(e.limit) || (this.limit = e.limit), r.isFalsy(e.searchKeyword) || (this.searchKeyword = e.searchKeyword), r.isFalsy(e.hasJoined) || (this.hasJoined = 1))
            }

            return e.prototype.validateGroupBuilder = function () {
                if (void 0 === this.limit) return new s.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.COMPULSORY), "SET_LIMIT", "SET_LIMIT", "setLimit() method")));
                if (isNaN(this.limit)) return new s.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.MUST_BE_A_NUMBER), "SET_LIMIT", "SET_LIMIT", "group limit")));
                if (this.limit > a.DEFAULT_VALUES.GROUPS_MAX_LIMIT) return new s.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.LIMIT_EXCEEDED), "SET_LIMIT", "SET_LIMIT", "group limit", a.DEFAULT_VALUES.GROUPS_MAX_LIMIT)));
                if (this.limit < a.DEFAULT_VALUES.ZERO) return new s.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.MUST_BE_A_POSITIVE_NUMBER), "SET_LIMIT", "SET_LIMIT", "group limit")));
                if (void 0 !== this.searchKeyword) {
                    if (typeof this.searchKeyword !== a.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new s.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.MUST_BE_A_STRING), "SET_SEARCH_KEYWORD", "SET_SEARCH_KEYWORD", "search keyword")));
                    if (r.isFalsy(this.searchKeyword.trim())) return new s.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.INVALID), "SET_SEARCH_KEYWORD", "SET_SEARCH_KEYWORD", "search keyword")));
                    this.searchKeyword = this.searchKeyword.trim()
                }
            }, e.prototype.fetchPrevious = function () {
                var r = this;
                return new Promise(function (t, n) {
                    try {
                        0 == r.next_page && t([]);
                        var e = r.validateGroupBuilder();
                        return e instanceof s.CometChatException ? void n(e) : o.makeApiCall("groups", {}, r.getPreData()).then(function (e) {
                            if (e.meta && (r.total_pages = e.meta.pagination.total_pages), 0 < e.data.length) {
                                r.pagination = e.meta.pagination;
                                var n = [];
                                e.data.map(function (e, t) {
                                    n.push(i.GroupsController.trasformJSONGroup(e))
                                }), t(n)
                            }
                            t([])
                        })
                    } catch (e) {
                        n(new s.CometChatException(e))
                    }
                })
            }, e.prototype.fetchNext = function () {
                var r = this;
                return new Promise(function (t, n) {
                    try {
                        var e = r.validateGroupBuilder();
                        if (e instanceof s.CometChatException) return void n(e);
                        o.makeApiCall("getGroups", {}, r.getNextData()).then(function (e) {
                            if (e.meta && (r.total_pages = e.meta.pagination.total_pages), 0 < e.data.length) {
                                r.pagination = e.meta.pagination;
                                var n = [];
                                e.data.map(function (e, t) {
                                    n.push(i.GroupsController.trasformJSONGroup(e))
                                }), t(n)
                            }
                            t([])
                        }, function (e) {
                            n(new s.CometChatException(e.error))
                        })
                    } catch (e) {
                        n(new s.CometChatException(e))
                    }
                })
            }, e.prototype.getNextData = function () {
                var e = {};
                if (e.per_page = this.limit, r.isFalsy(this.searchKeyword) || (e.searchKey = this.searchKeyword), r.isFalsy(this.hasJoined) || (e.hasJoined = 1), 1 == this.current_page) e.page = this.next_page, this.next_page++, this.current_page++; else {
                    if (this.next_page > this.total_pages) return e.page = this.next_page, e;
                    e.page = this.next_page++
                }
                return e
            }, e.prototype.getPreData = function () {
                var e = {};
                return e.per_page = this.limit, 0 <= this.next_page && 0 < this.next_page && (e.page = --this.next_page), e
            }, e.MAX_LIMIT = 100, e.DEFAULT_LIMIT = 30, e
        }();
        t.GroupsRequest = c;
        var u = function () {
            function e() {
            }

            return e.prototype.setLimit = function (e) {
                return this.limit = e, this
            }, e.prototype.setSearchKeyword = function (e) {
                return this.searchKeyword = e, this
            }, e.prototype.joinedOnly = function (e) {
                return this.hasJoined = e, this
            }, e.prototype.build = function () {
                return new c(this)
            }, e
        }();
        t.GroupsRequestBuilder = u
    }, function (e, t, n) {
        "use strict";
        var r, o = this && this.__extends || (r = function (e, t) {
            return (r = Object.setPrototypeOf || {__proto__: []} instanceof Array && function (e, t) {
                e.__proto__ = t
            } || function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n])
            })(e, t)
        }, function (e, t) {
            function n() {
                this.constructor = e
            }

            r(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n)
        });
        t.__esModule = !0;
        var s = n(4), i = n(1), a = n(9), c = n(2), u = n(51), l = n(0), d = function () {
            function e(e) {
                this.cursor = -1, this.total = -1, this.next_page = 1, this.last_page = -1, this.current_page = 1, this.total_pages = -1, this.isOutCastReq = !1, this.pagination = {
                    total: 0,
                    count: 0,
                    per_page: 0,
                    current_page: 0,
                    total_pages: 0,
                    links: []
                }, this.store = a.LocalStorage.getInstance(), i.isFalsy(e) || (this.limit = e.limit, this.guid = e.guid, i.isFalsy(e.searchKeyword) || (this.searchKeyword = e.searchKeyword), e instanceof h && (this.isOutCastReq = e.isOutCastReq))
            }

            return e.prototype.validateGroupMembersBuilder = function () {
                if (void 0 === this.limit) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(l.GENERAL_ERROR.COMPULSORY), "SET_LIMIT", "SET_LIMIT", "setLimit() method")));
                if (isNaN(this.limit)) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(l.GENERAL_ERROR.MUST_BE_A_NUMBER), "SET_LIMIT", "SET_LIMIT", "group member limit")));
                if (this.limit > l.DEFAULT_VALUES.USERS_MAX_LIMIT) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(l.GENERAL_ERROR.LIMIT_EXCEEDED), "SET_LIMIT", "SET_LIMIT", "group member limit", l.DEFAULT_VALUES.USERS_MAX_LIMIT)));
                if (this.limit < l.DEFAULT_VALUES.ZERO) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(l.GENERAL_ERROR.MUST_BE_A_POSITIVE_NUMBER), "SET_LIMIT", "SET_LIMIT", "group member limit")));
                if (void 0 !== this.searchKeyword) {
                    if (typeof this.searchKeyword !== l.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(l.GENERAL_ERROR.MUST_BE_A_STRING), "SET_SEARCH_KEYWORD", "SET_SEARCH_KEYWORD", "search keyword")));
                    if (i.isFalsy(this.searchKeyword.trim())) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(l.GENERAL_ERROR.INVALID), "SET_SEARCH_KEYWORD", "SET_SEARCH_KEYWORD", "search keyword")));
                    this.searchKeyword = this.searchKeyword.trim()
                }
                if (void 0 !== this.guid) {
                    if (typeof this.guid !== l.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(l.GENERAL_ERROR.MUST_BE_A_STRING), "GUID", "GUID", "guid")));
                    if (i.isFalsy(this.guid)) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(l.GENERAL_ERROR.INVALID), "GUID", "GUID", "guid")))
                }
            }, e.prototype.fetchPrevious = function () {
                var r = this;
                return new Promise(function (n, t) {
                    try {
                        0 == r.next_page && n([]);
                        var e = r.validateGroupMembersBuilder();
                        return e instanceof c.CometChatException ? void t(e) : s.makeApiCall(r.isOutCastReq ? "getBannedGroupMembers" : "getGroupMembers", {guid: r.guid}, r.getPreData()).then(function (e) {
                            if (e.meta && (r.total_pages = e.meta.pagination.total_pages), 0 < e.data.length) {
                                r.pagination = e.meta.pagination;
                                var t = [];
                                e.data.map(function (e) {
                                    e.guid = r.guid, t.push(u.GroupMembersController.trasformJSONGroupMember(e))
                                }), n(t)
                            }
                            n([])
                        }, function (e) {
                            t(new c.CometChatException(e.error))
                        })
                    } catch (e) {
                        t(new c.CometChatException(e))
                    }
                })
            }, e.prototype.fetchNext = function () {
                var r = this;
                return new Promise(function (n, t) {
                    try {
                        var e = r.validateGroupMembersBuilder();
                        if (e instanceof c.CometChatException) return void t(e);
                        s.makeApiCall(r.isOutCastReq ? "getBannedGroupMembers" : "getGroupMembers", {guid: r.guid}, r.getNextData()).then(function (e) {
                            if (e.meta && (r.total_pages = e.meta.pagination.total_pages), 0 < e.data.length) {
                                r.pagination = e.meta.pagination;
                                var t = [];
                                e.data.map(function (e) {
                                    e.guid = r.guid, t.push(u.GroupMembersController.trasformJSONGroupMember(e))
                                }), n(t)
                            } else n([])
                        }, function (e) {
                            t(new c.CometChatException(e.error))
                        })
                    } catch (e) {
                        t(new c.CometChatException(e))
                    }
                })
            }, e.prototype.getNextData = function () {
                var e = {};
                if (e.per_page = this.limit, i.isFalsy(this.searchKeyword) || (e.searchKey = this.searchKeyword), 1 == this.current_page) e.page = this.next_page, this.next_page++, this.current_page++; else {
                    if (this.next_page > this.total_pages) return e.page = this.next_page, e;
                    e.page = ++this.next_page
                }
                return e
            }, e.prototype.getPreData = function () {
                var e = {};
                return e.per_page = this.limit, 0 <= this.next_page && 0 < this.next_page && (e.page = --this.next_page), e
            }, e.MAX_LIMIT = 2, e.DEFAULT_LIMIT = 1, e
        }();
        t.GroupMembersRequest = d;
        var E = function () {
            function e(e) {
                this.guid = e
            }

            return e.prototype.setLimit = function (e) {
                return this.limit = e, this
            }, e.prototype.setSearchKeyword = function (e) {
                return this.searchKeyword = e, this
            }, e.prototype.build = function () {
                return new d(this)
            }, e
        }(), h = function (n) {
            function e(e) {
                var t = n.call(this, e) || this;
                return t.isOutCastReq = !0, t
            }

            return o(e, n), e.prototype.build = function () {
                return new d(this)
            }, e
        }(t.GroupMembersRequestBuilder = E);
        t.GroupOutCastMembersRequestBuilder = h
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = n(35), o = n(0), s = n(1), i = function () {
            function e() {
            }

            return e.trasformJSONGroupMember = function (t) {
                var e;
                try {
                    return e = new r.GroupMember(t[o.GroupMemersConstans.KEYS.UID]), Object.assign(e, t), e
                } catch (e) {
                    return s.Logger.error("GroupMembersController:trasformJSONGroupMember", {e: e, groupMember: t}), t
                }
            }, e
        }();
        t.GroupMembersController = i
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var s = n(4), i = n(1), a = n(8), c = n(2), r = n(34), u = n(0), l = n(3), o = function () {
            function o(e) {
                this.next_page = 1, this.current_page = 1, this.total_pages = -1, this.hideBlockedUsers = !1, this.friendsOnly = !1, this.fetchingInProgress = !1, this.pagination = {
                    total: 0,
                    count: 0,
                    per_page: 0,
                    current_page: 0,
                    total_pages: 0,
                    links: []
                }, o.userStore = r.UserStore.getInstance(), i.isFalsy(e) || (this.limit = e.limit, i.isFalsy(e.searchKeyword) || (this.searchKeyword = e.searchKeyword), i.isFalsy(e.status) || (e.status == o.USER_STATUS.ONLINE ? this.status = u.PresenceConstatnts.STATUS.AVAILABLE : this.status = e.status), i.isFalsy(e.shouldHideBlockedUsers) || (this.hideBlockedUsers = e.shouldHideBlockedUsers), i.isFalsy(e.showFriendsOnly) || (this.friendsOnly = e.showFriendsOnly), i.isFalsy(e.role) || (this.role = e.role))
            }

            return o.prototype.validateUserBuilder = function () {
                if (void 0 === this.limit) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(u.GENERAL_ERROR.COMPULSORY), "SET_LIMIT", "SET_LIMIT", "setLimit() method")));
                if (isNaN(this.limit)) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(u.GENERAL_ERROR.MUST_BE_A_NUMBER), "SET_LIMIT", "SET_LIMIT", "user limit")));
                if (this.limit > u.DEFAULT_VALUES.USERS_MAX_LIMIT) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(u.GENERAL_ERROR.LIMIT_EXCEEDED), "SET_LIMIT", "SET_LIMIT", "user limit", u.DEFAULT_VALUES.USERS_MAX_LIMIT)));
                if (this.limit < u.DEFAULT_VALUES.ZERO) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(u.GENERAL_ERROR.MUST_BE_A_POSITIVE_NUMBER), "SET_LIMIT", "SET_LIMIT", "user limit")));
                if (void 0 !== this.searchKeyword) {
                    if (typeof this.searchKeyword !== u.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(u.GENERAL_ERROR.MUST_BE_A_STRING), "SET_SEARCH_KEYWORD", "SET_SEARCH_KEYWORD", "search keyword")));
                    if (i.isFalsy(this.searchKeyword.trim())) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(u.GENERAL_ERROR.INVALID), "SET_SEARCH_KEYWORD", "SET_SEARCH_KEYWORD", "search keyword")));
                    this.searchKeyword = this.searchKeyword.trim()
                }
                if (this.status) {
                    if (typeof this.status !== u.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(u.GENERAL_ERROR.MUST_BE_A_STRING), "SET_STATUS", "SET_STATUS", "status")));
                    if ("available" != this.status.toLowerCase() && "offline" != this.status.toLowerCase()) return new c.CometChatException(u.UserErrors.INVALID_STATUS)
                }
                if (void 0 !== this.hideBlockedUsers) {
                    if (typeof this.hideBlockedUsers !== u.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.BOOLEAN) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(u.GENERAL_ERROR.MUST_BE_A_BOOLEAN), "HIDE_BLOCKED_USERS", "HIDE_BLOCKED_USERS", "hideBlockedUsers")));
                    1 == this.hideBlockedUsers ? this.hideBlockedUsers = !0 : this.hideBlockedUsers = !1
                }
                if (void 0 !== this.friendsOnly) {
                    if (typeof this.friendsOnly !== u.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.BOOLEAN) return new c.CometChatException(JSON.parse(i.format(JSON.stringify(u.GENERAL_ERROR.MUST_BE_A_BOOLEAN), "FRIENDS_ONLY", "FRIENDS_ONLY", "friendsOnly")));
                    1 == this.friendsOnly ? this.friendsOnly = !0 : this.friendsOnly = !1
                }
            }, o.prototype.fetchPrevious = function () {
                var r = this;
                return this.fetchingInProgress = !0, new Promise(function (t, n) {
                    try {
                        0 == r.next_page && (t([]), r.fetchingInProgress = !1);
                        var e = r.validateUserBuilder();
                        if (e instanceof c.CometChatException) return void n(e);
                        if (!r.fetchingInProgress) return s.makeApiCall("users", {}, r.getPreData()).then(function (e) {
                            if (e.meta && (r.total_pages = e.meta.pagination.total_pages), 0 < e.data.length) {
                                r.pagination = e.meta.pagination;
                                var n = [];
                                e.data.map(function (e, t) {
                                    n.push(a.UsersController.trasformJSONUser(e))
                                }), o.userStore.storeUsers(n), t(n), r.fetchingInProgress = !1
                            }
                            t([]), r.fetchingInProgress = !1
                        }, function (e) {
                            n(new c.CometChatException(e.error)), r.fetchingInProgress = !1
                        });
                        t([])
                    } catch (e) {
                        r.fetchingInProgress = !1, n(new c.CometChatException(e))
                    }
                })
            }, o.prototype.fetchNext = function () {
                var o = this;
                return new Promise(function (r, t) {
                    try {
                        if (o.fetchingInProgress) o.fetchingInProgress = !1, r([]); else {
                            o.fetchingInProgress = !0;
                            var e = o.validateUserBuilder();
                            if (e instanceof c.CometChatException) return void t(e);
                            s.makeApiCall("users", {}, o.getNextData()).then(function (e) {
                                if (e.meta && (o.total_pages = e.meta.pagination.total_pages), 0 < e.data.length) {
                                    o.pagination = e.meta.pagination;
                                    var t = [], n = [];
                                    e.data.map(function (e) {
                                        t.push(a.UsersController.trasformJSONUser(e)), n.push(i.format(u.XMPP.username_string, l.CometChat.getAppId(), e[u.UserConstants.UID]))
                                    }), r(t)
                                } else r([]);
                                o.fetchingInProgress = !1
                            }, function (e) {
                                o.fetchingInProgress = !1, t(new c.CometChatException(e.error))
                            })
                        }
                    } catch (e) {
                        o.fetchingInProgress = !1, t(new c.CometChatException(e))
                    }
                })
            }, o.prototype.getNextData = function () {
                var e = {};
                if (e.per_page = this.limit, i.isFalsy(this.searchKeyword) || (e.searchKey = this.searchKeyword), i.isFalsy(this.status) || (e.status = this.status), i.isFalsy(this.hideBlockedUsers) || (e.hideBlockedUsers = 1), i.isFalsy(this.role) || (e.role = this.role), i.isFalsy(this.friendsOnly) || (e.friendsOnly = 1), 1 == this.current_page) e.page = this.next_page, this.next_page++, this.current_page++; else {
                    if (this.next_page > this.total_pages) return e.page = this.next_page, e;
                    e.page = this.next_page++
                }
                return e
            }, o.prototype.getPreData = function () {
                var e = {};
                return e.per_page = this.limit, 0 <= this.next_page && 0 < this.next_page && (e.page = --this.next_page), e
            }, o.USER_STATUS = {
                ONLINE: u.PresenceConstatnts.STATUS.ONLINE,
                OFFLINE: u.PresenceConstatnts.STATUS.OFFLINE
            }, o
        }();
        t.UsersRequest = o;
        var d = function () {
            function e() {
                this.shouldHideBlockedUsers = !1
            }

            return e.prototype.setLimit = function (e) {
                return this.limit = e, this
            }, e.prototype.setStatus = function (e) {
                return this.status = e, this
            }, e.prototype.setSearchKeyword = function (e) {
                return this.searchKeyword = e, this
            }, e.prototype.hideBlockedUsers = function (e) {
                return this.shouldHideBlockedUsers = e, this
            }, e.prototype.setRole = function (e) {
                return this.role = e, this
            }, e.prototype.friendsOnly = function (e) {
                return this.showFriendsOnly = e, this
            }, e.prototype.build = function () {
                return new o(this)
            }, e
        }();
        t.UsersRequestBuilder = d
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var o = n(4), r = n(1), s = n(2), i = n(36), a = n(0), c = function () {
            function e(e) {
                this.limit = 100, this.next_page = 1, this.current_page = 1, this.total_pages = -1, this.fetchingInProgress = !1, this.pagination = {
                    total: 0,
                    count: 0,
                    per_page: 0,
                    current_page: 0,
                    total_pages: 0,
                    links: []
                }, r.isFalsy(e) || (this.limit = e.limit, r.isFalsy(e.conversationType) || (this.conversationType = e.conversationType))
            }

            return e.prototype.validateConversationBuilder = function () {
                return void 0 === this.limit ? new s.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.COMPULSORY), "SET_LIMIT", "SET_LIMIT", "setLimit() method"))) : isNaN(this.limit) ? new s.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.MUST_BE_A_NUMBER), "SET_LIMIT", "SET_LIMIT", "conversation limit"))) : this.limit > a.DEFAULT_VALUES.CONVERSATION_MAX_LIMIT ? new s.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.LIMIT_EXCEEDED), "SET_LIMIT", "SET_LIMIT", "conversation limit", a.DEFAULT_VALUES.CONVERSATION_MAX_LIMIT))) : this.limit < a.DEFAULT_VALUES.ZERO ? new s.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.MUST_BE_A_POSITIVE_NUMBER), "SET_LIMIT", "SET_LIMIT", "conversation limit"))) : void 0
            }, e.prototype.fetchNext = function () {
                var r = this;
                return new Promise(function (n, t) {
                    try {
                        if (r.fetchingInProgress) r.fetchingInProgress = !1, n([]); else {
                            r.fetchingInProgress = !0;
                            var e = r.validateConversationBuilder();
                            if (e instanceof s.CometChatException) return void t(e);
                            o.makeApiCall("getConversations", {}, r.getNextData()).then(function (e) {
                                if (e.meta && (r.total_pages = e.meta.pagination.total_pages), 0 < e.data.length) {
                                    r.pagination = e.meta.pagination;
                                    var t = [];
                                    e.data.map(function (e) {
                                        t.push(i.ConversationController.trasformJSONConversation(e.conversationId, e.conversationType, e.lastMessage, e.conversationWith, e.unreadMessageCount))
                                    }), n(t)
                                } else n([]);
                                r.fetchingInProgress = !1
                            }, function (e) {
                                r.fetchingInProgress = !1, t(new s.CometChatException(e.error))
                            })
                        }
                    } catch (e) {
                        r.fetchingInProgress = !1, t(new s.CometChatException(e))
                    }
                })
            }, e.prototype.getNextData = function () {
                var e = {};
                if (e.per_page = this.limit, r.isFalsy(this.conversationType) || (e.conversationType = this.conversationType), 1 == this.current_page) e.page = this.next_page, this.next_page++, this.current_page++; else {
                    if (this.next_page > this.total_pages) return e.page = this.next_page, e;
                    e.page = this.next_page++
                }
                return e
            }, e
        }();
        t.ConversationsRequest = c;
        var u = function () {
            function e() {
            }

            return e.prototype.setLimit = function (e) {
                return this.limit = e, this
            }, e.prototype.setConversationType = function (e) {
                return this.conversationType = e, this
            }, e.prototype.build = function () {
                return new c(this)
            }, e
        }();
        t.ConversationsRequestBuilder = u
    }, function (e, t, n) {
        "use strict";
        var r = this && this.__awaiter || function (s, i, a, c) {
            return new (a || (a = Promise))(function (e, t) {
                function n(e) {
                    try {
                        o(c.next(e))
                    } catch (e) {
                        t(e)
                    }
                }

                function r(e) {
                    try {
                        o(c.throw(e))
                    } catch (e) {
                        t(e)
                    }
                }

                function o(t) {
                    t.done ? e(t.value) : new a(function (e) {
                        e(t.value)
                    }).then(n, r)
                }

                o((c = c.apply(s, i || [])).next())
            })
        }, a = this && this.__generator || function (n, r) {
            var o, s, i, e, a = {
                label: 0, sent: function () {
                    if (1 & i[0]) throw i[1];
                    return i[1]
                }, trys: [], ops: []
            };
            return e = {
                next: t(0),
                throw: t(1),
                return: t(2)
            }, "function" == typeof Symbol && (e[Symbol.iterator] = function () {
                return this
            }), e;

            function t(t) {
                return function (e) {
                    return function (t) {
                        if (o) throw new TypeError("Generator is already executing.");
                        for (; a;) try {
                            if (o = 1, s && (i = 2 & t[0] ? s.return : t[0] ? s.throw || ((i = s.return) && i.call(s), 0) : s.next) && !(i = i.call(s, t[1])).done) return i;
                            switch (s = 0, i && (t = [2 & t[0], i.value]), t[0]) {
                                case 0:
                                case 1:
                                    i = t;
                                    break;
                                case 4:
                                    return a.label++, {value: t[1], done: !1};
                                case 5:
                                    a.label++, s = t[1], t = [0];
                                    continue;
                                case 7:
                                    t = a.ops.pop(), a.trys.pop();
                                    continue;
                                default:
                                    if (!(i = 0 < (i = a.trys).length && i[i.length - 1]) && (6 === t[0] || 2 === t[0])) {
                                        a = 0;
                                        continue
                                    }
                                    if (3 === t[0] && (!i || t[1] > i[0] && t[1] < i[3])) {
                                        a.label = t[1];
                                        break
                                    }
                                    if (6 === t[0] && a.label < i[1]) {
                                        a.label = i[1], i = t;
                                        break
                                    }
                                    if (i && a.label < i[2]) {
                                        a.label = i[2], a.ops.push(t);
                                        break
                                    }
                                    i[2] && a.ops.pop(), a.trys.pop();
                                    continue
                            }
                            t = r.call(n, a)
                        } catch (e) {
                            t = [6, e], s = 0
                        } finally {
                            o = i = 0
                        }
                        if (5 & t[0]) throw t[1];
                        return {value: t[0] ? t[1] : void 0, done: !0}
                    }([t, e])
                }
            }
        };
        t.__esModule = !0;
        var p = n(2), f = n(4), g = n(7), _ = n(1), o = n(21), C = n(0), c = n(14), S = n(3), T = n(13), m = n(10),
            A = n(24), u = n(25), s = function () {
                function e(e) {
                    this.limit = C.DEFAULT_VALUES.MSGS_LIMIT, this.timestamp = 0, this.id = C.DEFAULT_VALUES.DEFAULT_MSG_ID, this.messageStore = o.MessagesStore.getInstance(), this.endpointName = "getUserMessages", this.listId = "", this.totalPages = 0, this.unread = !1, this.undelivered = !1, this.inProgress = !1, this.hideMessagesFromBlockedUsers = !1, this.updatedAt = 0, this.onlyUpdates = 0, this.paginationMeta = {}, this.limit = e.limit, this.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.PER_PAGE] = this.limit, this.uid = e.uid, this.uid && (this.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.UID] = this.uid), this.guid = e.guid, this.timestamp = e.timestamp, this.timestamp && (this.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.SENT_AT] = this.timestamp), this.id = e.id, this.id != C.DEFAULT_VALUES.DEFAULT_MSG_ID && (this.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.ID] = this.id), this.hideMessagesFromBlockedUsers = e.HideMessagesFromBlockedUsers, this.hideMessagesFromBlockedUsers && (this.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.HIDE_MESSAGES_FROM_BLOCKED_USER] = this.hideMessagesFromBlockedUsers), this.unread = e.unread, this.unread && (this.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.UNREAD] = this.unread), this.undelivered = e.undelivered, this.undelivered && (this.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.UNDELIVERED] = this.undelivered), e.searchKey && (this.searchKey = e.searchKey, this.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.SEARCH_KEY] = this.searchKey), e.onlyUpdate && (this.onlyUpdates = e.onlyUpdate, this.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.ONLY_UPDATES] = this.onlyUpdates), e.updatedAt && (this.updatedAt = e.updatedAt, this.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.UPDATED_AT] = this.updatedAt), e.category && (this.category = e.category, this.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.CATEGORY] = this.category), e.type && (this.type = e.type, this.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.TYPE] = this.type)
                }

                return e.prototype.fetchNext = function () {
                    var e = this;
                    return new Promise(function (s, i) {
                        return r(e, void 0, void 0, function () {
                            var t, n, r, o;
                            return a(this, function (e) {
                                switch (e.label) {
                                    case 0:
                                        if (e.trys.push([0, 6, , 7]), this.inProgress) return this.inProgress = !1, i(new p.CometChatException(c.MESSAGES_REQUEST_ERRORS.REQUEST_IN_PROGRESS_ERROR)), [2];
                                        if (this.inProgress = !0, this.onlyUpdates) {
                                            if (0 == this.updatedAt) return this.inProgress = !1, i(new p.CometChatException(c.MESSAGES_REQUEST_ERRORS.NOT_ENOUGH_PARAMS)), [2]
                                        } else if (0 == this.timestamp && 0 == this.id && 0 == this.updatedAt) return this.inProgress = !1, i(new p.CometChatException(c.MESSAGES_REQUEST_ERRORS.NOT_ENOUGH_PARAMS)), [2];
                                        this.affix = C.MessageConstatnts.PAGINATION.AFFIX.APPEND, this.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.AFFIX] = this.affix, this.currentMethod = C.MessageConstatnts.PAGINATION.AFFIX.APPEND, e.label = 1;
                                    case 1:
                                        return e.trys.push([1, 4, , 5]), [4, this.makeAPICall()];
                                    case 2:
                                        return t = e.sent(), [4, u.ExtensionController.hookOnMessageListIsFetched(t)];
                                    case 3:
                                        return n = e.sent(), s(n), this.inProgress = !1, [3, 5];
                                    case 4:
                                        return r = e.sent(), this.inProgress = !1, i(new p.CometChatException(r)), [3, 5];
                                    case 5:
                                        return [3, 7];
                                    case 6:
                                        return o = e.sent(), this.inProgress = !1, i(new p.CometChatException(o)), [3, 7];
                                    case 7:
                                        return [2]
                                }
                            })
                        })
                    })
                }, e.prototype.fetchPrevious = function () {
                    var e = this;
                    return new Promise(function (s, i) {
                        return r(e, void 0, void 0, function () {
                            var t, n, r, o;
                            return a(this, function (e) {
                                switch (e.label) {
                                    case 0:
                                        if (e.trys.push([0, 6, , 7]), this.inProgress) return i(new p.CometChatException(c.MESSAGES_REQUEST_ERRORS.REQUEST_IN_PROGRESS_ERROR)), this.inProgress = !1, [2];
                                        if (this.inProgress = !0, this.onlyUpdates && 0 == this.updatedAt) return this.inProgress = !1, i(new p.CometChatException(c.MESSAGES_REQUEST_ERRORS.NOT_ENOUGH_PARAMS)), [2];
                                        this.affix = C.MessageConstatnts.PAGINATION.AFFIX.PREPEND, this.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.AFFIX] = this.affix, this.currentMethod = C.MessageConstatnts.PAGINATION.AFFIX.PREPEND, e.label = 1;
                                    case 1:
                                        return e.trys.push([1, 4, , 5]), [4, this.makeAPICall()];
                                    case 2:
                                        return t = e.sent(), [4, u.ExtensionController.hookOnMessageListIsFetched(t)];
                                    case 3:
                                        return n = e.sent(), s(n), this.inProgress = !1, [3, 5];
                                    case 4:
                                        return r = e.sent(), this.inProgress = !1, i(new p.CometChatException(r)), [3, 5];
                                    case 5:
                                        return [3, 7];
                                    case 6:
                                        return o = e.sent(), this.inProgress = !1, i(new p.CometChatException(o)), [3, 7];
                                    case 7:
                                        return [2]
                                }
                            })
                        })
                    })
                }, e.prototype.makeAPICall = function () {
                    var h = this;
                    return new Promise(function (a, t) {
                        try {
                            var e = h.uid;
                            if (void 0 !== e) {
                                if (typeof e !== C.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.MUST_BE_A_STRING), "UID", "UID", "uid"))));
                                if (_.isFalsy(e.trim())) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.INVALID), "UID", "UID", "uid"))));
                                h.uid = e.trim()
                            }
                            var n = h.guid;
                            if (void 0 !== n) {
                                if (typeof n !== C.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.MUST_BE_A_STRING), "GUID", "GUID", "guid"))));
                                if (_.isFalsy(n.trim())) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.INVALID), "GUID", "GUID", "guid"))));
                                h.guid = n.trim()
                            }
                            var r = h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.PER_PAGE];
                            if (void 0 === r) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.COMPULSORY), "SET_LIMIT", "SET_LIMIT", "setLimit() method"))));
                            if (isNaN(r)) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.MUST_BE_A_NUMBER), "SET_LIMIT", "SET_LIMIT", "message limit"))));
                            if (r > C.DEFAULT_VALUES.MSGS_MAX_LIMIT) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.LIMIT_EXCEEDED), "SET_LIMIT", "SET_LIMIT", "message limit", C.DEFAULT_VALUES.MSGS_MAX_LIMIT))));
                            if (r < C.DEFAULT_VALUES.ZERO) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.MUST_BE_A_POSITIVE_NUMBER), "SET_LIMIT", "SET_LIMIT", "message limit"))));
                            var o = h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.SEARCH_KEY];
                            if (void 0 !== o) {
                                if (typeof o !== C.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.MUST_BE_A_STRING), "SET_SEARCH_KEYWORD", "SET_SEARCH_KEYWORD", "search keyword"))));
                                if (_.isFalsy(o.trim())) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.INVALID), "SET_SEARCH_KEYWORD", "SET_SEARCH_KEYWORD", "search keyword"))));
                                h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.SEARCH_KEY] = o.trim()
                            }
                            var c = h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.ID];
                            if (void 0 !== c) {
                                if (isNaN(c)) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.MUST_BE_A_NUMBER), "MESSAGE_ID", "MESSAGE_ID", "messsage id"))));
                                if (c < C.DEFAULT_VALUES.ZERO) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.INVALID), "MESSAGE_ID", "MESSAGE_ID", "messsage id"))))
                            }
                            var s = h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.SENT_AT];
                            if (void 0 !== s) {
                                if (isNaN(s)) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.MUST_BE_A_NUMBER), "TIMESTAMP", "TIMESTAMP", "timestamp"))));
                                if (s < C.DEFAULT_VALUES.ZERO) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.INVALID), "TIMESTAMP", "TIMESTAMP", "timestamp"))))
                            }
                            var i = h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.HIDE_MESSAGES_FROM_BLOCKED_USER];
                            if (void 0 !== i) {
                                if (typeof i !== C.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.BOOLEAN) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.MUST_BE_A_BOOLEAN), "HIDE_MESSAGES_FROM_BLOCKED_USERS", "HIDE_MESSAGES_FROM_BLOCKED_USERS", "Hide Messages From Blocked Users"))));
                                h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.HIDE_MESSAGES_FROM_BLOCKED_USER] = 1 == i ? 1 : 0
                            }
                            var u = h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.UNREAD];
                            if (void 0 !== u) {
                                if (typeof u !== C.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.BOOLEAN) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.MUST_BE_A_BOOLEAN), "UNREAD", "UNREAD", "unread"))));
                                h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.UNREAD] = 1 == u ? 1 : 0
                            }
                            var l = h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.UNDELIVERED];
                            if (void 0 !== l) {
                                if (typeof l !== C.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.BOOLEAN) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.MUST_BE_A_BOOLEAN), "UNDELIVERED", "UNDELIVERED", "undelivered"))));
                                h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.UNDELIVERED] = 1 == l ? 1 : 0
                            }
                            var d = h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.CATEGORY];
                            if (void 0 !== d) {
                                if (typeof d !== C.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.MUST_BE_A_STRING), "SET_CATEGORY", "SET_CATEGORY", "category"))));
                                if (_.isFalsy(d.trim())) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.INVALID), "SET_CATEGORY", "SET_CATEGORY", "category"))));
                                h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.CATEGORY] = d.trim()
                            }
                            var E = h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.TYPE];
                            if (void 0 !== E) {
                                if (typeof E !== C.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.MUST_BE_A_STRING), "SET_TYPE", "SET_TYPE", "type"))));
                                if (_.isFalsy(E.trim())) return void t(new p.CometChatException(JSON.parse(_.format(JSON.stringify(C.GENERAL_ERROR.INVALID), "SET_TYPE", "SET_TYPE", "type"))));
                                h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.TYPE] = E.trim()
                            }
                            if (h.createEndpoint(), h.totalPages) if (1 != h.totalPages) ; else if (h.lastAffix == h.affix) return void a([]);
                            f.makeApiCall(h.endpointName, {listId: h.listId}, h.paginationMeta).then(function (e) {
                                var n = [];
                                if (e[C.ResponseConstants.RESPONSE_KEYS.KEY_META][C.ResponseConstants.RESPONSE_KEYS.KEY_CURSOR].hasOwnProperty(C.MessageConstatnts.PAGINATION.KEYS.ID) && 0 == h.id && (h.id = e.meta.cursor[C.MessageConstatnts.PAGINATION.KEYS.ID]), e[C.ResponseConstants.RESPONSE_KEYS.KEY_META][C.ResponseConstants.RESPONSE_KEYS.KEY_CURSOR].hasOwnProperty(C.MessageConstatnts.PAGINATION.KEYS.SENT_AT) && 0 == h.timestamp && (h.timestamp = e.meta.cursor[C.MessageConstatnts.PAGINATION.KEYS.SENT_AT]), e.meta.pagination.hasOwnProperty("total_pages") && (h.totalPages = e.meta.pagination.total_pages), e.meta.cursor.hasOwnProperty("affix") && (h.lastAffix = e.meta.cursor.affix), e.data[0]) {
                                    0 < h.id && (h.id = e.data[0].id), 0 < h.timestamp && (h.timestamp = e.data[0].sentAt);
                                    var u = e.data[e.data.length - 1];
                                    if (u.sender.toLowerCase() != m.getUidFromJid(T.XMPPConnectionHelper.getInstance().connection.jid).toLowerCase() && (void 0 !== h.guid || void 0 !== h.uid) && void 0 !== u) {
                                        var r = u.receiverType;
                                        if (r == C.MessageConstatnts.RECEIVER_TYPE.USER) {
                                            var o = u.receiver, s = u.id, t = u.sender;
                                            m.getJidFromUid(t).then(function (e) {
                                                var t = $msg({
                                                    to: e,
                                                    from: T.XMPPConnectionHelper.getInstance().connection.jid,
                                                    id: T.XMPPConnectionHelper.getInstance().connection.getUniqueId(),
                                                    type: C.MessageConstatnts.XMPP_KEYS.TYPE_USER
                                                }), n = Strophe.xmlElement("delivered", {
                                                    type: r,
                                                    receiverId: o,
                                                    xmlns: "urn:xmpp:receipts",
                                                    id: "[" + S.CometChat.getAppId() + "]" + s
                                                });
                                                t.tree().appendChild(n), T.XMPPConnectionHelper.getInstance().connection.send(t)
                                            })
                                        } else {
                                            var i = u.receiver;
                                            c = u.id, m.getGroupJidFromGUID(i).then(function (e) {
                                                var t = $msg({
                                                    to: e,
                                                    from: T.XMPPConnectionHelper.getInstance().connection.jid,
                                                    id: T.XMPPConnectionHelper.getInstance().connection.getUniqueId(),
                                                    type: C.MessageConstatnts.XMPP_KEYS.TYPE_GROUP
                                                }), n = Strophe.xmlElement("delivered", {
                                                    type: r,
                                                    receiverId: i,
                                                    xmlns: "urn:xmpp:receipts",
                                                    id: "[" + S.CometChat.getAppId() + "]" + c
                                                });
                                                t.tree().appendChild(n), T.XMPPConnectionHelper.getInstance().connection.send(t)
                                            })
                                        }
                                    }
                                    e.data.map(function (t) {
                                        if (t.sender.toLowerCase() != m.getUidFromJid(T.XMPPConnectionHelper.getInstance().connection.jid).toLowerCase() && (void 0 === h.guid && void 0 === h.uid)) if (t.receiverType == C.MessageConstatnts.RECEIVER_TYPE.USER) {
                                            if (_.isFalsy(t.deliveredAt)) {
                                                var r = u.receiver, o = u.id, e = u.sender,
                                                    s = C.MessageConstatnts.XMPP_KEYS.TYPE_USER;
                                                m.getJidFromUid(e).then(function (e) {
                                                    var t = $msg({
                                                        to: e,
                                                        from: T.XMPPConnectionHelper.getInstance().connection.jid,
                                                        id: T.XMPPConnectionHelper.getInstance().connection.getUniqueId(),
                                                        type: s
                                                    }), n = Strophe.xmlElement("delivered", {
                                                        type: s,
                                                        receiverId: r,
                                                        xmlns: "urn:xmpp:receipts",
                                                        id: "[" + S.CometChat.getAppId() + "]" + o
                                                    });
                                                    t.tree().appendChild(n), T.XMPPConnectionHelper.getInstance().connection.send(t)
                                                })
                                            }
                                        } else if (_.isFalsy(t.myReceipt)) {
                                            var i = t.receiver, a = u.id, c = C.MessageConstatnts.XMPP_KEYS.TYPE_GROUP;
                                            m.getGroupJidFromGUID(i).then(function (e) {
                                                var t = $msg({
                                                    to: e,
                                                    from: T.XMPPConnectionHelper.getInstance().connection.jid,
                                                    id: T.XMPPConnectionHelper.getInstance().connection.getUniqueId(),
                                                    type: c
                                                }), n = Strophe.xmlElement("delivered", {
                                                    type: c,
                                                    receiverId: i,
                                                    xmlns: "urn:xmpp:receipts",
                                                    id: "[" + S.CometChat.getAppId() + "]" + a
                                                });
                                                t.tree().appendChild(n), T.XMPPConnectionHelper.getInstance().connection.send(t)
                                            })
                                        }
                                        A.MessageListnerMaping.getInstance().get("all").then(function (e) {
                                            t.id > e && A.MessageListnerMaping.getInstance().set("all", t.id)
                                        }, function (e) {
                                            A.MessageListnerMaping.getInstance().set("all", t.id)
                                        }), h.affix == C.MessageConstatnts.PAGINATION.AFFIX.APPEND ? (h.id < t.id && 0 < h.id && (h.id = t.id), h.timestamp < t.sentAt && 0 < h.timestamp && (h.timestamp = t.sentAt), h.updatedAt < t.updatedAt && 0 < h.updatedAt && (h.updatedAt = t.updatedAt)) : (h.id > t.id && (h.id = t.id), h.timestamp > t.sentAt && (h.timestamp = t.sentAt), h.updatedAt > t.updatedAt && (h.updatedAt = t.updatedAt)), h.id && (h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.ID] = h.id), h.timestamp && (h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.SENT_AT] = h.timestamp), h.updatedAt && (h.paginationMeta[C.MessageConstatnts.PAGINATION.KEYS.UPDATED_AT] = h.updatedAt), n.push(g.MessageController.trasformJSONMessge(t))
                                    })
                                } else n = [];
                                a(n)
                            }, function (e) {
                                t(new p.CometChatException(e))
                            })
                        } catch (e) {
                            t(new p.CometChatException(e))
                        }
                    })
                }, e.prototype.createEndpoint = function () {
                    (_.isFalsy(this.guid) || _.isFalsy(this.uid)) && _.isFalsy(this.guid) ? (_.isFalsy(this.uid) ? this.endpointName = "getMessages" : this.endpointName = "getUserMessages", this.listId = this.uid) : (this.endpointName = "getGroupMessages", this.listId = this.guid)
                }, e.prototype.makeData = function () {
                    var e = {};
                    e[C.MessageConstatnts.PAGINATION.KEYS.PER_PAGE] = this.limit, e[C.MessageConstatnts.PAGINATION.KEYS.AFFIX] = this.affix, (_.isFalsy(this.guid) || _.isFalsy(this.uid)) && _.isFalsy(this.guid) && _.isFalsy(this.uid)
                }, e.prototype.getFilteredPreviousDataByReceiverId = function (t) {
                    return r(this, void 0, void 0, function () {
                        var n, r = this;
                        return a(this, function (e) {
                            switch (e.label) {
                                case 0:
                                    switch (n = [], t) {
                                        case"user":
                                            return [3, 1];
                                        case"group":
                                            return [3, 3];
                                        case"both":
                                            return [3, 5]
                                    }
                                    return [3, 7];
                                case 1:
                                    return [4, o.MessagesStore.getInstance().get(this.uid).then(function (t) {
                                        Object.keys(t).filter(function (e) {
                                            return parseInt(e) > r.id
                                        }).map(function (e) {
                                            n = n.concat([t[e]])
                                        })
                                    })];
                                case 2:
                                    return e.sent(), [3, 9];
                                case 3:
                                    return [4, o.MessagesStore.getInstance().get(this.guid).then(function (t) {
                                        Object.keys(t).filter(function (e) {
                                            return parseInt(e) > r.id
                                        }).map(function (e) {
                                            n = n.concat([t[e]])
                                        })
                                    })];
                                case 4:
                                    e.sent(), e.label = 5;
                                case 5:
                                    return [4, o.MessagesStore.getInstance().get(this.guid).then(function (t) {
                                        Object.keys(t).filter(function (e) {
                                            return parseInt(e) > r.id
                                        }).filter(function (e) {
                                            return t[e].sender.uid == r.uid
                                        }).map(function (e) {
                                            n = n.concat([t[e]])
                                        })
                                    })];
                                case 6:
                                    return e.sent(), [3, 9];
                                case 7:
                                    return [4, o.MessagesStore.getInstance().getAllMessages().then(function (t) {
                                        Object.keys(t).filter(function (e) {
                                            return parseInt(e) > r.id
                                        }).map(function (e) {
                                            n = n.concat([t[e]])
                                        })
                                    })];
                                case 8:
                                    return e.sent(), [3, 9];
                                case 9:
                                    return [2, n]
                            }
                        })
                    })
                }, e.prototype.getFilteredNextDataByReceiverId = function (t) {
                    return r(this, void 0, void 0, function () {
                        var n, r = this;
                        return a(this, function (e) {
                            switch (e.label) {
                                case 0:
                                    switch (n = [], t) {
                                        case"user":
                                            return [3, 1];
                                        case"group":
                                            return [3, 3];
                                        case"both":
                                            return [3, 5]
                                    }
                                    return [3, 7];
                                case 1:
                                    return [4, o.MessagesStore.getInstance().get(this.uid).then(function (t) {
                                        Object.keys(t).filter(function (e) {
                                            return parseInt(e) > r.id
                                        }).map(function (e) {
                                            n = n.concat([t[e]])
                                        })
                                    })];
                                case 2:
                                    return e.sent(), [3, 9];
                                case 3:
                                    return [4, o.MessagesStore.getInstance().get(this.guid).then(function (t) {
                                        Object.keys(t).filter(function (e) {
                                            return parseInt(e) > r.id
                                        }).map(function (e) {
                                            n = n.concat([t[e]])
                                        })
                                    })];
                                case 4:
                                    e.sent(), e.label = 5;
                                case 5:
                                    return [4, o.MessagesStore.getInstance().get(this.guid).then(function (t) {
                                        Object.keys(t).filter(function (e) {
                                            return parseInt(e) > r.id
                                        }).filter(function (e) {
                                            return t[e].sender.uid == r.uid
                                        }).map(function (e) {
                                            n = n.concat([t[e]])
                                        })
                                    })];
                                case 6:
                                    return e.sent(), [3, 9];
                                case 7:
                                    return [4, o.MessagesStore.getInstance().getAllMessages().then(function (t) {
                                        Object.keys(t).filter(function (e) {
                                            return parseInt(e) > r.id
                                        }).map(function (e) {
                                            n = n.concat([t[e]])
                                        })
                                    })];
                                case 8:
                                    return e.sent(), [3, 9];
                                case 9:
                                    return [2, n]
                            }
                        })
                    })
                }, e
            }();
        t.DefaultMessagesRequest = s;
        var i = function () {
            function e() {
                this.maxLimit = C.DEFAULT_VALUES.MSGS_MAX_LIMIT, this.timestamp = 0, this.id = C.DEFAULT_VALUES.DEFAULT_MSG_ID, this.unread = !1, this.undelivered = !1, this.HideMessagesFromBlockedUsers = !1, this.onlyUpdate = 0
            }

            return e.prototype.setLimit = function (e) {
                return this.limit = e, this
            }, e.prototype.setGUID = function (e) {
                return this.guid = e, this
            }, e.prototype.setUID = function (e) {
                return this.uid = e, this
            }, e.prototype.setTimestamp = function (e) {
                return void 0 === e && (e = _.getCurrentTime()), this.timestamp = e, this
            }, e.prototype.setMessageId = function (e) {
                return void 0 === e && (e = C.DEFAULT_VALUES.DEFAULT_MSG_ID), this.id = e, this
            }, e.prototype.setUnread = function (e) {
                return void 0 === e && (e = !1), this.unread = e, this
            }, e.prototype.setUndelivered = function (e) {
                return void 0 === e && (e = !1), this.undelivered = e, this
            }, e.prototype.hideMessagesFromBlockedUsers = function (e) {
                return void 0 === e && (e = !1), this.HideMessagesFromBlockedUsers = e, this
            }, e.prototype.setSearchKeyword = function (e) {
                return this.searchKey = e, this
            }, e.prototype.setUpdatedAfter = function (e) {
                return this.updatedAt = e, this
            }, e.prototype.updatesOnly = function (e) {
                return e && (this.onlyUpdate = 1), this
            }, e.prototype.setCategory = function (e) {
                return this.category = e, this
            }, e.prototype.setType = function (e) {
                return this.type = e, this
            }, e.prototype.build = function () {
                return new s(this)
            }, e
        }();
        t.DefaultMessagesRequestBuilder = i
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var r = function (e) {
        };
        t.CometChatExtension = r
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var o = n(4), r = n(1), s = n(8), i = n(2), a = n(0), c = function () {
            function e(e) {
                this.next_page = 1, this.current_page = 1, this.total_pages = -1, this.fetchingInProgress = !1, this.pagination = {
                    total: 0,
                    count: 0,
                    per_page: 0,
                    current_page: 0,
                    total_pages: 0,
                    links: []
                }, r.isFalsy(e) || (this.limit = e.limit, r.isFalsy(e.searchKeyword) || (this.searchKeyword = e.searchKeyword), r.isFalsy(e.direction) || (this.direction = e.direction))
            }

            return e.prototype.validateBlockedUsersBuilder = function () {
                if (void 0 === this.limit) return new i.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.COMPULSORY), "SET_LIMIT", "SET_LIMIT", "setLimit() method")));
                if (isNaN(this.limit)) return new i.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.MUST_BE_A_NUMBER), "SET_LIMIT", "SET_LIMIT", "user limit")));
                if (this.limit > a.DEFAULT_VALUES.USERS_MAX_LIMIT) return new i.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.LIMIT_EXCEEDED), "SET_LIMIT", "SET_LIMIT", "user limit", a.DEFAULT_VALUES.USERS_MAX_LIMIT)));
                if (this.limit < a.DEFAULT_VALUES.ZERO) return new i.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.MUST_BE_A_POSITIVE_NUMBER), "SET_LIMIT", "SET_LIMIT", "user limit")));
                if (void 0 !== this.searchKeyword) {
                    if (typeof this.searchKeyword !== a.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new i.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.MUST_BE_A_STRING), "SET_SEARCH_KEYWORD", "SET_SEARCH_KEYWORD", "search keyword")));
                    if (r.isFalsy(this.searchKeyword.trim())) return new i.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.INVALID), "SET_SEARCH_KEYWORD", "SET_SEARCH_KEYWORD", "search keyword")));
                    this.searchKeyword = this.searchKeyword.trim()
                }
                if (void 0 !== this.direction) {
                    if (typeof this.direction !== a.COMMON_UTILITY_CONSTANTS.TYPE_CONSTANTS.STRING) return new i.CometChatException(JSON.parse(r.format(JSON.stringify(a.GENERAL_ERROR.MUST_BE_A_STRING), "SET_DIRECTION", "SET_DIRECTION", "set direction")));
                    if (this.direction != a.BlockedUsersConstants.REQUEST_KEYS.DIRECTIONS.BOTH && this.direction != a.BlockedUsersConstants.REQUEST_KEYS.DIRECTIONS.BLOCKED_BY_ME && this.direction != a.BlockedUsersConstants.REQUEST_KEYS.DIRECTIONS.HAS_BLOCKED_ME) return new i.CometChatException(a.UserErrors.INVALID_DIRECTION)
                }
            }, e.prototype.fetchPrevious = function () {
                var r = this;
                return this.fetchingInProgress = !0, new Promise(function (t, n) {
                    try {
                        0 == r.next_page && (t([]), r.fetchingInProgress = !1);
                        var e = r.validateBlockedUsersBuilder();
                        if (e instanceof i.CometChatException) return void n(e);
                        if (!r.fetchingInProgress) return o.makeApiCall("blockedUsersList", {}, r.getPreData()).then(function (e) {
                            if (e.meta && (r.total_pages = e.meta.pagination.total_pages), 0 < e.data.length) {
                                r.pagination = e.meta.pagination;
                                var n = [];
                                e.data.map(function (e, t) {
                                    n.push(s.UsersController.trasformJSONUser(e))
                                }), t(n), r.fetchingInProgress = !1
                            }
                            t([]), r.fetchingInProgress = !1
                        }, function (e) {
                            n(new i.CometChatException(e.error)), r.fetchingInProgress = !1
                        });
                        t([])
                    } catch (e) {
                        n(new i.CometChatException(e)), r.fetchingInProgress = !1
                    }
                })
            }, e.prototype.fetchNext = function () {
                var r = this;
                return new Promise(function (n, t) {
                    try {
                        var e = r.validateBlockedUsersBuilder();
                        if (e instanceof i.CometChatException) return void t(e);
                        r.fetchingInProgress ? (r.fetchingInProgress = !1, n([])) : (r.fetchingInProgress = !0, o.makeApiCall("blockedUsersList", {}, r.getNextData()).then(function (e) {
                            if (e.meta && (r.total_pages = e.meta.pagination.total_pages), 0 < e.data.length) {
                                r.pagination = e.meta.pagination;
                                var t = [];
                                e.data.map(function (e) {
                                    t.push(s.UsersController.trasformJSONUser(e))
                                }), n(t)
                            } else n([])
                        }, function (e) {
                            r.fetchingInProgress = !1, t(new i.CometChatException(e.error))
                        }))
                    } catch (e) {
                        r.fetchingInProgress = !1, t(new i.CometChatException(e))
                    }
                })
            }, e.prototype.getNextData = function () {
                var e = {};
                if (r.isFalsy(this.direction) || (e.direction = this.direction), r.isFalsy(this.searchKeyword) || (e.searchKey = this.searchKeyword), e.per_page = this.limit, 0 == this.current_page) e.page = this.next_page, this.next_page++, this.current_page++; else {
                    if (this.next_page > this.total_pages) return e.page = this.next_page, e;
                    e.page = ++this.next_page
                }
                return e
            }, e.prototype.getPreData = function () {
                var e = {};
                return e.per_page = this.limit, 0 <= this.next_page && 0 < this.next_page && (e.page = --this.next_page), e
            }, e.MAX_LIMIT = 2, e.DEFAULT_LIMIT = 1, e.directions = a.BlockedUsersConstants.REQUEST_KEYS.DIRECTIONS, e
        }();
        t.BlockedUsersRequest = c;
        var u = function () {
            function e() {
            }

            return e.prototype.setLimit = function (e) {
                return this.limit = e, this
            }, e.prototype.setSearchKeyword = function (e) {
                return this.searchKeyword = e, this
            }, e.prototype.setDirection = function (e) {
                return this.direction = e, this
            }, e.prototype.blockedByMe = function () {
                return this.direction = a.BlockedUsersConstants.REQUEST_KEYS.DIRECTIONS.BLOCKED_BY_ME, this
            }, e.prototype.hasBlockedMe = function () {
                return this.direction = a.BlockedUsersConstants.REQUEST_KEYS.DIRECTIONS.HAS_BLOCKED_ME, this
            }, e.prototype.build = function () {
                return new c(this)
            }, e
        }();
        t.BlockedUsersRequestBuilder = u
    }, function (e, t, n) {
        "use strict";
        t.__esModule = !0;
        var d = n(7), E = n(0), h = n(8), p = n(16), f = n(36), r = n(3), o = n(2), s = n(1), i = function () {
            function e() {
            }

            return e.processMessage = function (e) {
                try {
                    return d.MessageController.trasformJSONMessge(e)
                } catch (e) {
                    s.Logger.error("CometChatHelper: processMessage", e)
                }
            }, e.getConversationFromMessage = function (l) {
                return new Promise(function (c, u) {
                    try {
                        r.CometChat.getLoggedinUser().then(function (e) {
                            if (null !== e) {
                                var t = d.MessageController.trasformJSONMessge(l), n = t.receiverType,
                                    r = t.conversationId, o = void 0, s = d.MessageController.trasformJSONMessge(l);
                                if (n == E.MessageConstatnts.RECEIVER_TYPE.USER) {
                                    var i = h.UsersController.trasformJSONUser(t[E.MessageConstatnts.KEYS.SENDER]);
                                    o = i.getUid() == e.getUid() ? h.UsersController.trasformJSONUser(t[E.MessageConstatnts.KEYS.RECEIVER]) : i
                                } else o = p.GroupsController.trasformJSONGroup(t[E.MessageConstatnts.KEYS.RECEIVER]);
                                var a = f.ConversationController.trasformJSONConversation(r, n, s, o, 0);
                                c(a)
                            } else u(E.UserErrors.USER_NOT_LOGGED_IN)
                        }, function (e) {
                            u(new o.CometChatException(e.error))
                        })
                    } catch (e) {
                        u(new o.CometChatException(e))
                    }
                })
            }, e
        }();
        t.CometChatHelper = i
    }, function (e, t, n) {
        var i = n(59), a = n(60);
        e.exports = function (e, t, n) {
            var r = t && n || 0;
            "string" == typeof e && (t = "binary" === e ? new Array(16) : null, e = null);
            var o = (e = e || {}).random || (e.rng || i)();
            if (o[6] = 15 & o[6] | 64, o[8] = 63 & o[8] | 128, t) for (var s = 0; s < 16; ++s) t[r + s] = o[s];
            return t || a(o)
        }
    }, function (e, t) {
        var n = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof window.msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto);
        if (n) {
            var r = new Uint8Array(16);
            e.exports = function () {
                return n(r), r
            }
        } else {
            var o = new Array(16);
            e.exports = function () {
                for (var e, t = 0; t < 16; t++) 0 == (3 & t) && (e = 4294967296 * Math.random()), o[t] = e >>> ((3 & t) << 3) & 255;
                return o
            }
        }
    }, function (e, t) {
        for (var o = [], n = 0; n < 256; ++n) o[n] = (n + 256).toString(16).substr(1);
        e.exports = function (e, t) {
            var n = t || 0, r = o;
            return [r[e[n++]], r[e[n++]], r[e[n++]], r[e[n++]], "-", r[e[n++]], r[e[n++]], "-", r[e[n++]], r[e[n++]], "-", r[e[n++]], r[e[n++]], "-", r[e[n++]], r[e[n++]], r[e[n++]], r[e[n++]], r[e[n++]], r[e[n++]]].join("")
        }
    }, function (e, t, n) {
        function r(e) {
            this.options = e || {locator: {}}
        }

        function u() {
            this.cdata = !1
        }

        function l(e, t) {
            t.lineNumber = e.lineNumber, t.columnNumber = e.columnNumber
        }

        function d(e) {
            if (e) return "\n@" + (e.systemId || "") + "#[line:" + e.lineNumber + ",col:" + e.columnNumber + "]"
        }

        function o(e, t, n) {
            return "string" == typeof e ? e.substr(t, n) : e.length >= t + n || t ? new java.lang.String(e, t, n) + "" : e
        }

        function E(e, t) {
            e.currentElement ? e.currentElement.appendChild(t) : e.doc.appendChild(t)
        }

        r.prototype.parseFromString = function (e, t) {
            var n = this.options, r = new h, o = n.domBuilder || new u, s = n.errorHandler, i = n.locator,
                a = n.xmlns || {}, c = {lt: "<", gt: ">", amp: "&", quot: '"', apos: "'"};
            return i && o.setDocumentLocator(i), r.errorHandler = function (r, e, o) {
                if (!r) {
                    if (e instanceof u) return e;
                    r = e
                }
                var s = {}, i = r instanceof Function;

                function t(t) {
                    var n = r[t];
                    !n && i && (n = 2 == r.length ? function (e) {
                        r(t, e)
                    } : r), s[t] = n && function (e) {
                        n("[xmldom " + t + "]\t" + e + d(o))
                    } || function () {
                    }
                }

                return o = o || {}, t("warning"), t("error"), t("fatalError"), s
            }(s, o, i), r.domBuilder = n.domBuilder || o, /\/x?html?$/.test(t) && (c.nbsp = " ", c.copy = "©", a[""] = "http://www.w3.org/1999/xhtml"), a.xml = a.xml || "http://www.w3.org/XML/1998/namespace", e ? r.parse(e, a, c) : r.errorHandler.error("invalid doc source"), o.doc
        }, u.prototype = {
            startDocument: function () {
                this.doc = (new s).createDocument(null, null, null), this.locator && (this.doc.documentURI = this.locator.systemId)
            }, startElement: function (e, t, n, r) {
                var o = this.doc, s = o.createElementNS(e, n || t), i = r.length;
                E(this, s), this.currentElement = s, this.locator && l(this.locator, s);
                for (var a = 0; a < i; a++) {
                    e = r.getURI(a);
                    var c = r.getValue(a), u = (n = r.getQName(a), o.createAttributeNS(e, n));
                    this.locator && l(r.getLocator(a), u), u.value = u.nodeValue = c, s.setAttributeNode(u)
                }
            }, endElement: function (e, t, n) {
                var r = this.currentElement;
                r.tagName;
                this.currentElement = r.parentNode
            }, startPrefixMapping: function (e, t) {
            }, endPrefixMapping: function (e) {
            }, processingInstruction: function (e, t) {
                var n = this.doc.createProcessingInstruction(e, t);
                this.locator && l(this.locator, n), E(this, n)
            }, ignorableWhitespace: function (e, t, n) {
            }, characters: function (e, t, n) {
                if (e = o.apply(this, arguments)) {
                    if (this.cdata) var r = this.doc.createCDATASection(e); else r = this.doc.createTextNode(e);
                    this.currentElement ? this.currentElement.appendChild(r) : /^\s*$/.test(e) && this.doc.appendChild(r), this.locator && l(this.locator, r)
                }
            }, skippedEntity: function (e) {
            }, endDocument: function () {
                this.doc.normalize()
            }, setDocumentLocator: function (e) {
                (this.locator = e) && (e.lineNumber = 0)
            }, comment: function (e, t, n) {
                e = o.apply(this, arguments);
                var r = this.doc.createComment(e);
                this.locator && l(this.locator, r), E(this, r)
            }, startCDATA: function () {
                this.cdata = !0
            }, endCDATA: function () {
                this.cdata = !1
            }, startDTD: function (e, t, n) {
                var r = this.doc.implementation;
                if (r && r.createDocumentType) {
                    var o = r.createDocumentType(e, t, n);
                    this.locator && l(this.locator, o), E(this, o)
                }
            }, warning: function (e) {
            }, error: function (e) {
            }, fatalError: function (e) {
                throw e
            }
        }, "endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g, function (e) {
            u.prototype[e] = function () {
                return null
            }
        });
        var h = n(62).XMLReader, s = t.DOMImplementation = n(38).DOMImplementation;
        t.XMLSerializer = n(38).XMLSerializer, t.DOMParser = r
    }, function (e, t) {
        var n = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,
            r = new RegExp("[\\-\\.0-9" + n.source.slice(1, -1) + "\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),
            o = new RegExp("^" + n.source + r.source + "*(?::" + n.source + r.source + "*)?$"), d = 0, E = 1, h = 2,
            p = 3, f = 4, g = 5, _ = 6, C = 7;

        function s() {
        }

        function L(e, t) {
            return t.lineNumber = e.lineNumber, t.columnNumber = e.columnNumber, t
        }

        function U(e, t, n, r, o, s) {
            for (var i, a = ++t, c = d; ;) {
                var u = e.charAt(a);
                switch (u) {
                    case"=":
                        if (c === E) i = e.slice(t, a), c = p; else {
                            if (c !== h) throw new Error("attribute equal must after attrName");
                            c = p
                        }
                        break;
                    case"'":
                    case'"':
                        if (c === p || c === E) {
                            if (c === E && (s.warning('attribute value must after "="'), i = e.slice(t, a)), t = a + 1, !(0 < (a = e.indexOf(u, t)))) throw new Error("attribute value no end '" + u + "' match");
                            l = e.slice(t, a).replace(/&#?\w+;/g, o), n.add(i, l, t - 1), c = g
                        } else {
                            if (c != f) throw new Error('attribute value must after "="');
                            l = e.slice(t, a).replace(/&#?\w+;/g, o), n.add(i, l, t), s.warning('attribute "' + i + '" missed start quot(' + u + ")!!"), t = a + 1, c = g
                        }
                        break;
                    case"/":
                        switch (c) {
                            case d:
                                n.setTagName(e.slice(t, a));
                            case g:
                            case _:
                            case C:
                                c = C, n.closed = !0;
                            case f:
                            case E:
                            case h:
                                break;
                            default:
                                throw new Error("attribute invalid close char('/')")
                        }
                        break;
                    case"":
                        return s.error("unexpected end of input"), c == d && n.setTagName(e.slice(t, a)), a;
                    case">":
                        switch (c) {
                            case d:
                                n.setTagName(e.slice(t, a));
                            case g:
                            case _:
                            case C:
                                break;
                            case f:
                            case E:
                                "/" === (l = e.slice(t, a)).slice(-1) && (n.closed = !0, l = l.slice(0, -1));
                            case h:
                                c === h && (l = i), c == f ? (s.warning('attribute "' + l + '" missed quot(")!!'), n.add(i, l.replace(/&#?\w+;/g, o), t)) : ("http://www.w3.org/1999/xhtml" === r[""] && l.match(/^(?:disabled|checked|selected)$/i) || s.warning('attribute "' + l + '" missed value!! "' + l + '" instead!!'), n.add(l, l, t));
                                break;
                            case p:
                                throw new Error("attribute value missed!!")
                        }
                        return a;
                    case"":
                        u = " ";
                    default:
                        if (u <= " ") switch (c) {
                            case d:
                                n.setTagName(e.slice(t, a)), c = _;
                                break;
                            case E:
                                i = e.slice(t, a), c = h;
                                break;
                            case f:
                                var l = e.slice(t, a).replace(/&#?\w+;/g, o);
                                s.warning('attribute "' + l + '" missed quot(")!!'), n.add(i, l, t);
                            case g:
                                c = _
                        } else switch (c) {
                            case h:
                                n.tagName;
                                "http://www.w3.org/1999/xhtml" === r[""] && i.match(/^(?:disabled|checked|selected)$/i) || s.warning('attribute "' + i + '" missed value!! "' + i + '" instead2!!'), n.add(i, i, t), t = a, c = E;
                                break;
                            case g:
                                s.warning('attribute space is required"' + i + '"!!');
                            case _:
                                c = E, t = a;
                                break;
                            case p:
                                c = f, t = a;
                                break;
                            case C:
                                throw new Error("elements closed character '/' and '>' must be connected to")
                        }
                }
                a++
            }
        }

        function D(e, t, n) {
            for (var r = e.tagName, o = null, s = e.length; s--;) {
                var i = e[s], a = i.qName, c = i.value;
                if (0 < (E = a.indexOf(":"))) var u = i.prefix = a.slice(0, E), l = a.slice(E + 1),
                    d = "xmlns" === u && l; else u = null, d = "xmlns" === (l = a) && "";
                i.localName = l, !1 !== d && (null == o && (o = {}, S(n, n = {})), n[d] = o[d] = c, i.uri = "http://www.w3.org/2000/xmlns/", t.startPrefixMapping(d, c))
            }
            for (s = e.length; s--;) {
                (u = (i = e[s]).prefix) && ("xml" === u && (i.uri = "http://www.w3.org/XML/1998/namespace"), "xmlns" !== u && (i.uri = n[u || ""]))
            }
            var E = r.indexOf(":");
            l = e.localName = 0 < E ? (u = e.prefix = r.slice(0, E), r.slice(E + 1)) : (u = null, r);
            var h = e.uri = n[u || ""];
            if (t.startElement(h, l, r, e), !e.closed) return e.currentNSMap = n, e.localNSMap = o, !0;
            if (t.endElement(h, l, r), o) for (u in o) t.endPrefixMapping(u)
        }

        function w(e, t, n, r, o) {
            if (/^(?:script|textarea)$/i.test(n)) {
                var s = e.indexOf("</" + n + ">", t), i = e.substring(t + 1, s);
                if (/[&<]/.test(i)) return /^script$/i.test(n) || (i = i.replace(/&#?\w+;/g, r)), o.characters(i, 0, i.length), s
            }
            return t + 1
        }

        function b(e, t, n, r) {
            var o = r[n];
            return null == o && ((o = e.lastIndexOf("</" + n + ">")) < t && (o = e.lastIndexOf("</" + n)), r[n] = o), o < t
        }

        function S(e, t) {
            for (var n in e) t[n] = e[n]
        }

        function Y(e, t, n, r) {
            switch (e.charAt(t + 2)) {
                case"-":
                    return "-" !== e.charAt(t + 3) ? -1 : t < (o = e.indexOf("--\x3e", t + 4)) ? (n.comment(e, t + 4, o - t - 4), o + 3) : (r.error("Unclosed comment"), -1);
                default:
                    if ("CDATA[" == e.substr(t + 3, 6)) {
                        var o = e.indexOf("]]>", t + 9);
                        return n.startCDATA(), n.characters(e, t + 9, o - t - 9), n.endCDATA(), o + 3
                    }
                    var s = function (e, t) {
                        var n, r = [], o = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
                        o.lastIndex = t, o.exec(e);
                        for (; n = o.exec(e);) if (r.push(n), n[1]) return r
                    }(e, t), i = s.length;
                    if (1 < i && /!doctype/i.test(s[0][0])) {
                        var a = s[1][0], c = 3 < i && /^public$/i.test(s[2][0]) && s[3][0], u = 4 < i && s[4][0],
                            l = s[i - 1];
                        return n.startDTD(a, c && c.replace(/^(['"])(.*?)\1$/, "$2"), u && u.replace(/^(['"])(.*?)\1$/, "$2")), n.endDTD(), l.index + l[0].length
                    }
            }
            return -1
        }

        function x(e, t, n) {
            var r = e.indexOf("?>", t);
            if (r) {
                var o = e.substring(t, r).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
                if (o) {
                    o[0].length;
                    return n.processingInstruction(o[1], o[2]), r + 2
                }
                return -1
            }
            return -1
        }

        function G(e) {
        }

        function i(e, t) {
            return e.__proto__ = t, e
        }

        s.prototype = {
            parse: function (e, t, n) {
                var r = this.domBuilder;
                r.startDocument(), S(t, t = {}), function (n, e, r, o, s) {
                    function i(e) {
                        var t = e.slice(1, -1);
                        return t in r ? r[t] : "#" === t.charAt(0) ? function (e) {
                            {
                                if (65535 < e) {
                                    var t = 55296 + ((e -= 65536) >> 10), n = 56320 + (1023 & e);
                                    return String.fromCharCode(t, n)
                                }
                                return String.fromCharCode(e)
                            }
                        }(parseInt(t.substr(1).replace("x", "0x"))) : (s.error("entity not found:" + e), e)
                    }

                    function t(e) {
                        if (p < e) {
                            var t = n.substring(p, e).replace(/&#?\w+;/g, i);
                            d && a(p), o.characters(t, 0, e - p), p = e
                        }
                    }

                    function a(e, t) {
                        for (; u <= e && (t = l.exec(n));) c = t.index, u = c + t[0].length, d.lineNumber++;
                        d.columnNumber = e - c + 1
                    }

                    var c = 0, u = 0, l = /.*(?:\r\n?|\n)|.*$/g, d = o.locator, E = [{currentNSMap: e}], h = {}, p = 0;
                    for (; ;) {
                        try {
                            var f = n.indexOf("<", p);
                            if (f < 0) {
                                if (!n.substr(p).match(/^\s*$/)) {
                                    var g = o.doc, _ = g.createTextNode(n.substr(p));
                                    g.appendChild(_), o.currentElement = _
                                }
                                return
                            }
                            switch (p < f && t(f), n.charAt(f + 1)) {
                                case"/":
                                    var C = n.indexOf(">", f + 3), S = n.substring(f + 2, C), T = E.pop();
                                    C < 0 ? (S = n.substring(f + 2).replace(/[\s<].*/, ""), s.error("end tag name: " + S + " is not complete:" + T.tagName), C = f + 1 + S.length) : S.match(/\s</) && (S = S.replace(/[\s<].*/, ""), s.error("end tag name: " + S + " maybe not complete"), C = f + 1 + S.length);
                                    var m = T.localNSMap, A = T.tagName == S,
                                        I = A || T.tagName && T.tagName.toLowerCase() == S.toLowerCase();
                                    if (I) {
                                        if (o.endElement(T.uri, T.localName, S), m) for (var N in m) o.endPrefixMapping(N);
                                        A || s.fatalError("end tag name: " + S + " is not match the current start tagName:" + T.tagName)
                                    } else E.push(T);
                                    C++;
                                    break;
                                case"?":
                                    d && a(f), C = x(n, f, o);
                                    break;
                                case"!":
                                    d && a(f), C = Y(n, f, o, s);
                                    break;
                                default:
                                    d && a(f);
                                    var R = new G, y = E[E.length - 1].currentNSMap, C = U(n, f, R, y, i, s),
                                        O = R.length;
                                    if (!R.closed && b(n, C, R.tagName, h) && (R.closed = !0, r.nbsp || s.warning("unclosed xml attribute")), d && O) {
                                        for (var v = L(d, {}), M = 0; M < O; M++) {
                                            var P = R[M];
                                            a(P.offset), P.locator = L(d, {})
                                        }
                                        o.locator = v, D(R, o, y) && E.push(R), o.locator = d
                                    } else D(R, o, y) && E.push(R);
                                    "http://www.w3.org/1999/xhtml" !== R.uri || R.closed ? C++ : C = w(n, C, R.tagName, i, o)
                            }
                        } catch (e) {
                            s.error("element parse error: " + e), C = -1
                        }
                        p < C ? p = C : t(Math.max(f, p) + 1)
                    }
                }(e, t, n, r, this.errorHandler), r.endDocument()
            }
        }, G.prototype = {
            setTagName: function (e) {
                if (!o.test(e)) throw new Error("invalid tagName:" + e);
                this.tagName = e
            }, add: function (e, t, n) {
                if (!o.test(e)) throw new Error("invalid attribute:" + e);
                this[this.length++] = {qName: e, value: t, offset: n}
            }, length: 0, getLocalName: function (e) {
                return this[e].localName
            }, getLocator: function (e) {
                return this[e].locator
            }, getQName: function (e) {
                return this[e].qName
            }, getURI: function (e) {
                return this[e].uri
            }, getValue: function (e) {
                return this[e].value
            }
        }, i({}, i.prototype) instanceof i || (i = function (e, t) {
            function n() {
            }

            for (t in n.prototype = t, n = new n, e) n[t] = e[t];
            return n
        }), t.XMLReader = s
    }])
});